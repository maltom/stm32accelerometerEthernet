
stm32accelerometerEthernet_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000788c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b5c  08007b5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b64  08007b64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b64  08007b64  00017b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b68  08007b68  00017b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08007b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  24000010  08007b7c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400052c  08007b7c  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020621  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003387  00000000  00000000  0004065f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  000439e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00044bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003acd7  00000000  00000000  00045ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148e0  00000000  00000000  00080977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018b7e1  00000000  00000000  00095257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00220a38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c80  00000000  00000000  00220a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007b0c 	.word	0x08007b0c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007b0c 	.word	0x08007b0c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800070a:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 fcca 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f880 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f000 f9f8 	bl	8000b08 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000718:	f000 f978 	bl	8000a0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800071c:	f000 f9c2 	bl	8000aa4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000720:	f000 f8fc 	bl	800091c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);//GREEN
 8000724:	2200      	movs	r2, #0
 8000726:	2101      	movs	r1, #1
 8000728:	4836      	ldr	r0, [pc, #216]	; (8000804 <main+0x100>)
 800072a:	f002 fb47 	bl	8002dbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);//RED
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000734:	4833      	ldr	r0, [pc, #204]	; (8000804 <main+0x100>)
 8000736:	f002 fb41 	bl	8002dbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_RESET);//YELLOW
 800073a:	2200      	movs	r2, #0
 800073c:	2102      	movs	r1, #2
 800073e:	4832      	ldr	r0, [pc, #200]	; (8000808 <main+0x104>)
 8000740:	f002 fb3c 	bl	8002dbc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000748:	f000 fd3e 	bl	80011c8 <HAL_Delay>

  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
 800074c:	2102      	movs	r1, #2
 800074e:	482e      	ldr	r0, [pc, #184]	; (8000808 <main+0x104>)
 8000750:	f002 fb4d 	bl	8002dee <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 8000754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000758:	f000 fd36 	bl	80011c8 <HAL_Delay>

  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 800075c:	2101      	movs	r1, #1
 800075e:	4829      	ldr	r0, [pc, #164]	; (8000804 <main+0x100>)
 8000760:	f002 fb45 	bl	8002dee <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000768:	4826      	ldr	r0, [pc, #152]	; (8000804 <main+0x100>)
 800076a:	f002 fb40 	bl	8002dee <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
 800076e:	2102      	movs	r1, #2
 8000770:	4825      	ldr	r0, [pc, #148]	; (8000808 <main+0x104>)
 8000772:	f002 fb3c 	bl	8002dee <HAL_GPIO_TogglePin>

  char msg[1024];

  int index = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  for(index=0;index<1024;index++)
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8000782:	e00a      	b.n	800079a <main+0x96>
	  msg[index] = 0;
 8000784:	1d3a      	adds	r2, r7, #4
 8000786:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800078a:	4413      	add	r3, r2
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
  for(index=0;index<1024;index++)
 8000790:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000794:	3301      	adds	r3, #1
 8000796:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800079a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800079e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007a2:	dbef      	blt.n	8000784 <main+0x80>
  index = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  {
	  /*HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
	  HAL_Delay(500);*/
	  HAL_ADC_Start(&hadc1);
 80007aa:	4818      	ldr	r0, [pc, #96]	; (800080c <main+0x108>)
 80007ac:	f001 f8be 	bl	800192c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1);
 80007b0:	2101      	movs	r1, #1
 80007b2:	4816      	ldr	r0, [pc, #88]	; (800080c <main+0x108>)
 80007b4:	f001 f984 	bl	8001ac0 <HAL_ADC_PollForConversion>

	  msg[index] = HAL_ADC_GetValue(&hadc1);
 80007b8:	4814      	ldr	r0, [pc, #80]	; (800080c <main+0x108>)
 80007ba:	f001 fa75 	bl	8001ca8 <HAL_ADC_GetValue>
 80007be:	4603      	mov	r3, r0
 80007c0:	b2d9      	uxtb	r1, r3
 80007c2:	1d3a      	adds	r2, r7, #4
 80007c4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80007c8:	4413      	add	r3, r2
 80007ca:	460a      	mov	r2, r1
 80007cc:	701a      	strb	r2, [r3, #0]
	  if(index>=1023)
 80007ce:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80007d2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80007d6:	4293      	cmp	r3, r2
 80007d8:	dd0b      	ble.n	80007f2 <main+0xee>
	  {
		  HAL_UART_Transmit(&huart3, msg, 1024, 2000);
 80007da:	1d39      	adds	r1, r7, #4
 80007dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <main+0x10c>)
 80007e6:	f005 fe41 	bl	800646c <HAL_UART_Transmit>
		  index = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80007f0:	e004      	b.n	80007fc <main+0xf8>
	  }
	  else
	  {
		  ++index;
 80007f2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80007f6:	3301      	adds	r3, #1
 80007f8:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	  }

	  HAL_Delay(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f000 fce3 	bl	80011c8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000802:	e7d2      	b.n	80007aa <main+0xa6>
 8000804:	58020400 	.word	0x58020400
 8000808:	58021000 	.word	0x58021000
 800080c:	240004c4 	.word	0x240004c4
 8000810:	2400002c 	.word	0x2400002c

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09c      	sub	sp, #112	; 0x70
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	224c      	movs	r2, #76	; 0x4c
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f007 f96a 	bl	8007afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2220      	movs	r2, #32
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f007 f964 	bl	8007afc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000834:	2004      	movs	r0, #4
 8000836:	f002 fc3d 	bl	80030b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b34      	ldr	r3, [pc, #208]	; (8000910 <SystemClock_Config+0xfc>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a33      	ldr	r2, [pc, #204]	; (8000910 <SystemClock_Config+0xfc>)
 8000844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b31      	ldr	r3, [pc, #196]	; (8000910 <SystemClock_Config+0xfc>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <SystemClock_Config+0x100>)
 8000856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000858:	4a2e      	ldr	r2, [pc, #184]	; (8000914 <SystemClock_Config+0x100>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <SystemClock_Config+0x100>)
 8000862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086c:	bf00      	nop
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <SystemClock_Config+0xfc>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087a:	d1f8      	bne.n	800086e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <SystemClock_Config+0x104>)
 800087e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000880:	f023 0303 	bic.w	r3, r3, #3
 8000884:	4a24      	ldr	r2, [pc, #144]	; (8000918 <SystemClock_Config+0x104>)
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000890:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	2302      	movs	r3, #2
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80008a2:	2378      	movs	r3, #120	; 0x78
 80008a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b2:	230c      	movs	r3, #12
 80008b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fc60 	bl	8003188 <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008ce:	f000 fa17 	bl	8000d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	233f      	movs	r3, #63	; 0x3f
 80008d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2303      	movs	r3, #3
 80008d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008de:	2308      	movs	r3, #8
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e2:	2340      	movs	r3, #64	; 0x40
 80008e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2104      	movs	r1, #4
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 f855 	bl	80039a8 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000904:	f000 f9fc 	bl	8000d00 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3770      	adds	r7, #112	; 0x70
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	58024800 	.word	0x58024800
 8000914:	58000400 	.word	0x58000400
 8000918:	58024400 	.word	0x58024400

0800091c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800092e:	463b      	mov	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
 800093c:	615a      	str	r2, [r3, #20]
 800093e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000940:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <MX_ADC1_Init+0xe4>)
 8000942:	4a30      	ldr	r2, [pc, #192]	; (8000a04 <MX_ADC1_Init+0xe8>)
 8000944:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000946:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <MX_ADC1_Init+0xe4>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800094c:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <MX_ADC1_Init+0xe4>)
 800094e:	2210      	movs	r2, #16
 8000950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000952:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <MX_ADC1_Init+0xe4>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000958:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <MX_ADC1_Init+0xe4>)
 800095a:	2204      	movs	r2, #4
 800095c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <MX_ADC1_Init+0xe4>)
 8000960:	2200      	movs	r2, #0
 8000962:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000964:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <MX_ADC1_Init+0xe4>)
 8000966:	2200      	movs	r2, #0
 8000968:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800096a:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <MX_ADC1_Init+0xe4>)
 800096c:	2201      	movs	r2, #1
 800096e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <MX_ADC1_Init+0xe4>)
 8000972:	2200      	movs	r2, #0
 8000974:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000976:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <MX_ADC1_Init+0xe4>)
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <MX_ADC1_Init+0xe4>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <MX_ADC1_Init+0xe4>)
 8000984:	2200      	movs	r2, #0
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <MX_ADC1_Init+0xe4>)
 800098a:	2200      	movs	r2, #0
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_ADC1_Init+0xe4>)
 8000990:	2200      	movs	r2, #0
 8000992:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_ADC1_Init+0xe4>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800099c:	4818      	ldr	r0, [pc, #96]	; (8000a00 <MX_ADC1_Init+0xe4>)
 800099e:	f000 fe25 	bl	80015ec <HAL_ADC_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009a8:	f000 f9aa 	bl	8000d00 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4812      	ldr	r0, [pc, #72]	; (8000a00 <MX_ADC1_Init+0xe4>)
 80009b8:	f001 fe8e 	bl	80026d8 <HAL_ADCEx_MultiModeConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009c2:	f000 f99d 	bl	8000d00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_ADC1_Init+0xec>)
 80009c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ca:	2306      	movs	r3, #6
 80009cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009d2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009d6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d8:	2304      	movs	r3, #4
 80009da:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_ADC1_Init+0xe4>)
 80009ea:	f001 f96b 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80009f4:	f000 f984 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	240004c4 	.word	0x240004c4
 8000a04:	40022000 	.word	0x40022000
 8000a08:	3ef08000 	.word	0x3ef08000

08000a0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <MX_USART3_UART_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a18:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 8000a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a56:	f005 fcb9 	bl	80063cc <HAL_UART_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 f94e 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a68:	f006 fc9c 	bl	80073a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 f945 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4808      	ldr	r0, [pc, #32]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a7a:	f006 fcd1 	bl	8007420 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 f93c 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a8a:	f006 fc52 	bl	8007332 <HAL_UARTEx_DisableFifoMode>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f934 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2400002c 	.word	0x2400002c
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aaa:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000aac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab0:	2209      	movs	r2, #9
 8000ab2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aec:	f002 f999 	bl	8002e22 <HAL_PCD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000af6:	f000 f903 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	240000bc 	.word	0x240000bc
 8000b04:	40080000 	.word	0x40080000

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b72      	ldr	r3, [pc, #456]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	4a70      	ldr	r2, [pc, #448]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2e:	4b6e      	ldr	r3, [pc, #440]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
 8000b3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3c:	4b6a      	ldr	r3, [pc, #424]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	4a69      	ldr	r2, [pc, #420]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4c:	4b66      	ldr	r3, [pc, #408]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b63      	ldr	r3, [pc, #396]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	4a61      	ldr	r2, [pc, #388]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6a:	4b5f      	ldr	r3, [pc, #380]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b5b      	ldr	r3, [pc, #364]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	4a5a      	ldr	r2, [pc, #360]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b88:	4b57      	ldr	r3, [pc, #348]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b54      	ldr	r3, [pc, #336]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	4a52      	ldr	r2, [pc, #328]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000b9e:	f043 0308 	orr.w	r3, r3, #8
 8000ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba6:	4b50      	ldr	r3, [pc, #320]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	f003 0308 	and.w	r3, r3, #8
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb4:	4b4c      	ldr	r3, [pc, #304]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	4a4b      	ldr	r2, [pc, #300]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc4:	4b48      	ldr	r3, [pc, #288]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd2:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a43      	ldr	r2, [pc, #268]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bf6:	483d      	ldr	r0, [pc, #244]	; (8000cec <MX_GPIO_Init+0x1e4>)
 8000bf8:	f002 f8e0 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2102      	movs	r1, #2
 8000c00:	483b      	ldr	r0, [pc, #236]	; (8000cf0 <MX_GPIO_Init+0x1e8>)
 8000c02:	f002 f8db 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4836      	ldr	r0, [pc, #216]	; (8000cf4 <MX_GPIO_Init+0x1ec>)
 8000c1c:	f001 ff1e 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c20:	2332      	movs	r3, #50	; 0x32
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c30:	230b      	movs	r3, #11
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	482e      	ldr	r0, [pc, #184]	; (8000cf4 <MX_GPIO_Init+0x1ec>)
 8000c3c:	f001 ff0e 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c40:	2386      	movs	r3, #134	; 0x86
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c50:	230b      	movs	r3, #11
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4827      	ldr	r0, [pc, #156]	; (8000cf8 <MX_GPIO_Init+0x1f0>)
 8000c5c:	f001 fefe 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c60:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	481c      	ldr	r0, [pc, #112]	; (8000cec <MX_GPIO_Init+0x1e4>)
 8000c7a:	f001 feef 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c90:	230b      	movs	r3, #11
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <MX_GPIO_Init+0x1e4>)
 8000c9c:	f001 fede 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ca0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb2:	230b      	movs	r3, #11
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480f      	ldr	r0, [pc, #60]	; (8000cfc <MX_GPIO_Init+0x1f4>)
 8000cbe:	f001 fecd 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_GPIO_Init+0x1e8>)
 8000cda:	f001 febf 	bl	8002a5c <HAL_GPIO_Init>

}
 8000cde:	bf00      	nop
 8000ce0:	3730      	adds	r7, #48	; 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58020400 	.word	0x58020400
 8000cf0:	58021000 	.word	0x58021000
 8000cf4:	58020800 	.word	0x58020800
 8000cf8:	58020000 	.word	0x58020000
 8000cfc:	58021800 	.word	0x58021800

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_MspInit+0x30>)
 8000d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d18:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_MspInit+0x30>)
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_MspInit+0x30>)
 8000d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	58024400 	.word	0x58024400

08000d40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0b8      	sub	sp, #224	; 0xe0
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	22bc      	movs	r2, #188	; 0xbc
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f006 fecb 	bl	8007afc <memset>
  if(hadc->Instance==ADC1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a2a      	ldr	r2, [pc, #168]	; (8000e14 <HAL_ADC_MspInit+0xd4>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d14c      	bne.n	8000e0a <HAL_ADC_MspInit+0xca>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d74:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000d7a:	2313      	movs	r3, #19
 8000d7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d8a:	23c0      	movs	r3, #192	; 0xc0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d8e:	2320      	movs	r3, #32
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 f98d 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000dac:	f7ff ffa8 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_ADC_MspInit+0xd8>)
 8000db2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db6:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <HAL_ADC_MspInit+0xd8>)
 8000db8:	f043 0320 	orr.w	r3, r3, #32
 8000dbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_ADC_MspInit+0xd8>)
 8000dc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc6:	f003 0320 	and.w	r3, r3, #32
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_ADC_MspInit+0xd8>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <HAL_ADC_MspInit+0xd8>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_ADC_MspInit+0xd8>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dec:	2308      	movs	r3, #8
 8000dee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df2:	2303      	movs	r3, #3
 8000df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000e06:	f001 fe29 	bl	8002a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	37e0      	adds	r7, #224	; 0xe0
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40022000 	.word	0x40022000
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	58020000 	.word	0x58020000

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0b8      	sub	sp, #224	; 0xe0
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	22bc      	movs	r2, #188	; 0xbc
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f006 fe5b 	bl	8007afc <memset>
  if(huart->Instance==USART3)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <HAL_UART_MspInit+0xc0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d142      	bne.n	8000ed6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e50:	2302      	movs	r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 f92e 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e6a:	f7ff ff49 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_UART_MspInit+0xc4>)
 8000e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <HAL_UART_MspInit+0xc4>)
 8000e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_UART_MspInit+0xc4>)
 8000e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_UART_MspInit+0xc4>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <HAL_UART_MspInit+0xc4>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_UART_MspInit+0xc4>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000eaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <HAL_UART_MspInit+0xc8>)
 8000ed2:	f001 fdc3 	bl	8002a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	37e0      	adds	r7, #224	; 0xe0
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40004800 	.word	0x40004800
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	58020c00 	.word	0x58020c00

08000eec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0b8      	sub	sp, #224	; 0xe0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	22bc      	movs	r2, #188	; 0xbc
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f006 fdf5 	bl	8007afc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a36      	ldr	r2, [pc, #216]	; (8000ff0 <HAL_PCD_MspInit+0x104>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d165      	bne.n	8000fe8 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000f26:	2318      	movs	r3, #24
 8000f28:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000f36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f3a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 f8b7 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000f58:	f7ff fed2 	bl	8000d00 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f5c:	f002 f904 	bl	8003168 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <HAL_PCD_MspInit+0x108>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f66:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <HAL_PCD_MspInit+0x108>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_PCD_MspInit+0x108>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f7e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f98:	230a      	movs	r3, #10
 8000f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4814      	ldr	r0, [pc, #80]	; (8000ff8 <HAL_PCD_MspInit+0x10c>)
 8000fa6:	f001 fd59 	bl	8002a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <HAL_PCD_MspInit+0x10c>)
 8000fc6:	f001 fd49 	bl	8002a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_PCD_MspInit+0x108>)
 8000fcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd0:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_PCD_MspInit+0x108>)
 8000fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_PCD_MspInit+0x108>)
 8000fdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fe8:	bf00      	nop
 8000fea:	37e0      	adds	r7, #224	; 0xe0
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40080000 	.word	0x40080000
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	58020000 	.word	0x58020000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 f89e 	bl	8001188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001088 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001054:	f7ff fabc 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800105a:	490d      	ldr	r1, [pc, #52]	; (8001090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001070:	4c0a      	ldr	r4, [pc, #40]	; (800109c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107e:	f006 fd19 	bl	8007ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001082:	f7ff fb3f 	bl	8000704 <main>
  bx  lr
 8001086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001088:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800108c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001090:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001094:	08007b6c 	.word	0x08007b6c
  ldr r2, =_sbss
 8001098:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800109c:	2400052c 	.word	0x2400052c

080010a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC3_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010aa:	2003      	movs	r0, #3
 80010ac:	f001 fca4 	bl	80029f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010b0:	f002 fe30 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_Init+0x68>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	f003 030f 	and.w	r3, r3, #15
 80010c0:	4913      	ldr	r1, [pc, #76]	; (8001110 <HAL_Init+0x6c>)
 80010c2:	5ccb      	ldrb	r3, [r1, r3]
 80010c4:	f003 031f 	and.w	r3, r3, #31
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
 80010cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_Init+0x68>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <HAL_Init+0x6c>)
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	f003 031f 	and.w	r3, r3, #31
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_Init+0x70>)
 80010e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_Init+0x74>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 f814 	bl	800111c <HAL_InitTick>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e002      	b.n	8001104 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010fe:	f7ff fe05 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	58024400 	.word	0x58024400
 8001110:	08007b24 	.word	0x08007b24
 8001114:	24000004 	.word	0x24000004
 8001118:	24000000 	.word	0x24000000

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_InitTick+0x60>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e021      	b.n	8001174 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_InitTick+0x64>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_InitTick+0x60>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fc7b 	bl	8002a42 <HAL_SYSTICK_Config>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00e      	b.n	8001174 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d80a      	bhi.n	8001172 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115c:	2200      	movs	r2, #0
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f001 fc53 	bl	8002a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_InitTick+0x68>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2400000c 	.word	0x2400000c
 8001180:	24000000 	.word	0x24000000
 8001184:	24000008 	.word	0x24000008

08001188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	2400000c 	.word	0x2400000c
 80011ac:	24000528 	.word	0x24000528

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	24000528 	.word	0x24000528

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffde 	bl	80011b0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2400000c 	.word	0x2400000c

08001210 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_GetREVID+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	0c1b      	lsrs	r3, r3, #16
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	5c001000 	.word	0x5c001000

08001228 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	609a      	str	r2, [r3, #8]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	609a      	str	r2, [r3, #8]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3360      	adds	r3, #96	; 0x60
 80012a2:	461a      	mov	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	430b      	orrs	r3, r1
 80012be:	431a      	orrs	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80012c4:	bf00      	nop
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	431a      	orrs	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	611a      	str	r2, [r3, #16]
}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001302:	b480      	push	{r7}
 8001304:	b087      	sub	sp, #28
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3360      	adds	r3, #96	; 0x60
 8001312:	461a      	mov	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	431a      	orrs	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	601a      	str	r2, [r3, #0]
  }
}
 800132c:	bf00      	nop
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800135e:	b480      	push	{r7}
 8001360:	b087      	sub	sp, #28
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3330      	adds	r3, #48	; 0x30
 800136e:	461a      	mov	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	4413      	add	r3, r2
 800137c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	211f      	movs	r1, #31
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	401a      	ands	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	0e9b      	lsrs	r3, r3, #26
 8001396:	f003 011f 	and.w	r1, r3, #31
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	431a      	orrs	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013aa:	bf00      	nop
 80013ac:	371c      	adds	r7, #28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b087      	sub	sp, #28
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3314      	adds	r3, #20
 80013c6:	461a      	mov	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	0e5b      	lsrs	r3, r3, #25
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	4413      	add	r3, r2
 80013d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	0d1b      	lsrs	r3, r3, #20
 80013de:	f003 031f 	and.w	r3, r3, #31
 80013e2:	2107      	movs	r1, #7
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	401a      	ands	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	0d1b      	lsrs	r3, r3, #20
 80013f0:	f003 031f 	and.w	r3, r3, #31
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	431a      	orrs	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001424:	43db      	mvns	r3, r3
 8001426:	401a      	ands	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0318 	and.w	r3, r3, #24
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001430:	40d9      	lsrs	r1, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	400b      	ands	r3, r1
 8001436:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800143a:	431a      	orrs	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	000fffff 	.word	0x000fffff

08001454 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 031f 	and.w	r3, r3, #31
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <LL_ADC_DisableDeepPowerDown+0x20>)
 800149a:	4013      	ands	r3, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6093      	str	r3, [r2, #8]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	5fffffc0 	.word	0x5fffffc0

080014b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014c4:	d101      	bne.n	80014ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <LL_ADC_EnableInternalRegulator+0x24>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	6fffffc0 	.word	0x6fffffc0

08001500 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001514:	d101      	bne.n	800151a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <LL_ADC_Enable+0x24>)
 8001536:	4013      	ands	r3, r2
 8001538:	f043 0201 	orr.w	r2, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	7fffffc0 	.word	0x7fffffc0

08001550 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <LL_ADC_IsEnabled+0x18>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <LL_ADC_IsEnabled+0x1a>
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <LL_ADC_REG_StartConversion+0x24>)
 8001586:	4013      	ands	r3, r2
 8001588:	f043 0204 	orr.w	r2, r3, #4
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	7fffffc0 	.word	0x7fffffc0

080015a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d101      	bne.n	80015b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d101      	bne.n	80015de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e18e      	b.n	8001924 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001610:	2b00      	cmp	r3, #0
 8001612:	d109      	bne.n	8001628 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff fb93 	bl	8000d40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff3f 	bl	80014b0 <LL_ADC_IsDeepPowerDownEnabled>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff25 	bl	800148c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff5a 	bl	8001500 <LL_ADC_IsInternalRegulatorEnabled>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d114      	bne.n	800167c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff3e 	bl	80014d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800165c:	4b9a      	ldr	r3, [pc, #616]	; (80018c8 <HAL_ADC_Init+0x2dc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	4a9a      	ldr	r2, [pc, #616]	; (80018cc <HAL_ADC_Init+0x2e0>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	3301      	adds	r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800166e:	e002      	b.n	8001676 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	3b01      	subs	r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f9      	bne.n	8001670 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff3d 	bl	8001500 <LL_ADC_IsInternalRegulatorEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10d      	bne.n	80016a8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001690:	f043 0210 	orr.w	r2, r3, #16
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	f043 0201 	orr.w	r2, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff77 	bl	80015a0 <LL_ADC_REG_IsConversionOngoing>
 80016b2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 8128 	bne.w	8001912 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f040 8124 	bne.w	8001912 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ce:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016d2:	f043 0202 	orr.w	r2, r3, #2
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff36 	bl	8001550 <LL_ADC_IsEnabled>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d136      	bne.n	8001758 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a78      	ldr	r2, [pc, #480]	; (80018d0 <HAL_ADC_Init+0x2e4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d004      	beq.n	80016fe <HAL_ADC_Init+0x112>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a76      	ldr	r2, [pc, #472]	; (80018d4 <HAL_ADC_Init+0x2e8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10e      	bne.n	800171c <HAL_ADC_Init+0x130>
 80016fe:	4874      	ldr	r0, [pc, #464]	; (80018d0 <HAL_ADC_Init+0x2e4>)
 8001700:	f7ff ff26 	bl	8001550 <LL_ADC_IsEnabled>
 8001704:	4604      	mov	r4, r0
 8001706:	4873      	ldr	r0, [pc, #460]	; (80018d4 <HAL_ADC_Init+0x2e8>)
 8001708:	f7ff ff22 	bl	8001550 <LL_ADC_IsEnabled>
 800170c:	4603      	mov	r3, r0
 800170e:	4323      	orrs	r3, r4
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf0c      	ite	eq
 8001714:	2301      	moveq	r3, #1
 8001716:	2300      	movne	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	e008      	b.n	800172e <HAL_ADC_Init+0x142>
 800171c:	486e      	ldr	r0, [pc, #440]	; (80018d8 <HAL_ADC_Init+0x2ec>)
 800171e:	f7ff ff17 	bl	8001550 <LL_ADC_IsEnabled>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf0c      	ite	eq
 8001728:	2301      	moveq	r3, #1
 800172a:	2300      	movne	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d012      	beq.n	8001758 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a66      	ldr	r2, [pc, #408]	; (80018d0 <HAL_ADC_Init+0x2e4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d004      	beq.n	8001746 <HAL_ADC_Init+0x15a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a64      	ldr	r2, [pc, #400]	; (80018d4 <HAL_ADC_Init+0x2e8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_ADC_Init+0x15e>
 8001746:	4a65      	ldr	r2, [pc, #404]	; (80018dc <HAL_ADC_Init+0x2f0>)
 8001748:	e000      	b.n	800174c <HAL_ADC_Init+0x160>
 800174a:	4a65      	ldr	r2, [pc, #404]	; (80018e0 <HAL_ADC_Init+0x2f4>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4619      	mov	r1, r3
 8001752:	4610      	mov	r0, r2
 8001754:	f7ff fd68 	bl	8001228 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001758:	f7ff fd5a 	bl	8001210 <HAL_GetREVID>
 800175c:	4603      	mov	r3, r0
 800175e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001762:	4293      	cmp	r3, r2
 8001764:	d914      	bls.n	8001790 <HAL_ADC_Init+0x1a4>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b10      	cmp	r3, #16
 800176c:	d110      	bne.n	8001790 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7d5b      	ldrb	r3, [r3, #21]
 8001772:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001778:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800177e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7f1b      	ldrb	r3, [r3, #28]
 8001784:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001786:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001788:	f043 030c 	orr.w	r3, r3, #12
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	e00d      	b.n	80017ac <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7d5b      	ldrb	r3, [r3, #21]
 8001794:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800179a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80017a0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7f1b      	ldrb	r3, [r3, #28]
 80017a6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7f1b      	ldrb	r3, [r3, #28]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d106      	bne.n	80017c2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	045b      	lsls	r3, r3, #17
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_ADC_Init+0x2f8>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	69b9      	ldr	r1, [r7, #24]
 80017ee:	430b      	orrs	r3, r1
 80017f0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fed2 	bl	80015a0 <LL_ADC_REG_IsConversionOngoing>
 80017fc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fedf 	bl	80015c6 <LL_ADC_INJ_IsConversionOngoing>
 8001808:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d14a      	bne.n	80018a6 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d147      	bne.n	80018a6 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7d1b      	ldrb	r3, [r3, #20]
 800181a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_ADC_Init+0x2fc>)
 800182c:	4013      	ands	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	69b9      	ldr	r1, [r7, #24]
 8001834:	430b      	orrs	r3, r1
 8001836:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800183e:	2b01      	cmp	r3, #1
 8001840:	d11b      	bne.n	800187a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_ADC_Init+0x300>)
 8001850:	4013      	ands	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001856:	3a01      	subs	r2, #1
 8001858:	0411      	lsls	r1, r2, #16
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800185e:	4311      	orrs	r1, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001864:	4311      	orrs	r1, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800186a:	430a      	orrs	r2, r1
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 0201 	orr.w	r2, r2, #1
 8001876:	611a      	str	r2, [r3, #16]
 8001878:	e007      	b.n	800188a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0201 	bic.w	r2, r2, #1
 8001888:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 fde9 	bl	8002478 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d120      	bne.n	80018f0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	f023 010f 	bic.w	r1, r3, #15
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	1e5a      	subs	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	631a      	str	r2, [r3, #48]	; 0x30
 80018c6:	e01b      	b.n	8001900 <HAL_ADC_Init+0x314>
 80018c8:	24000000 	.word	0x24000000
 80018cc:	053e2d63 	.word	0x053e2d63
 80018d0:	40022000 	.word	0x40022000
 80018d4:	40022100 	.word	0x40022100
 80018d8:	58026000 	.word	0x58026000
 80018dc:	40022300 	.word	0x40022300
 80018e0:	58026300 	.word	0x58026300
 80018e4:	fff0c003 	.word	0xfff0c003
 80018e8:	ffffbffc 	.word	0xffffbffc
 80018ec:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 020f 	bic.w	r2, r2, #15
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001904:	f023 0303 	bic.w	r3, r3, #3
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	655a      	str	r2, [r3, #84]	; 0x54
 8001910:	e007      	b.n	8001922 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001916:	f043 0210 	orr.w	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001922:	7ffb      	ldrb	r3, [r7, #31]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3724      	adds	r7, #36	; 0x24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}

0800192c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a5c      	ldr	r2, [pc, #368]	; (8001aac <HAL_ADC_Start+0x180>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d004      	beq.n	8001948 <HAL_ADC_Start+0x1c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5b      	ldr	r2, [pc, #364]	; (8001ab0 <HAL_ADC_Start+0x184>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d101      	bne.n	800194c <HAL_ADC_Start+0x20>
 8001948:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <HAL_ADC_Start+0x188>)
 800194a:	e000      	b.n	800194e <HAL_ADC_Start+0x22>
 800194c:	4b5a      	ldr	r3, [pc, #360]	; (8001ab8 <HAL_ADC_Start+0x18c>)
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fd80 	bl	8001454 <LL_ADC_GetMultimode>
 8001954:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fe20 	bl	80015a0 <LL_ADC_REG_IsConversionOngoing>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 809a 	bne.w	8001a9c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_ADC_Start+0x4a>
 8001972:	2302      	movs	r3, #2
 8001974:	e095      	b.n	8001aa2 <HAL_ADC_Start+0x176>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fcf0 	bl	8002364 <ADC_Enable>
 8001984:	4603      	mov	r3, r0
 8001986:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 8081 	bne.w	8001a92 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <HAL_ADC_Start+0x190>)
 8001996:	4013      	ands	r3, r2
 8001998:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a42      	ldr	r2, [pc, #264]	; (8001ab0 <HAL_ADC_Start+0x184>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d002      	beq.n	80019b0 <HAL_ADC_Start+0x84>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	e000      	b.n	80019b2 <HAL_ADC_Start+0x86>
 80019b0:	4b3e      	ldr	r3, [pc, #248]	; (8001aac <HAL_ADC_Start+0x180>)
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d002      	beq.n	80019c0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d8:	d106      	bne.n	80019e8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	f023 0206 	bic.w	r2, r3, #6
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	659a      	str	r2, [r3, #88]	; 0x58
 80019e6:	e002      	b.n	80019ee <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	221c      	movs	r2, #28
 80019f4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a2b      	ldr	r2, [pc, #172]	; (8001ab0 <HAL_ADC_Start+0x184>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d002      	beq.n	8001a0e <HAL_ADC_Start+0xe2>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	e000      	b.n	8001a10 <HAL_ADC_Start+0xe4>
 8001a0e:	4b27      	ldr	r3, [pc, #156]	; (8001aac <HAL_ADC_Start+0x180>)
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d008      	beq.n	8001a2a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d002      	beq.n	8001a2a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	2b09      	cmp	r3, #9
 8001a28:	d114      	bne.n	8001a54 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fd93 	bl	8001578 <LL_ADC_REG_StartConversion>
 8001a52:	e025      	b.n	8001aa0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <HAL_ADC_Start+0x184>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d002      	beq.n	8001a70 <HAL_ADC_Start+0x144>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	e000      	b.n	8001a72 <HAL_ADC_Start+0x146>
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_ADC_Start+0x180>)
 8001a72:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00f      	beq.n	8001aa0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	655a      	str	r2, [r3, #84]	; 0x54
 8001a90:	e006      	b.n	8001aa0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a9a:	e001      	b.n	8001aa0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40022100 	.word	0x40022100
 8001ab4:	40022300 	.word	0x40022300
 8001ab8:	58026300 	.word	0x58026300
 8001abc:	fffff0fe 	.word	0xfffff0fe

08001ac0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a72      	ldr	r2, [pc, #456]	; (8001c98 <HAL_ADC_PollForConversion+0x1d8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d004      	beq.n	8001ade <HAL_ADC_PollForConversion+0x1e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a70      	ldr	r2, [pc, #448]	; (8001c9c <HAL_ADC_PollForConversion+0x1dc>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0x22>
 8001ade:	4b70      	ldr	r3, [pc, #448]	; (8001ca0 <HAL_ADC_PollForConversion+0x1e0>)
 8001ae0:	e000      	b.n	8001ae4 <HAL_ADC_PollForConversion+0x24>
 8001ae2:	4b70      	ldr	r3, [pc, #448]	; (8001ca4 <HAL_ADC_PollForConversion+0x1e4>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fcb5 	bl	8001454 <LL_ADC_GetMultimode>
 8001aea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d102      	bne.n	8001afa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001af4:	2308      	movs	r3, #8
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	e037      	b.n	8001b6a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d002      	beq.n	8001b0c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	d111      	bne.n	8001b30 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	f043 0220 	orr.w	r2, r3, #32
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0b1      	b.n	8001c8e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001b2e:	e01c      	b.n	8001b6a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a58      	ldr	r2, [pc, #352]	; (8001c98 <HAL_ADC_PollForConversion+0x1d8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d004      	beq.n	8001b44 <HAL_ADC_PollForConversion+0x84>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a57      	ldr	r2, [pc, #348]	; (8001c9c <HAL_ADC_PollForConversion+0x1dc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_PollForConversion+0x88>
 8001b44:	4b56      	ldr	r3, [pc, #344]	; (8001ca0 <HAL_ADC_PollForConversion+0x1e0>)
 8001b46:	e000      	b.n	8001b4a <HAL_ADC_PollForConversion+0x8a>
 8001b48:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_ADC_PollForConversion+0x1e4>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fc90 	bl	8001470 <LL_ADC_GetMultiDMATransfer>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	f043 0220 	orr.w	r2, r3, #32
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e093      	b.n	8001c8e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b66:	2304      	movs	r3, #4
 8001b68:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b6a:	f7ff fb21 	bl	80011b0 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b70:	e021      	b.n	8001bb6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d01d      	beq.n	8001bb6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b7a:	f7ff fb19 	bl	80011b0 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d302      	bcc.n	8001b90 <HAL_ADC_PollForConversion+0xd0>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d112      	bne.n	8001bb6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f043 0204 	orr.w	r2, r3, #4
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e06b      	b.n	8001c8e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0d6      	beq.n	8001b72 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fbaf 	bl	8001338 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01c      	beq.n	8001c1a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7d5b      	ldrb	r3, [r3, #21]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d118      	bne.n	8001c1a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d111      	bne.n	8001c1a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <HAL_ADC_PollForConversion+0x1dc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d002      	beq.n	8001c2a <HAL_ADC_PollForConversion+0x16a>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	e000      	b.n	8001c2c <HAL_ADC_PollForConversion+0x16c>
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_ADC_PollForConversion+0x1d8>)
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d008      	beq.n	8001c46 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d002      	beq.n	8001c46 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b09      	cmp	r3, #9
 8001c44:	d104      	bne.n	8001c50 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	e00c      	b.n	8001c6a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <HAL_ADC_PollForConversion+0x1dc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d002      	beq.n	8001c60 <HAL_ADC_PollForConversion+0x1a0>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	e000      	b.n	8001c62 <HAL_ADC_PollForConversion+0x1a2>
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_ADC_PollForConversion+0x1d8>)
 8001c62:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d104      	bne.n	8001c7a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2208      	movs	r2, #8
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e008      	b.n	8001c8c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d103      	bne.n	8001c8c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	220c      	movs	r2, #12
 8001c8a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	40022100 	.word	0x40022100
 8001ca0:	40022300 	.word	0x40022300
 8001ca4:	58026300 	.word	0x58026300

08001ca8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b0a1      	sub	sp, #132	; 0x84
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a9d      	ldr	r2, [pc, #628]	; (8001f54 <HAL_ADC_ConfigChannel+0x290>)
 8001cde:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x2a>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e321      	b.n	8002332 <HAL_ADC_ConfigChannel+0x66e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fc50 	bl	80015a0 <LL_ADC_REG_IsConversionOngoing>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 8306 	bne.w	8002314 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d108      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x62>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	2201      	movs	r2, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	e016      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x90>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d36:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	e003      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	2201      	movs	r2, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	69d1      	ldr	r1, [r2, #28]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	430b      	orrs	r3, r1
 8001d60:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6859      	ldr	r1, [r3, #4]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f7ff faf5 	bl	800135e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fc11 	bl	80015a0 <LL_ADC_REG_IsConversionOngoing>
 8001d7e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fc1e 	bl	80015c6 <LL_ADC_INJ_IsConversionOngoing>
 8001d8a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f040 80b3 	bne.w	8001efa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 80af 	bne.w	8001efa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	461a      	mov	r2, r3
 8001daa:	f7ff fb04 	bl	80013b6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001dae:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_ADC_ConfigChannel+0x294>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001db6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dba:	d10b      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x110>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	e01d      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x14c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10b      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x136>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	e00a      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x14c>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d027      	beq.n	8001e6a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6919      	ldr	r1, [r3, #16]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e28:	f7ff fa32 	bl	8001290 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6919      	ldr	r1, [r3, #16]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	7e5b      	ldrb	r3, [r3, #25]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d102      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x17e>
 8001e3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e40:	e000      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x180>
 8001e42:	2300      	movs	r3, #0
 8001e44:	461a      	mov	r2, r3
 8001e46:	f7ff fa5c 	bl	8001302 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6919      	ldr	r1, [r3, #16]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	7e1b      	ldrb	r3, [r3, #24]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d102      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x19c>
 8001e5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e5e:	e000      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x19e>
 8001e60:	2300      	movs	r3, #0
 8001e62:	461a      	mov	r2, r3
 8001e64:	f7ff fa34 	bl	80012d0 <LL_ADC_SetDataRightShift>
 8001e68:	e047      	b.n	8001efa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	069b      	lsls	r3, r3, #26
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d107      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e8c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	069b      	lsls	r3, r3, #26
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d107      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eb0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	069b      	lsls	r3, r3, #26
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d107      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ed4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001edc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	069b      	lsls	r3, r3, #26
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d107      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ef8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fb26 	bl	8001550 <LL_ADC_IsEnabled>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 820d 	bne.w	8002326 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f7ff fa77 	bl	800140c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <HAL_ADC_ConfigChannel+0x290>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	f040 8133 	bne.w	8002190 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d110      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x298>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0e9b      	lsrs	r3, r3, #26
 8001f40:	3301      	adds	r3, #1
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2b09      	cmp	r3, #9
 8001f48:	bf94      	ite	ls
 8001f4a:	2301      	movls	r3, #1
 8001f4c:	2300      	movhi	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	e01e      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x2cc>
 8001f52:	bf00      	nop
 8001f54:	47ff0000 	.word	0x47ff0000
 8001f58:	5c001000 	.word	0x5c001000
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001f74:	2320      	movs	r3, #32
 8001f76:	e003      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	2b09      	cmp	r3, #9
 8001f88:	bf94      	ite	ls
 8001f8a:	2301      	movls	r3, #1
 8001f8c:	2300      	movhi	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d079      	beq.n	8002088 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d107      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x2ec>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0e9b      	lsrs	r3, r3, #26
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	069b      	lsls	r3, r3, #26
 8001faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fae:	e015      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x318>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	e003      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	069b      	lsls	r3, r3, #26
 8001fd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x338>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	e017      	b.n	800202c <HAL_ADC_ConfigChannel+0x368>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800200a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800200c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800200e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e003      	b.n	8002020 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	3301      	adds	r3, #1
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	ea42 0103 	orr.w	r1, r2, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10a      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x38e>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	3301      	adds	r3, #1
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	051b      	lsls	r3, r3, #20
 8002050:	e018      	b.n	8002084 <HAL_ADC_ConfigChannel+0x3c0>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800206a:	2320      	movs	r3, #32
 800206c:	e003      	b.n	8002076 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	3301      	adds	r3, #1
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002084:	430b      	orrs	r3, r1
 8002086:	e07e      	b.n	8002186 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002090:	2b00      	cmp	r3, #0
 8002092:	d107      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x3e0>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0e9b      	lsrs	r3, r3, #26
 800209a:	3301      	adds	r3, #1
 800209c:	069b      	lsls	r3, r3, #26
 800209e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a2:	e015      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x40c>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e003      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80020c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	069b      	lsls	r3, r3, #26
 80020cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d109      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x42c>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	0e9b      	lsrs	r3, r3, #26
 80020e2:	3301      	adds	r3, #1
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	e017      	b.n	8002120 <HAL_ADC_ConfigChannel+0x45c>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	61bb      	str	r3, [r7, #24]
  return result;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e003      	b.n	8002114 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	3301      	adds	r3, #1
 8002116:	f003 031f 	and.w	r3, r3, #31
 800211a:	2101      	movs	r1, #1
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	ea42 0103 	orr.w	r1, r2, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10d      	bne.n	800214c <HAL_ADC_ConfigChannel+0x488>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	0e9b      	lsrs	r3, r3, #26
 8002136:	3301      	adds	r3, #1
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	3b1e      	subs	r3, #30
 8002144:	051b      	lsls	r3, r3, #20
 8002146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800214a:	e01b      	b.n	8002184 <HAL_ADC_ConfigChannel+0x4c0>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	60fb      	str	r3, [r7, #12]
  return result;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e003      	b.n	8002170 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3301      	adds	r3, #1
 8002172:	f003 021f 	and.w	r2, r3, #31
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	3b1e      	subs	r3, #30
 800217e:	051b      	lsls	r3, r3, #20
 8002180:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002184:	430b      	orrs	r3, r1
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	6892      	ldr	r2, [r2, #8]
 800218a:	4619      	mov	r1, r3
 800218c:	f7ff f913 	bl	80013b6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	f280 80c6 	bge.w	8002326 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a67      	ldr	r2, [pc, #412]	; (800233c <HAL_ADC_ConfigChannel+0x678>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d004      	beq.n	80021ae <HAL_ADC_ConfigChannel+0x4ea>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a65      	ldr	r2, [pc, #404]	; (8002340 <HAL_ADC_ConfigChannel+0x67c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x4ee>
 80021ae:	4b65      	ldr	r3, [pc, #404]	; (8002344 <HAL_ADC_ConfigChannel+0x680>)
 80021b0:	e000      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x4f0>
 80021b2:	4b65      	ldr	r3, [pc, #404]	; (8002348 <HAL_ADC_ConfigChannel+0x684>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff f85d 	bl	8001274 <LL_ADC_GetCommonPathInternalCh>
 80021ba:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a5e      	ldr	r2, [pc, #376]	; (800233c <HAL_ADC_ConfigChannel+0x678>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d004      	beq.n	80021d0 <HAL_ADC_ConfigChannel+0x50c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a5d      	ldr	r2, [pc, #372]	; (8002340 <HAL_ADC_ConfigChannel+0x67c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d10e      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x52a>
 80021d0:	485a      	ldr	r0, [pc, #360]	; (800233c <HAL_ADC_ConfigChannel+0x678>)
 80021d2:	f7ff f9bd 	bl	8001550 <LL_ADC_IsEnabled>
 80021d6:	4604      	mov	r4, r0
 80021d8:	4859      	ldr	r0, [pc, #356]	; (8002340 <HAL_ADC_ConfigChannel+0x67c>)
 80021da:	f7ff f9b9 	bl	8001550 <LL_ADC_IsEnabled>
 80021de:	4603      	mov	r3, r0
 80021e0:	4323      	orrs	r3, r4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	e008      	b.n	8002200 <HAL_ADC_ConfigChannel+0x53c>
 80021ee:	4857      	ldr	r0, [pc, #348]	; (800234c <HAL_ADC_ConfigChannel+0x688>)
 80021f0:	f7ff f9ae 	bl	8001550 <LL_ADC_IsEnabled>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d07d      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a51      	ldr	r2, [pc, #324]	; (8002350 <HAL_ADC_ConfigChannel+0x68c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d130      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x5ac>
 800220e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002210:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d12b      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a4b      	ldr	r2, [pc, #300]	; (800234c <HAL_ADC_ConfigChannel+0x688>)
 800221e:	4293      	cmp	r3, r2
 8002220:	f040 8081 	bne.w	8002326 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a44      	ldr	r2, [pc, #272]	; (800233c <HAL_ADC_ConfigChannel+0x678>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x574>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a43      	ldr	r2, [pc, #268]	; (8002340 <HAL_ADC_ConfigChannel+0x67c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x578>
 8002238:	4a42      	ldr	r2, [pc, #264]	; (8002344 <HAL_ADC_ConfigChannel+0x680>)
 800223a:	e000      	b.n	800223e <HAL_ADC_ConfigChannel+0x57a>
 800223c:	4a42      	ldr	r2, [pc, #264]	; (8002348 <HAL_ADC_ConfigChannel+0x684>)
 800223e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f7ff f801 	bl	800124e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800224c:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_ADC_ConfigChannel+0x690>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	4a41      	ldr	r2, [pc, #260]	; (8002358 <HAL_ADC_ConfigChannel+0x694>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	3301      	adds	r3, #1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002260:	e002      	b.n	8002268 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3b01      	subs	r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f9      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800226e:	e05a      	b.n	8002326 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a39      	ldr	r2, [pc, #228]	; (800235c <HAL_ADC_ConfigChannel+0x698>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d11e      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x5f4>
 800227a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d119      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a30      	ldr	r2, [pc, #192]	; (800234c <HAL_ADC_ConfigChannel+0x688>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d14b      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2a      	ldr	r2, [pc, #168]	; (800233c <HAL_ADC_ConfigChannel+0x678>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d004      	beq.n	80022a2 <HAL_ADC_ConfigChannel+0x5de>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a28      	ldr	r2, [pc, #160]	; (8002340 <HAL_ADC_ConfigChannel+0x67c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x5e2>
 80022a2:	4a28      	ldr	r2, [pc, #160]	; (8002344 <HAL_ADC_ConfigChannel+0x680>)
 80022a4:	e000      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x5e4>
 80022a6:	4a28      	ldr	r2, [pc, #160]	; (8002348 <HAL_ADC_ConfigChannel+0x684>)
 80022a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ae:	4619      	mov	r1, r3
 80022b0:	4610      	mov	r0, r2
 80022b2:	f7fe ffcc 	bl	800124e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022b6:	e036      	b.n	8002326 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a28      	ldr	r2, [pc, #160]	; (8002360 <HAL_ADC_ConfigChannel+0x69c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d131      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x662>
 80022c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d12c      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1e      	ldr	r2, [pc, #120]	; (800234c <HAL_ADC_ConfigChannel+0x688>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d127      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a18      	ldr	r2, [pc, #96]	; (800233c <HAL_ADC_ConfigChannel+0x678>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d004      	beq.n	80022ea <HAL_ADC_ConfigChannel+0x626>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a16      	ldr	r2, [pc, #88]	; (8002340 <HAL_ADC_ConfigChannel+0x67c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x62a>
 80022ea:	4a16      	ldr	r2, [pc, #88]	; (8002344 <HAL_ADC_ConfigChannel+0x680>)
 80022ec:	e000      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x62c>
 80022ee:	4a16      	ldr	r2, [pc, #88]	; (8002348 <HAL_ADC_ConfigChannel+0x684>)
 80022f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f6:	4619      	mov	r1, r3
 80022f8:	4610      	mov	r0, r2
 80022fa:	f7fe ffa8 	bl	800124e <LL_ADC_SetCommonPathInternalCh>
 80022fe:	e012      	b.n	8002326 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002312:	e008      	b.n	8002326 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	f043 0220 	orr.w	r2, r3, #32
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800232e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002332:	4618      	mov	r0, r3
 8002334:	3784      	adds	r7, #132	; 0x84
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}
 800233a:	bf00      	nop
 800233c:	40022000 	.word	0x40022000
 8002340:	40022100 	.word	0x40022100
 8002344:	40022300 	.word	0x40022300
 8002348:	58026300 	.word	0x58026300
 800234c:	58026000 	.word	0x58026000
 8002350:	cb840000 	.word	0xcb840000
 8002354:	24000000 	.word	0x24000000
 8002358:	053e2d63 	.word	0x053e2d63
 800235c:	c7520000 	.word	0xc7520000
 8002360:	cfb80000 	.word	0xcfb80000

08002364 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff f8ed 	bl	8001550 <LL_ADC_IsEnabled>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d16e      	bne.n	800245a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	4b38      	ldr	r3, [pc, #224]	; (8002464 <ADC_Enable+0x100>)
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00d      	beq.n	80023a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	f043 0210 	orr.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e05a      	b.n	800245c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f8bc 	bl	8001528 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023b0:	f7fe fefe 	bl	80011b0 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2b      	ldr	r2, [pc, #172]	; (8002468 <ADC_Enable+0x104>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d004      	beq.n	80023ca <ADC_Enable+0x66>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a29      	ldr	r2, [pc, #164]	; (800246c <ADC_Enable+0x108>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <ADC_Enable+0x6a>
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <ADC_Enable+0x10c>)
 80023cc:	e000      	b.n	80023d0 <ADC_Enable+0x6c>
 80023ce:	4b29      	ldr	r3, [pc, #164]	; (8002474 <ADC_Enable+0x110>)
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff f83f 	bl	8001454 <LL_ADC_GetMultimode>
 80023d6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a23      	ldr	r2, [pc, #140]	; (800246c <ADC_Enable+0x108>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d002      	beq.n	80023e8 <ADC_Enable+0x84>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	e000      	b.n	80023ea <ADC_Enable+0x86>
 80023e8:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <ADC_Enable+0x104>)
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d02c      	beq.n	800244c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d130      	bne.n	800245a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023f8:	e028      	b.n	800244c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff f8a6 	bl	8001550 <LL_ADC_IsEnabled>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff f88a 	bl	8001528 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002414:	f7fe fecc 	bl	80011b0 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d914      	bls.n	800244c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	d00d      	beq.n	800244c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f043 0210 	orr.w	r2, r3, #16
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	f043 0201 	orr.w	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e007      	b.n	800245c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b01      	cmp	r3, #1
 8002458:	d1cf      	bne.n	80023fa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	8000003f 	.word	0x8000003f
 8002468:	40022000 	.word	0x40022000
 800246c:	40022100 	.word	0x40022100
 8002470:	40022300 	.word	0x40022300
 8002474:	58026300 	.word	0x58026300

08002478 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a79      	ldr	r2, [pc, #484]	; (800266c <ADC_ConfigureBoostMode+0x1f4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d004      	beq.n	8002494 <ADC_ConfigureBoostMode+0x1c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a78      	ldr	r2, [pc, #480]	; (8002670 <ADC_ConfigureBoostMode+0x1f8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d109      	bne.n	80024a8 <ADC_ConfigureBoostMode+0x30>
 8002494:	4b77      	ldr	r3, [pc, #476]	; (8002674 <ADC_ConfigureBoostMode+0x1fc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf14      	ite	ne
 80024a0:	2301      	movne	r3, #1
 80024a2:	2300      	moveq	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	e008      	b.n	80024ba <ADC_ConfigureBoostMode+0x42>
 80024a8:	4b73      	ldr	r3, [pc, #460]	; (8002678 <ADC_ConfigureBoostMode+0x200>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf14      	ite	ne
 80024b4:	2301      	movne	r3, #1
 80024b6:	2300      	moveq	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01c      	beq.n	80024f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80024be:	f001 fda3 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 80024c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024cc:	d010      	beq.n	80024f0 <ADC_ConfigureBoostMode+0x78>
 80024ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024d2:	d871      	bhi.n	80025b8 <ADC_ConfigureBoostMode+0x140>
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d8:	d002      	beq.n	80024e0 <ADC_ConfigureBoostMode+0x68>
 80024da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024de:	d16b      	bne.n	80025b8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	0c1b      	lsrs	r3, r3, #16
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	60fb      	str	r3, [r7, #12]
        break;
 80024ee:	e066      	b.n	80025be <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	60fb      	str	r3, [r7, #12]
        break;
 80024f6:	e062      	b.n	80025be <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80024f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80024fc:	f002 fd20 	bl	8004f40 <HAL_RCCEx_GetPeriphCLKFreq>
 8002500:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800250a:	d051      	beq.n	80025b0 <ADC_ConfigureBoostMode+0x138>
 800250c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002510:	d854      	bhi.n	80025bc <ADC_ConfigureBoostMode+0x144>
 8002512:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002516:	d047      	beq.n	80025a8 <ADC_ConfigureBoostMode+0x130>
 8002518:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800251c:	d84e      	bhi.n	80025bc <ADC_ConfigureBoostMode+0x144>
 800251e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002522:	d03d      	beq.n	80025a0 <ADC_ConfigureBoostMode+0x128>
 8002524:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002528:	d848      	bhi.n	80025bc <ADC_ConfigureBoostMode+0x144>
 800252a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800252e:	d033      	beq.n	8002598 <ADC_ConfigureBoostMode+0x120>
 8002530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002534:	d842      	bhi.n	80025bc <ADC_ConfigureBoostMode+0x144>
 8002536:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800253a:	d029      	beq.n	8002590 <ADC_ConfigureBoostMode+0x118>
 800253c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002540:	d83c      	bhi.n	80025bc <ADC_ConfigureBoostMode+0x144>
 8002542:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002546:	d01a      	beq.n	800257e <ADC_ConfigureBoostMode+0x106>
 8002548:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800254c:	d836      	bhi.n	80025bc <ADC_ConfigureBoostMode+0x144>
 800254e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002552:	d014      	beq.n	800257e <ADC_ConfigureBoostMode+0x106>
 8002554:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002558:	d830      	bhi.n	80025bc <ADC_ConfigureBoostMode+0x144>
 800255a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800255e:	d00e      	beq.n	800257e <ADC_ConfigureBoostMode+0x106>
 8002560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002564:	d82a      	bhi.n	80025bc <ADC_ConfigureBoostMode+0x144>
 8002566:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800256a:	d008      	beq.n	800257e <ADC_ConfigureBoostMode+0x106>
 800256c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002570:	d824      	bhi.n	80025bc <ADC_ConfigureBoostMode+0x144>
 8002572:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002576:	d002      	beq.n	800257e <ADC_ConfigureBoostMode+0x106>
 8002578:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800257c:	d11e      	bne.n	80025bc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	0c9b      	lsrs	r3, r3, #18
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	60fb      	str	r3, [r7, #12]
        break;
 800258e:	e016      	b.n	80025be <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	60fb      	str	r3, [r7, #12]
        break;
 8002596:	e012      	b.n	80025be <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	60fb      	str	r3, [r7, #12]
        break;
 800259e:	e00e      	b.n	80025be <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	099b      	lsrs	r3, r3, #6
 80025a4:	60fb      	str	r3, [r7, #12]
        break;
 80025a6:	e00a      	b.n	80025be <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	09db      	lsrs	r3, r3, #7
 80025ac:	60fb      	str	r3, [r7, #12]
        break;
 80025ae:	e006      	b.n	80025be <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	60fb      	str	r3, [r7, #12]
        break;
 80025b6:	e002      	b.n	80025be <ADC_ConfigureBoostMode+0x146>
        break;
 80025b8:	bf00      	nop
 80025ba:	e000      	b.n	80025be <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80025bc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80025be:	f7fe fe27 	bl	8001210 <HAL_GetREVID>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d815      	bhi.n	80025f8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a2b      	ldr	r2, [pc, #172]	; (800267c <ADC_ConfigureBoostMode+0x204>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d908      	bls.n	80025e6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80025e4:	e03e      	b.n	8002664 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025f4:	609a      	str	r2, [r3, #8]
}
 80025f6:	e035      	b.n	8002664 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4a1f      	ldr	r2, [pc, #124]	; (8002680 <ADC_ConfigureBoostMode+0x208>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d808      	bhi.n	8002618 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002614:	609a      	str	r2, [r3, #8]
}
 8002616:	e025      	b.n	8002664 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4a1a      	ldr	r2, [pc, #104]	; (8002684 <ADC_ConfigureBoostMode+0x20c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d80a      	bhi.n	8002636 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002632:	609a      	str	r2, [r3, #8]
}
 8002634:	e016      	b.n	8002664 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4a13      	ldr	r2, [pc, #76]	; (8002688 <ADC_ConfigureBoostMode+0x210>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d80a      	bhi.n	8002654 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002650:	609a      	str	r2, [r3, #8]
}
 8002652:	e007      	b.n	8002664 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002662:	609a      	str	r2, [r3, #8]
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40022000 	.word	0x40022000
 8002670:	40022100 	.word	0x40022100
 8002674:	40022300 	.word	0x40022300
 8002678:	58026300 	.word	0x58026300
 800267c:	01312d00 	.word	0x01312d00
 8002680:	005f5e10 	.word	0x005f5e10
 8002684:	00bebc20 	.word	0x00bebc20
 8002688:	017d7840 	.word	0x017d7840

0800268c <LL_ADC_IsEnabled>:
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <LL_ADC_IsEnabled+0x18>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_ADC_IsEnabled+0x1a>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d101      	bne.n	80026ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b09f      	sub	sp, #124	; 0x7c
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e0be      	b.n	8002874 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002702:	2300      	movs	r3, #0
 8002704:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a5c      	ldr	r2, [pc, #368]	; (800287c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d102      	bne.n	8002716 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002710:	4b5b      	ldr	r3, [pc, #364]	; (8002880 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	e001      	b.n	800271a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10b      	bne.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e09d      	b.n	8002874 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ffb9 	bl	80026b2 <LL_ADC_REG_IsConversionOngoing>
 8002740:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ffb3 	bl	80026b2 <LL_ADC_REG_IsConversionOngoing>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d17f      	bne.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002754:	2b00      	cmp	r3, #0
 8002756:	d17c      	bne.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a47      	ldr	r2, [pc, #284]	; (800287c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d004      	beq.n	800276c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a46      	ldr	r2, [pc, #280]	; (8002880 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d101      	bne.n	8002770 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800276c:	4b45      	ldr	r3, [pc, #276]	; (8002884 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800276e:	e000      	b.n	8002772 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002770:	4b45      	ldr	r3, [pc, #276]	; (8002888 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002772:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d039      	beq.n	80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800277c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	431a      	orrs	r2, r3
 800278a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a3a      	ldr	r2, [pc, #232]	; (800287c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d004      	beq.n	80027a2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a38      	ldr	r2, [pc, #224]	; (8002880 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d10e      	bne.n	80027c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80027a2:	4836      	ldr	r0, [pc, #216]	; (800287c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80027a4:	f7ff ff72 	bl	800268c <LL_ADC_IsEnabled>
 80027a8:	4604      	mov	r4, r0
 80027aa:	4835      	ldr	r0, [pc, #212]	; (8002880 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80027ac:	f7ff ff6e 	bl	800268c <LL_ADC_IsEnabled>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4323      	orrs	r3, r4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e008      	b.n	80027d2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80027c0:	4832      	ldr	r0, [pc, #200]	; (800288c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80027c2:	f7ff ff63 	bl	800268c <LL_ADC_IsEnabled>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d047      	beq.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80027d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80027dc:	4013      	ands	r3, r2
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	6811      	ldr	r1, [r2, #0]
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	6892      	ldr	r2, [r2, #8]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ec:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027ee:	e03a      	b.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80027f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1e      	ldr	r2, [pc, #120]	; (800287c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d004      	beq.n	8002810 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1d      	ldr	r2, [pc, #116]	; (8002880 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d10e      	bne.n	800282e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002810:	481a      	ldr	r0, [pc, #104]	; (800287c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002812:	f7ff ff3b 	bl	800268c <LL_ADC_IsEnabled>
 8002816:	4604      	mov	r4, r0
 8002818:	4819      	ldr	r0, [pc, #100]	; (8002880 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800281a:	f7ff ff37 	bl	800268c <LL_ADC_IsEnabled>
 800281e:	4603      	mov	r3, r0
 8002820:	4323      	orrs	r3, r4
 8002822:	2b00      	cmp	r3, #0
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	e008      	b.n	8002840 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800282e:	4817      	ldr	r0, [pc, #92]	; (800288c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002830:	f7ff ff2c 	bl	800268c <LL_ADC_IsEnabled>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800284a:	4013      	ands	r3, r2
 800284c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800284e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002850:	e009      	b.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	f043 0220 	orr.w	r2, r3, #32
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002864:	e000      	b.n	8002868 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002866:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002870:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002874:	4618      	mov	r0, r3
 8002876:	377c      	adds	r7, #124	; 0x7c
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}
 800287c:	40022000 	.word	0x40022000
 8002880:	40022100 	.word	0x40022100
 8002884:	40022300 	.word	0x40022300
 8002888:	58026300 	.word	0x58026300
 800288c:	58026000 	.word	0x58026000
 8002890:	fffff0e0 	.word	0xfffff0e0

08002894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <__NVIC_SetPriorityGrouping+0x40>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x40>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00
 80028d8:	05fa0000 	.word	0x05fa0000

080028dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <__NVIC_GetPriorityGrouping+0x18>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	f003 0307 	and.w	r3, r3, #7
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002908:	2b00      	cmp	r3, #0
 800290a:	db0a      	blt.n	8002922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	b2da      	uxtb	r2, r3
 8002910:	490c      	ldr	r1, [pc, #48]	; (8002944 <__NVIC_SetPriority+0x4c>)
 8002912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	440b      	add	r3, r1
 800291c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002920:	e00a      	b.n	8002938 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4908      	ldr	r1, [pc, #32]	; (8002948 <__NVIC_SetPriority+0x50>)
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	3b04      	subs	r3, #4
 8002930:	0112      	lsls	r2, r2, #4
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	440b      	add	r3, r1
 8002936:	761a      	strb	r2, [r3, #24]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000e100 	.word	0xe000e100
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f1c3 0307 	rsb	r3, r3, #7
 8002966:	2b04      	cmp	r3, #4
 8002968:	bf28      	it	cs
 800296a:	2304      	movcs	r3, #4
 800296c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3304      	adds	r3, #4
 8002972:	2b06      	cmp	r3, #6
 8002974:	d902      	bls.n	800297c <NVIC_EncodePriority+0x30>
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3b03      	subs	r3, #3
 800297a:	e000      	b.n	800297e <NVIC_EncodePriority+0x32>
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	f04f 32ff 	mov.w	r2, #4294967295
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43da      	mvns	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	401a      	ands	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002994:	f04f 31ff 	mov.w	r1, #4294967295
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	43d9      	mvns	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	4313      	orrs	r3, r2
         );
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	; 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c4:	d301      	bcc.n	80029ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00f      	b.n	80029ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <SysTick_Config+0x40>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d2:	210f      	movs	r1, #15
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	f7ff ff8e 	bl	80028f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <SysTick_Config+0x40>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SysTick_Config+0x40>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff47 	bl	8002894 <__NVIC_SetPriorityGrouping>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a1c:	f7ff ff5e 	bl	80028dc <__NVIC_GetPriorityGrouping>
 8002a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	6978      	ldr	r0, [r7, #20]
 8002a28:	f7ff ff90 	bl	800294c <NVIC_EncodePriority>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff5f 	bl	80028f8 <__NVIC_SetPriority>
}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ffb2 	bl	80029b4 <SysTick_Config>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a6a:	4b89      	ldr	r3, [pc, #548]	; (8002c90 <HAL_GPIO_Init+0x234>)
 8002a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a6e:	e194      	b.n	8002d9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	2101      	movs	r1, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8186 	beq.w	8002d94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_GPIO_Init+0x4c>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d007      	beq.n	8002aa8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a9c:	2b11      	cmp	r3, #17
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b12      	cmp	r3, #18
 8002aa6:	d130      	bne.n	8002b0a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ade:	2201      	movs	r2, #1
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f003 0201 	and.w	r2, r3, #1
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0xee>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b12      	cmp	r3, #18
 8002b48:	d123      	bne.n	8002b92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	08da      	lsrs	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3208      	adds	r2, #8
 8002b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	220f      	movs	r2, #15
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	08da      	lsrs	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3208      	adds	r2, #8
 8002b8c:	69b9      	ldr	r1, [r7, #24]
 8002b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0203 	and.w	r2, r3, #3
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80e0 	beq.w	8002d94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd4:	4b2f      	ldr	r3, [pc, #188]	; (8002c94 <HAL_GPIO_Init+0x238>)
 8002bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bda:	4a2e      	ldr	r2, [pc, #184]	; (8002c94 <HAL_GPIO_Init+0x238>)
 8002bdc:	f043 0302 	orr.w	r3, r3, #2
 8002be0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002be4:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_GPIO_Init+0x238>)
 8002be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bf2:	4a29      	ldr	r2, [pc, #164]	; (8002c98 <HAL_GPIO_Init+0x23c>)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a20      	ldr	r2, [pc, #128]	; (8002c9c <HAL_GPIO_Init+0x240>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d052      	beq.n	8002cc4 <HAL_GPIO_Init+0x268>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <HAL_GPIO_Init+0x244>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d031      	beq.n	8002c8a <HAL_GPIO_Init+0x22e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a1e      	ldr	r2, [pc, #120]	; (8002ca4 <HAL_GPIO_Init+0x248>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02b      	beq.n	8002c86 <HAL_GPIO_Init+0x22a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_GPIO_Init+0x24c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d025      	beq.n	8002c82 <HAL_GPIO_Init+0x226>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <HAL_GPIO_Init+0x250>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d01f      	beq.n	8002c7e <HAL_GPIO_Init+0x222>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1b      	ldr	r2, [pc, #108]	; (8002cb0 <HAL_GPIO_Init+0x254>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d019      	beq.n	8002c7a <HAL_GPIO_Init+0x21e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <HAL_GPIO_Init+0x258>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_GPIO_Init+0x21a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_GPIO_Init+0x25c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00d      	beq.n	8002c72 <HAL_GPIO_Init+0x216>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_GPIO_Init+0x260>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <HAL_GPIO_Init+0x212>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_GPIO_Init+0x264>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_GPIO_Init+0x20e>
 8002c66:	2309      	movs	r3, #9
 8002c68:	e02d      	b.n	8002cc6 <HAL_GPIO_Init+0x26a>
 8002c6a:	230a      	movs	r3, #10
 8002c6c:	e02b      	b.n	8002cc6 <HAL_GPIO_Init+0x26a>
 8002c6e:	2308      	movs	r3, #8
 8002c70:	e029      	b.n	8002cc6 <HAL_GPIO_Init+0x26a>
 8002c72:	2307      	movs	r3, #7
 8002c74:	e027      	b.n	8002cc6 <HAL_GPIO_Init+0x26a>
 8002c76:	2306      	movs	r3, #6
 8002c78:	e025      	b.n	8002cc6 <HAL_GPIO_Init+0x26a>
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	e023      	b.n	8002cc6 <HAL_GPIO_Init+0x26a>
 8002c7e:	2304      	movs	r3, #4
 8002c80:	e021      	b.n	8002cc6 <HAL_GPIO_Init+0x26a>
 8002c82:	2303      	movs	r3, #3
 8002c84:	e01f      	b.n	8002cc6 <HAL_GPIO_Init+0x26a>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e01d      	b.n	8002cc6 <HAL_GPIO_Init+0x26a>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e01b      	b.n	8002cc6 <HAL_GPIO_Init+0x26a>
 8002c8e:	bf00      	nop
 8002c90:	58000080 	.word	0x58000080
 8002c94:	58024400 	.word	0x58024400
 8002c98:	58000400 	.word	0x58000400
 8002c9c:	58020000 	.word	0x58020000
 8002ca0:	58020400 	.word	0x58020400
 8002ca4:	58020800 	.word	0x58020800
 8002ca8:	58020c00 	.word	0x58020c00
 8002cac:	58021000 	.word	0x58021000
 8002cb0:	58021400 	.word	0x58021400
 8002cb4:	58021800 	.word	0x58021800
 8002cb8:	58021c00 	.word	0x58021c00
 8002cbc:	58022000 	.word	0x58022000
 8002cc0:	58022400 	.word	0x58022400
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	f002 0203 	and.w	r2, r2, #3
 8002ccc:	0092      	lsls	r2, r2, #2
 8002cce:	4093      	lsls	r3, r2
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd6:	4938      	ldr	r1, [pc, #224]	; (8002db8 <HAL_GPIO_Init+0x35c>)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	3302      	adds	r3, #2
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	3301      	adds	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f47f ae63 	bne.w	8002a70 <HAL_GPIO_Init+0x14>
  }
}
 8002daa:	bf00      	nop
 8002dac:	bf00      	nop
 8002dae:	3724      	adds	r7, #36	; 0x24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	58000400 	.word	0x58000400

08002dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	807b      	strh	r3, [r7, #2]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dcc:	787b      	ldrb	r3, [r7, #1]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002dd8:	e003      	b.n	8002de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002dda:	887b      	ldrh	r3, [r7, #2]
 8002ddc:	041a      	lsls	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	619a      	str	r2, [r3, #24]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e00:	887a      	ldrh	r2, [r7, #2]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4013      	ands	r3, r2
 8002e06:	041a      	lsls	r2, r3, #16
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	887b      	ldrh	r3, [r7, #2]
 8002e0e:	400b      	ands	r3, r1
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	619a      	str	r2, [r3, #24]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e24:	b08f      	sub	sp, #60	; 0x3c
 8002e26:	af0a      	add	r7, sp, #40	; 0x28
 8002e28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e116      	b.n	8003062 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe f84c 	bl	8000eec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2203      	movs	r2, #3
 8002e58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f004 fbce 	bl	8007614 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	687e      	ldr	r6, [r7, #4]
 8002e80:	466d      	mov	r5, sp
 8002e82:	f106 0410 	add.w	r4, r6, #16
 8002e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e96:	1d33      	adds	r3, r6, #4
 8002e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e9a:	6838      	ldr	r0, [r7, #0]
 8002e9c:	f004 fb4c 	bl	8007538 <USB_CoreInit>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0d7      	b.n	8003062 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f004 fbbc 	bl	8007636 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	73fb      	strb	r3, [r7, #15]
 8002ec2:	e04a      	b.n	8002f5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	333d      	adds	r3, #61	; 0x3d
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	333c      	adds	r3, #60	; 0x3c
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	b298      	uxth	r0, r3
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	3342      	adds	r3, #66	; 0x42
 8002f00:	4602      	mov	r2, r0
 8002f02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	333f      	adds	r3, #63	; 0x3f
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3344      	adds	r3, #68	; 0x44
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3348      	adds	r3, #72	; 0x48
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3350      	adds	r3, #80	; 0x50
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	3301      	adds	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d3af      	bcc.n	8002ec4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	e044      	b.n	8002ff4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f6a:	7bfa      	ldrb	r2, [r7, #15]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d3b5      	bcc.n	8002f6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	687e      	ldr	r6, [r7, #4]
 8003006:	466d      	mov	r5, sp
 8003008:	f106 0410 	add.w	r4, r6, #16
 800300c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003014:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003018:	e885 0003 	stmia.w	r5, {r0, r1}
 800301c:	1d33      	adds	r3, r6, #4
 800301e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003020:	6838      	ldr	r0, [r7, #0]
 8003022:	f004 fb33 	bl	800768c <USB_DevInit>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e014      	b.n	8003062 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2b01      	cmp	r3, #1
 800304e:	d102      	bne.n	8003056 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f80b 	bl	800306c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f004 fcd5 	bl	8007a0a <USB_DevDisconnect>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800306c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800309c:	4313      	orrs	r3, r2
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	10000003 	.word	0x10000003

080030b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80030bc:	4b29      	ldr	r3, [pc, #164]	; (8003164 <HAL_PWREx_ConfigSupply+0xb0>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	2b06      	cmp	r3, #6
 80030c6:	d00a      	beq.n	80030de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030c8:	4b26      	ldr	r3, [pc, #152]	; (8003164 <HAL_PWREx_ConfigSupply+0xb0>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d001      	beq.n	80030da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e040      	b.n	800315c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e03e      	b.n	800315c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80030de:	4b21      	ldr	r3, [pc, #132]	; (8003164 <HAL_PWREx_ConfigSupply+0xb0>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80030e6:	491f      	ldr	r1, [pc, #124]	; (8003164 <HAL_PWREx_ConfigSupply+0xb0>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80030ee:	f7fe f85f 	bl	80011b0 <HAL_GetTick>
 80030f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030f4:	e009      	b.n	800310a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030f6:	f7fe f85b 	bl	80011b0 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003104:	d901      	bls.n	800310a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e028      	b.n	800315c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800310a:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_PWREx_ConfigSupply+0xb0>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003116:	d1ee      	bne.n	80030f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b1e      	cmp	r3, #30
 800311c:	d008      	beq.n	8003130 <HAL_PWREx_ConfigSupply+0x7c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b2e      	cmp	r3, #46	; 0x2e
 8003122:	d005      	beq.n	8003130 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b1d      	cmp	r3, #29
 8003128:	d002      	beq.n	8003130 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b2d      	cmp	r3, #45	; 0x2d
 800312e:	d114      	bne.n	800315a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003130:	f7fe f83e 	bl	80011b0 <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003136:	e009      	b.n	800314c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003138:	f7fe f83a 	bl	80011b0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003146:	d901      	bls.n	800314c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e007      	b.n	800315c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_PWREx_ConfigSupply+0xb0>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003158:	d1ee      	bne.n	8003138 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	58024800 	.word	0x58024800

08003168 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003176:	60d3      	str	r3, [r2, #12]
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	58024800 	.word	0x58024800

08003188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08c      	sub	sp, #48	; 0x30
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e3ff      	b.n	800399a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8087 	beq.w	80032b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031a8:	4b99      	ldr	r3, [pc, #612]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031b2:	4b97      	ldr	r3, [pc, #604]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d007      	beq.n	80031ce <HAL_RCC_OscConfig+0x46>
 80031be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c0:	2b18      	cmp	r3, #24
 80031c2:	d110      	bne.n	80031e6 <HAL_RCC_OscConfig+0x5e>
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d10b      	bne.n	80031e6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ce:	4b90      	ldr	r3, [pc, #576]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d06c      	beq.n	80032b4 <HAL_RCC_OscConfig+0x12c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d168      	bne.n	80032b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e3d9      	b.n	800399a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x76>
 80031f0:	4b87      	ldr	r3, [pc, #540]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a86      	ldr	r2, [pc, #536]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e02e      	b.n	800325c <HAL_RCC_OscConfig+0xd4>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x98>
 8003206:	4b82      	ldr	r3, [pc, #520]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a81      	ldr	r2, [pc, #516]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b7f      	ldr	r3, [pc, #508]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7e      	ldr	r2, [pc, #504]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e01d      	b.n	800325c <HAL_RCC_OscConfig+0xd4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0xbc>
 800322a:	4b79      	ldr	r3, [pc, #484]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a78      	ldr	r2, [pc, #480]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b76      	ldr	r3, [pc, #472]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a75      	ldr	r2, [pc, #468]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0xd4>
 8003244:	4b72      	ldr	r3, [pc, #456]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a71      	ldr	r2, [pc, #452]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b6f      	ldr	r3, [pc, #444]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a6e      	ldr	r2, [pc, #440]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fd ffa4 	bl	80011b0 <HAL_GetTick>
 8003268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326c:	f7fd ffa0 	bl	80011b0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e38d      	b.n	800399a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800327e:	4b64      	ldr	r3, [pc, #400]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0xe4>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fd ff90 	bl	80011b0 <HAL_GetTick>
 8003290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003294:	f7fd ff8c 	bl	80011b0 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e379      	b.n	800399a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032a6:	4b5a      	ldr	r3, [pc, #360]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x10c>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80ae 	beq.w	8003420 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c4:	4b52      	ldr	r3, [pc, #328]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032ce:	4b50      	ldr	r3, [pc, #320]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <HAL_RCC_OscConfig+0x162>
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	2b18      	cmp	r3, #24
 80032de:	d13a      	bne.n	8003356 <HAL_RCC_OscConfig+0x1ce>
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d135      	bne.n	8003356 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ea:	4b49      	ldr	r3, [pc, #292]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_RCC_OscConfig+0x17a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e34b      	b.n	800399a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	f7fd ff85 	bl	8001210 <HAL_GetREVID>
 8003306:	4603      	mov	r3, r0
 8003308:	f241 0203 	movw	r2, #4099	; 0x1003
 800330c:	4293      	cmp	r3, r2
 800330e:	d817      	bhi.n	8003340 <HAL_RCC_OscConfig+0x1b8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	d108      	bne.n	800332a <HAL_RCC_OscConfig+0x1a2>
 8003318:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003320:	4a3b      	ldr	r2, [pc, #236]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003326:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003328:	e07a      	b.n	8003420 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332a:	4b39      	ldr	r3, [pc, #228]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	031b      	lsls	r3, r3, #12
 8003338:	4935      	ldr	r1, [pc, #212]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800333e:	e06f      	b.n	8003420 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003340:	4b33      	ldr	r3, [pc, #204]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	4930      	ldr	r1, [pc, #192]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003354:	e064      	b.n	8003420 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d045      	beq.n	80033ea <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800335e:	4b2c      	ldr	r3, [pc, #176]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 0219 	bic.w	r2, r3, #25
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	4929      	ldr	r1, [pc, #164]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fd ff1e 	bl	80011b0 <HAL_GetTick>
 8003374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003378:	f7fd ff1a 	bl	80011b0 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e307      	b.n	800399a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800338a:	4b21      	ldr	r3, [pc, #132]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	f7fd ff3b 	bl	8001210 <HAL_GetREVID>
 800339a:	4603      	mov	r3, r0
 800339c:	f241 0203 	movw	r2, #4099	; 0x1003
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d817      	bhi.n	80033d4 <HAL_RCC_OscConfig+0x24c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d108      	bne.n	80033be <HAL_RCC_OscConfig+0x236>
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033b4:	4a16      	ldr	r2, [pc, #88]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80033b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ba:	6053      	str	r3, [r2, #4]
 80033bc:	e030      	b.n	8003420 <HAL_RCC_OscConfig+0x298>
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	031b      	lsls	r3, r3, #12
 80033cc:	4910      	ldr	r1, [pc, #64]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	604b      	str	r3, [r1, #4]
 80033d2:	e025      	b.n	8003420 <HAL_RCC_OscConfig+0x298>
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	061b      	lsls	r3, r3, #24
 80033e2:	490b      	ldr	r1, [pc, #44]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
 80033e8:	e01a      	b.n	8003420 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a08      	ldr	r2, [pc, #32]	; (8003410 <HAL_RCC_OscConfig+0x288>)
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f6:	f7fd fedb 	bl	80011b0 <HAL_GetTick>
 80033fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033fe:	f7fd fed7 	bl	80011b0 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d903      	bls.n	8003414 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e2c4      	b.n	800399a <HAL_RCC_OscConfig+0x812>
 8003410:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003414:	4ba4      	ldr	r3, [pc, #656]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1ee      	bne.n	80033fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80a9 	beq.w	8003580 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342e:	4b9e      	ldr	r3, [pc, #632]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003436:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003438:	4b9b      	ldr	r3, [pc, #620]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b08      	cmp	r3, #8
 8003442:	d007      	beq.n	8003454 <HAL_RCC_OscConfig+0x2cc>
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b18      	cmp	r3, #24
 8003448:	d13a      	bne.n	80034c0 <HAL_RCC_OscConfig+0x338>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d135      	bne.n	80034c0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003454:	4b94      	ldr	r3, [pc, #592]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_OscConfig+0x2e4>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d001      	beq.n	800346c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e296      	b.n	800399a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800346c:	f7fd fed0 	bl	8001210 <HAL_GetREVID>
 8003470:	4603      	mov	r3, r0
 8003472:	f241 0203 	movw	r2, #4099	; 0x1003
 8003476:	4293      	cmp	r3, r2
 8003478:	d817      	bhi.n	80034aa <HAL_RCC_OscConfig+0x322>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	2b20      	cmp	r3, #32
 8003480:	d108      	bne.n	8003494 <HAL_RCC_OscConfig+0x30c>
 8003482:	4b89      	ldr	r3, [pc, #548]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800348a:	4a87      	ldr	r2, [pc, #540]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 800348c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003490:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003492:	e075      	b.n	8003580 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003494:	4b84      	ldr	r3, [pc, #528]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	069b      	lsls	r3, r3, #26
 80034a2:	4981      	ldr	r1, [pc, #516]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034a8:	e06a      	b.n	8003580 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034aa:	4b7f      	ldr	r3, [pc, #508]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	061b      	lsls	r3, r3, #24
 80034b8:	497b      	ldr	r1, [pc, #492]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034be:	e05f      	b.n	8003580 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d042      	beq.n	800354e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034c8:	4b77      	ldr	r3, [pc, #476]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a76      	ldr	r2, [pc, #472]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 80034ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fd fe6c 	bl	80011b0 <HAL_GetTick>
 80034d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034dc:	f7fd fe68 	bl	80011b0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e255      	b.n	800399a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034ee:	4b6e      	ldr	r3, [pc, #440]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034fa:	f7fd fe89 	bl	8001210 <HAL_GetREVID>
 80034fe:	4603      	mov	r3, r0
 8003500:	f241 0203 	movw	r2, #4099	; 0x1003
 8003504:	4293      	cmp	r3, r2
 8003506:	d817      	bhi.n	8003538 <HAL_RCC_OscConfig+0x3b0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	2b20      	cmp	r3, #32
 800350e:	d108      	bne.n	8003522 <HAL_RCC_OscConfig+0x39a>
 8003510:	4b65      	ldr	r3, [pc, #404]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003518:	4a63      	ldr	r2, [pc, #396]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 800351a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800351e:	6053      	str	r3, [r2, #4]
 8003520:	e02e      	b.n	8003580 <HAL_RCC_OscConfig+0x3f8>
 8003522:	4b61      	ldr	r3, [pc, #388]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	069b      	lsls	r3, r3, #26
 8003530:	495d      	ldr	r1, [pc, #372]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
 8003536:	e023      	b.n	8003580 <HAL_RCC_OscConfig+0x3f8>
 8003538:	4b5b      	ldr	r3, [pc, #364]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	4958      	ldr	r1, [pc, #352]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003548:	4313      	orrs	r3, r2
 800354a:	60cb      	str	r3, [r1, #12]
 800354c:	e018      	b.n	8003580 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800354e:	4b56      	ldr	r3, [pc, #344]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a55      	ldr	r2, [pc, #340]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fd fe29 	bl	80011b0 <HAL_GetTick>
 800355e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003562:	f7fd fe25 	bl	80011b0 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e212      	b.n	800399a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003574:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d036      	beq.n	80035fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d019      	beq.n	80035c8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003594:	4b44      	ldr	r3, [pc, #272]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003598:	4a43      	ldr	r2, [pc, #268]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fd fe06 	bl	80011b0 <HAL_GetTick>
 80035a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fd fe02 	bl	80011b0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1ef      	b.n	800399a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035ba:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x420>
 80035c6:	e018      	b.n	80035fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 80035ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035cc:	4a36      	ldr	r2, [pc, #216]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7fd fdec 	bl	80011b0 <HAL_GetTick>
 80035d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035dc:	f7fd fde8 	bl	80011b0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e1d5      	b.n	800399a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ee:	4b2e      	ldr	r3, [pc, #184]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 80035f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d036      	beq.n	8003674 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d019      	beq.n	8003642 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800360e:	4b26      	ldr	r3, [pc, #152]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a25      	ldr	r2, [pc, #148]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003618:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800361a:	f7fd fdc9 	bl	80011b0 <HAL_GetTick>
 800361e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003622:	f7fd fdc5 	bl	80011b0 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e1b2      	b.n	800399a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003634:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x49a>
 8003640:	e018      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003642:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 8003648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800364c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800364e:	f7fd fdaf 	bl	80011b0 <HAL_GetTick>
 8003652:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003656:	f7fd fdab 	bl	80011b0 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e198      	b.n	800399a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <HAL_RCC_OscConfig+0x520>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f0      	bne.n	8003656 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8085 	beq.w	800378c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003682:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <HAL_RCC_OscConfig+0x524>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a09      	ldr	r2, [pc, #36]	; (80036ac <HAL_RCC_OscConfig+0x524>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800368e:	f7fd fd8f 	bl	80011b0 <HAL_GetTick>
 8003692:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003694:	e00c      	b.n	80036b0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003696:	f7fd fd8b 	bl	80011b0 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b64      	cmp	r3, #100	; 0x64
 80036a2:	d905      	bls.n	80036b0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e178      	b.n	800399a <HAL_RCC_OscConfig+0x812>
 80036a8:	58024400 	.word	0x58024400
 80036ac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036b0:	4b96      	ldr	r3, [pc, #600]	; (800390c <HAL_RCC_OscConfig+0x784>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ec      	beq.n	8003696 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x54a>
 80036c4:	4b92      	ldr	r3, [pc, #584]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a91      	ldr	r2, [pc, #580]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
 80036d0:	e02d      	b.n	800372e <HAL_RCC_OscConfig+0x5a6>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x56c>
 80036da:	4b8d      	ldr	r3, [pc, #564]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a8c      	ldr	r2, [pc, #560]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
 80036e6:	4b8a      	ldr	r3, [pc, #552]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4a89      	ldr	r2, [pc, #548]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70
 80036f2:	e01c      	b.n	800372e <HAL_RCC_OscConfig+0x5a6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d10c      	bne.n	8003716 <HAL_RCC_OscConfig+0x58e>
 80036fc:	4b84      	ldr	r3, [pc, #528]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	4a83      	ldr	r2, [pc, #524]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003702:	f043 0304 	orr.w	r3, r3, #4
 8003706:	6713      	str	r3, [r2, #112]	; 0x70
 8003708:	4b81      	ldr	r3, [pc, #516]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	4a80      	ldr	r2, [pc, #512]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6713      	str	r3, [r2, #112]	; 0x70
 8003714:	e00b      	b.n	800372e <HAL_RCC_OscConfig+0x5a6>
 8003716:	4b7e      	ldr	r3, [pc, #504]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a7d      	ldr	r2, [pc, #500]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	4b7b      	ldr	r3, [pc, #492]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4a7a      	ldr	r2, [pc, #488]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003728:	f023 0304 	bic.w	r3, r3, #4
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d015      	beq.n	8003762 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003736:	f7fd fd3b 	bl	80011b0 <HAL_GetTick>
 800373a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800373c:	e00a      	b.n	8003754 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800373e:	f7fd fd37 	bl	80011b0 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f241 3288 	movw	r2, #5000	; 0x1388
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e122      	b.n	800399a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003754:	4b6e      	ldr	r3, [pc, #440]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ee      	beq.n	800373e <HAL_RCC_OscConfig+0x5b6>
 8003760:	e014      	b.n	800378c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003762:	f7fd fd25 	bl	80011b0 <HAL_GetTick>
 8003766:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003768:	e00a      	b.n	8003780 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fd fd21 	bl	80011b0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e10c      	b.n	800399a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003780:	4b63      	ldr	r3, [pc, #396]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ee      	bne.n	800376a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8101 	beq.w	8003998 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003796:	4b5e      	ldr	r3, [pc, #376]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800379e:	2b18      	cmp	r3, #24
 80037a0:	f000 80bc 	beq.w	800391c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	f040 8095 	bne.w	80038d8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ae:	4b58      	ldr	r3, [pc, #352]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a57      	ldr	r2, [pc, #348]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80037b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7fd fcf9 	bl	80011b0 <HAL_GetTick>
 80037be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c2:	f7fd fcf5 	bl	80011b0 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e0e2      	b.n	800399a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037d4:	4b4e      	ldr	r3, [pc, #312]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e0:	4b4b      	ldr	r3, [pc, #300]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80037e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e4:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <HAL_RCC_OscConfig+0x78c>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	430a      	orrs	r2, r1
 80037f4:	4946      	ldr	r1, [pc, #280]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	628b      	str	r3, [r1, #40]	; 0x28
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	3b01      	subs	r3, #1
 8003800:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	3b01      	subs	r3, #1
 800380a:	025b      	lsls	r3, r3, #9
 800380c:	b29b      	uxth	r3, r3
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	3b01      	subs	r3, #1
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	3b01      	subs	r3, #1
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800382a:	4939      	ldr	r1, [pc, #228]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 800382c:	4313      	orrs	r3, r2
 800382e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003830:	4b37      	ldr	r3, [pc, #220]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	4a36      	ldr	r2, [pc, #216]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800383c:	4b34      	ldr	r3, [pc, #208]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 800383e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003840:	4b35      	ldr	r3, [pc, #212]	; (8003918 <HAL_RCC_OscConfig+0x790>)
 8003842:	4013      	ands	r3, r2
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003848:	00d2      	lsls	r2, r2, #3
 800384a:	4931      	ldr	r1, [pc, #196]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 800384c:	4313      	orrs	r3, r2
 800384e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003850:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f023 020c 	bic.w	r2, r3, #12
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	492c      	ldr	r1, [pc, #176]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 800385e:	4313      	orrs	r3, r2
 8003860:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003862:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	f023 0202 	bic.w	r2, r3, #2
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4928      	ldr	r1, [pc, #160]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003870:	4313      	orrs	r3, r2
 8003872:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003874:	4b26      	ldr	r3, [pc, #152]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	4a25      	ldr	r2, [pc, #148]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 800387a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003880:	4b23      	ldr	r3, [pc, #140]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	4a22      	ldr	r2, [pc, #136]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800388c:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	4a1f      	ldr	r2, [pc, #124]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a19      	ldr	r2, [pc, #100]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80038aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fd fc7e 	bl	80011b0 <HAL_GetTick>
 80038b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fd fc7a 	bl	80011b0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e067      	b.n	800399a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x730>
 80038d6:	e05f      	b.n	8003998 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0c      	ldr	r2, [pc, #48]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 80038de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fd fc64 	bl	80011b0 <HAL_GetTick>
 80038e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fd fc60 	bl	80011b0 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e04d      	b.n	800399a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038fe:	4b04      	ldr	r3, [pc, #16]	; (8003910 <HAL_RCC_OscConfig+0x788>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x764>
 800390a:	e045      	b.n	8003998 <HAL_RCC_OscConfig+0x810>
 800390c:	58024800 	.word	0x58024800
 8003910:	58024400 	.word	0x58024400
 8003914:	fffffc0c 	.word	0xfffffc0c
 8003918:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800391c:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <HAL_RCC_OscConfig+0x81c>)
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <HAL_RCC_OscConfig+0x81c>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	2b01      	cmp	r3, #1
 800392e:	d031      	beq.n	8003994 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f003 0203 	and.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d12a      	bne.n	8003994 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d122      	bne.n	8003994 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d11a      	bne.n	8003994 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	0a5b      	lsrs	r3, r3, #9
 8003962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d111      	bne.n	8003994 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d108      	bne.n	8003994 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	0e1b      	lsrs	r3, r3, #24
 8003986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3730      	adds	r7, #48	; 0x30
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	58024400 	.word	0x58024400

080039a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e19c      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039bc:	4b8a      	ldr	r3, [pc, #552]	; (8003be8 <HAL_RCC_ClockConfig+0x240>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d910      	bls.n	80039ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b87      	ldr	r3, [pc, #540]	; (8003be8 <HAL_RCC_ClockConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 020f 	bic.w	r2, r3, #15
 80039d2:	4985      	ldr	r1, [pc, #532]	; (8003be8 <HAL_RCC_ClockConfig+0x240>)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b83      	ldr	r3, [pc, #524]	; (8003be8 <HAL_RCC_ClockConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e184      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d010      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	4b7b      	ldr	r3, [pc, #492]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d908      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a08:	4b78      	ldr	r3, [pc, #480]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	4975      	ldr	r1, [pc, #468]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d010      	beq.n	8003a48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	4b70      	ldr	r3, [pc, #448]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d908      	bls.n	8003a48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a36:	4b6d      	ldr	r3, [pc, #436]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	496a      	ldr	r1, [pc, #424]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d010      	beq.n	8003a76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699a      	ldr	r2, [r3, #24]
 8003a58:	4b64      	ldr	r3, [pc, #400]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d908      	bls.n	8003a76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a64:	4b61      	ldr	r3, [pc, #388]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	495e      	ldr	r1, [pc, #376]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d010      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	4b59      	ldr	r3, [pc, #356]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d908      	bls.n	8003aa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a92:	4b56      	ldr	r3, [pc, #344]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	4953      	ldr	r1, [pc, #332]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d010      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	4b4d      	ldr	r3, [pc, #308]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d908      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac0:	4b4a      	ldr	r3, [pc, #296]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f023 020f 	bic.w	r2, r3, #15
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4947      	ldr	r1, [pc, #284]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d055      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ade:	4b43      	ldr	r3, [pc, #268]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	4940      	ldr	r1, [pc, #256]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003af8:	4b3c      	ldr	r3, [pc, #240]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d121      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0f6      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b10:	4b36      	ldr	r3, [pc, #216]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d115      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0ea      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d107      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b28:	4b30      	ldr	r3, [pc, #192]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d109      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0de      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b38:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0d6      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f023 0207 	bic.w	r2, r3, #7
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4925      	ldr	r1, [pc, #148]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fd fb29 	bl	80011b0 <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b62:	f7fd fb25 	bl	80011b0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e0be      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b78:	4b1c      	ldr	r3, [pc, #112]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d1eb      	bne.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d010      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	4b14      	ldr	r3, [pc, #80]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d208      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f023 020f 	bic.w	r2, r3, #15
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	490e      	ldr	r1, [pc, #56]	; (8003bec <HAL_RCC_ClockConfig+0x244>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_ClockConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d214      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_RCC_ClockConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 020f 	bic.w	r2, r3, #15
 8003bce:	4906      	ldr	r1, [pc, #24]	; (8003be8 <HAL_RCC_ClockConfig+0x240>)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <HAL_RCC_ClockConfig+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e086      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x34e>
 8003be8:	52002000 	.word	0x52002000
 8003bec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d010      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	4b3f      	ldr	r3, [pc, #252]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d208      	bcs.n	8003c1e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c0c:	4b3c      	ldr	r3, [pc, #240]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	4939      	ldr	r1, [pc, #228]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d010      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	4b34      	ldr	r3, [pc, #208]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d208      	bcs.n	8003c4c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c3a:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	492e      	ldr	r1, [pc, #184]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d010      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d208      	bcs.n	8003c7a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	4922      	ldr	r1, [pc, #136]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d208      	bcs.n	8003ca8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c96:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	4917      	ldr	r1, [pc, #92]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ca8:	f000 f834 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	4912      	ldr	r1, [pc, #72]	; (8003d04 <HAL_RCC_ClockConfig+0x35c>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_RCC_ClockConfig+0x358>)
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <HAL_RCC_ClockConfig+0x35c>)
 8003cd0:	5cd3      	ldrb	r3, [r2, r3]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cdc:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <HAL_RCC_ClockConfig+0x360>)
 8003cde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ce0:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <HAL_RCC_ClockConfig+0x364>)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <HAL_RCC_ClockConfig+0x368>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd fa16 	bl	800111c <HAL_InitTick>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	58024400 	.word	0x58024400
 8003d04:	08007b24 	.word	0x08007b24
 8003d08:	24000004 	.word	0x24000004
 8003d0c:	24000000 	.word	0x24000000
 8003d10:	24000008 	.word	0x24000008

08003d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d1a:	4bb3      	ldr	r3, [pc, #716]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d22:	2b18      	cmp	r3, #24
 8003d24:	f200 8155 	bhi.w	8003fd2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d95 	.word	0x08003d95
 8003d34:	08003fd3 	.word	0x08003fd3
 8003d38:	08003fd3 	.word	0x08003fd3
 8003d3c:	08003fd3 	.word	0x08003fd3
 8003d40:	08003fd3 	.word	0x08003fd3
 8003d44:	08003fd3 	.word	0x08003fd3
 8003d48:	08003fd3 	.word	0x08003fd3
 8003d4c:	08003fd3 	.word	0x08003fd3
 8003d50:	08003dbb 	.word	0x08003dbb
 8003d54:	08003fd3 	.word	0x08003fd3
 8003d58:	08003fd3 	.word	0x08003fd3
 8003d5c:	08003fd3 	.word	0x08003fd3
 8003d60:	08003fd3 	.word	0x08003fd3
 8003d64:	08003fd3 	.word	0x08003fd3
 8003d68:	08003fd3 	.word	0x08003fd3
 8003d6c:	08003fd3 	.word	0x08003fd3
 8003d70:	08003dc1 	.word	0x08003dc1
 8003d74:	08003fd3 	.word	0x08003fd3
 8003d78:	08003fd3 	.word	0x08003fd3
 8003d7c:	08003fd3 	.word	0x08003fd3
 8003d80:	08003fd3 	.word	0x08003fd3
 8003d84:	08003fd3 	.word	0x08003fd3
 8003d88:	08003fd3 	.word	0x08003fd3
 8003d8c:	08003fd3 	.word	0x08003fd3
 8003d90:	08003dc7 	.word	0x08003dc7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d94:	4b94      	ldr	r3, [pc, #592]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d009      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003da0:	4b91      	ldr	r3, [pc, #580]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	08db      	lsrs	r3, r3, #3
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	4a90      	ldr	r2, [pc, #576]	; (8003fec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
 8003db0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003db2:	e111      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003db4:	4b8d      	ldr	r3, [pc, #564]	; (8003fec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003db6:	61bb      	str	r3, [r7, #24]
    break;
 8003db8:	e10e      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003dba:	4b8d      	ldr	r3, [pc, #564]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dbc:	61bb      	str	r3, [r7, #24]
    break;
 8003dbe:	e10b      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003dc0:	4b8c      	ldr	r3, [pc, #560]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003dc2:	61bb      	str	r3, [r7, #24]
    break;
 8003dc4:	e108      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dc6:	4b88      	ldr	r3, [pc, #544]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003dd0:	4b85      	ldr	r3, [pc, #532]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dda:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ddc:	4b82      	ldr	r3, [pc, #520]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003de6:	4b80      	ldr	r3, [pc, #512]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	08db      	lsrs	r3, r3, #3
 8003dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80e1 	beq.w	8003fcc <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	f000 8083 	beq.w	8003f18 <HAL_RCC_GetSysClockFreq+0x204>
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	f200 80a1 	bhi.w	8003f5c <HAL_RCC_GetSysClockFreq+0x248>
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x114>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d056      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e26:	e099      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e28:	4b6f      	ldr	r3, [pc, #444]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d02d      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e34:	4b6c      	ldr	r3, [pc, #432]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	08db      	lsrs	r3, r3, #3
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	4a6b      	ldr	r2, [pc, #428]	; (8003fec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
 8003e44:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	ee07 3a90 	vmov	s15, r3
 8003e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5e:	4b62      	ldr	r3, [pc, #392]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e72:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e8e:	e087      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ffc <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ea2:	4b51      	ldr	r3, [pc, #324]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eb6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ed2:	e065      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ede:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ee6:	4b40      	ldr	r3, [pc, #256]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003efa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f16:	e043      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f22:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004004 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f2a:	4b2f      	ldr	r3, [pc, #188]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f3e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f5a:	e021      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f82:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f9e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	0a5b      	lsrs	r3, r3, #9
 8003fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003faa:	3301      	adds	r3, #1
 8003fac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	ee07 3a90 	vmov	s15, r3
 8003fb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fc4:	ee17 3a90 	vmov	r3, s15
 8003fc8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003fca:	e005      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61bb      	str	r3, [r7, #24]
    break;
 8003fd0:	e002      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003fd2:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fd4:	61bb      	str	r3, [r7, #24]
    break;
 8003fd6:	bf00      	nop
  }

  return sysclockfreq;
 8003fd8:	69bb      	ldr	r3, [r7, #24]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3724      	adds	r7, #36	; 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	58024400 	.word	0x58024400
 8003fec:	03d09000 	.word	0x03d09000
 8003ff0:	003d0900 	.word	0x003d0900
 8003ff4:	007a1200 	.word	0x007a1200
 8003ff8:	46000000 	.word	0x46000000
 8003ffc:	4c742400 	.word	0x4c742400
 8004000:	4a742400 	.word	0x4a742400
 8004004:	4af42400 	.word	0x4af42400

08004008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800400e:	f7ff fe81 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8004012:	4602      	mov	r2, r0
 8004014:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_RCC_GetHCLKFreq+0x50>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	0a1b      	lsrs	r3, r3, #8
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	490f      	ldr	r1, [pc, #60]	; (800405c <HAL_RCC_GetHCLKFreq+0x54>)
 8004020:	5ccb      	ldrb	r3, [r1, r3]
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <HAL_RCC_GetHCLKFreq+0x50>)
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	4a09      	ldr	r2, [pc, #36]	; (800405c <HAL_RCC_GetHCLKFreq+0x54>)
 8004036:	5cd3      	ldrb	r3, [r2, r3]
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	fa22 f303 	lsr.w	r3, r2, r3
 8004042:	4a07      	ldr	r2, [pc, #28]	; (8004060 <HAL_RCC_GetHCLKFreq+0x58>)
 8004044:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004046:	4a07      	ldr	r2, [pc, #28]	; (8004064 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <HAL_RCC_GetHCLKFreq+0x58>)
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	58024400 	.word	0x58024400
 800405c:	08007b24 	.word	0x08007b24
 8004060:	24000004 	.word	0x24000004
 8004064:	24000000 	.word	0x24000000

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800406c:	f7ff ffcc 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4904      	ldr	r1, [pc, #16]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	58024400 	.word	0x58024400
 8004090:	08007b24 	.word	0x08007b24

08004094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004098:	f7ff ffb6 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4904      	ldr	r1, [pc, #16]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	58024400 	.word	0x58024400
 80040bc:	08007b24 	.word	0x08007b24

080040c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040c8:	2300      	movs	r3, #0
 80040ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040cc:	2300      	movs	r3, #0
 80040ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d03f      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040e4:	d02a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040ea:	d824      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040f0:	d018      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040f6:	d81e      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004100:	d007      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004102:	e018      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004104:	4bab      	ldr	r3, [pc, #684]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	4aaa      	ldr	r2, [pc, #680]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800410a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800410e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004110:	e015      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3304      	adds	r3, #4
 8004116:	2102      	movs	r1, #2
 8004118:	4618      	mov	r0, r3
 800411a:	f001 fff3 	bl	8006104 <RCCEx_PLL2_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004122:	e00c      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3324      	adds	r3, #36	; 0x24
 8004128:	2102      	movs	r1, #2
 800412a:	4618      	mov	r0, r3
 800412c:	f002 f89c 	bl	8006268 <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004134:	e003      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
      break;
 800413a:	e000      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800413c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004144:	4b9b      	ldr	r3, [pc, #620]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004150:	4998      	ldr	r1, [pc, #608]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004152:	4313      	orrs	r3, r2
 8004154:	650b      	str	r3, [r1, #80]	; 0x50
 8004156:	e001      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d03d      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	2b04      	cmp	r3, #4
 800416e:	d826      	bhi.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	0800418d 	.word	0x0800418d
 800417c:	0800419b 	.word	0x0800419b
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041c5 	.word	0x080041c5
 8004188:	080041c5 	.word	0x080041c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418c:	4b89      	ldr	r3, [pc, #548]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	4a88      	ldr	r2, [pc, #544]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004196:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004198:	e015      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3304      	adds	r3, #4
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 ffaf 	bl	8006104 <RCCEx_PLL2_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041aa:	e00c      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3324      	adds	r3, #36	; 0x24
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f002 f858 	bl	8006268 <RCCEx_PLL3_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041bc:	e003      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	75fb      	strb	r3, [r7, #23]
      break;
 80041c2:	e000      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80041c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041cc:	4b79      	ldr	r3, [pc, #484]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d0:	f023 0207 	bic.w	r2, r3, #7
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	4976      	ldr	r1, [pc, #472]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	650b      	str	r3, [r1, #80]	; 0x50
 80041de:	e001      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
 80041e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d042      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f8:	d02b      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fe:	d825      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004200:	2bc0      	cmp	r3, #192	; 0xc0
 8004202:	d028      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004204:	2bc0      	cmp	r3, #192	; 0xc0
 8004206:	d821      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d016      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	d81d      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004214:	2b40      	cmp	r3, #64	; 0x40
 8004216:	d007      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004218:	e018      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421a:	4b66      	ldr	r3, [pc, #408]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	4a65      	ldr	r2, [pc, #404]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004224:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004226:	e017      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f001 ff68 	bl	8006104 <RCCEx_PLL2_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004238:	e00e      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3324      	adds	r3, #36	; 0x24
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f002 f811 	bl	8006268 <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800424a:	e005      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	75fb      	strb	r3, [r7, #23]
      break;
 8004250:	e002      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800425e:	4b55      	ldr	r3, [pc, #340]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426a:	4952      	ldr	r1, [pc, #328]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800426c:	4313      	orrs	r3, r2
 800426e:	650b      	str	r3, [r1, #80]	; 0x50
 8004270:	e001      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427e:	2b00      	cmp	r3, #0
 8004280:	d049      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004288:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800428c:	d030      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800428e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004292:	d82a      	bhi.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004294:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004298:	d02c      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800429a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800429e:	d824      	bhi.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a4:	d018      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80042a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042aa:	d81e      	bhi.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80042b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042b4:	d007      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80042b6:	e018      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b8:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	4a3d      	ldr	r2, [pc, #244]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042c4:	e017      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3304      	adds	r3, #4
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f001 ff19 	bl	8006104 <RCCEx_PLL2_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80042d6:	e00e      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3324      	adds	r3, #36	; 0x24
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 ffc2 	bl	8006268 <RCCEx_PLL3_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042e8:	e005      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	75fb      	strb	r3, [r7, #23]
      break;
 80042ee:	e002      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80042f0:	bf00      	nop
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80042f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80042fc:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800430a:	492a      	ldr	r1, [pc, #168]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800430c:	4313      	orrs	r3, r2
 800430e:	658b      	str	r3, [r1, #88]	; 0x58
 8004310:	e001      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004312:	7dfb      	ldrb	r3, [r7, #23]
 8004314:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431e:	2b00      	cmp	r3, #0
 8004320:	d04c      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800432c:	d030      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800432e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004332:	d82a      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004334:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004338:	d02c      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800433a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800433e:	d824      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004344:	d018      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800434a:	d81e      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004354:	d007      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004356:	e018      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004358:	4b16      	ldr	r3, [pc, #88]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	4a15      	ldr	r2, [pc, #84]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800435e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004364:	e017      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f001 fec9 	bl	8006104 <RCCEx_PLL2_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004376:	e00e      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3324      	adds	r3, #36	; 0x24
 800437c:	2100      	movs	r1, #0
 800437e:	4618      	mov	r0, r3
 8004380:	f001 ff72 	bl	8006268 <RCCEx_PLL3_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004388:	e005      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	75fb      	strb	r3, [r7, #23]
      break;
 800438e:	e002      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004390:	bf00      	nop
 8004392:	e000      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10d      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043aa:	4902      	ldr	r1, [pc, #8]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	658b      	str	r3, [r1, #88]	; 0x58
 80043b0:	e004      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80043b2:	bf00      	nop
 80043b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d032      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043cc:	2b30      	cmp	r3, #48	; 0x30
 80043ce:	d01c      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043d0:	2b30      	cmp	r3, #48	; 0x30
 80043d2:	d817      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d00c      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d813      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d016      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80043e0:	2b10      	cmp	r3, #16
 80043e2:	d10f      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e4:	4baf      	ldr	r3, [pc, #700]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	4aae      	ldr	r2, [pc, #696]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80043f0:	e00e      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2102      	movs	r1, #2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 fe83 	bl	8006104 <RCCEx_PLL2_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004402:	e005      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	75fb      	strb	r3, [r7, #23]
      break;
 8004408:	e002      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800440a:	bf00      	nop
 800440c:	e000      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800440e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004416:	4ba3      	ldr	r3, [pc, #652]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004422:	49a0      	ldr	r1, [pc, #640]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004428:	e001      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d047      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004442:	d030      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004448:	d82a      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800444a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800444e:	d02c      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004450:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004454:	d824      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445a:	d018      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800445c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004460:	d81e      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	d007      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800446c:	e018      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446e:	4b8d      	ldr	r3, [pc, #564]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	4a8c      	ldr	r2, [pc, #560]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004478:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800447a:	e017      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	2100      	movs	r1, #0
 8004482:	4618      	mov	r0, r3
 8004484:	f001 fe3e 	bl	8006104 <RCCEx_PLL2_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800448c:	e00e      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3324      	adds	r3, #36	; 0x24
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f001 fee7 	bl	8006268 <RCCEx_PLL3_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800449e:	e005      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
      break;
 80044a4:	e002      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80044a6:	bf00      	nop
 80044a8:	e000      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80044aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044b2:	4b7c      	ldr	r3, [pc, #496]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044be:	4979      	ldr	r1, [pc, #484]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	650b      	str	r3, [r1, #80]	; 0x50
 80044c4:	e001      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
 80044c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d049      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044de:	d02e      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80044e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e4:	d828      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80044e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044ea:	d02a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80044ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044f0:	d822      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80044f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044f6:	d026      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044fc:	d81c      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80044fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004502:	d010      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004508:	d816      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01d      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800450e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004512:	d111      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f001 fdf2 	bl	8006104 <RCCEx_PLL2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004524:	e012      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3324      	adds	r3, #36	; 0x24
 800452a:	2101      	movs	r1, #1
 800452c:	4618      	mov	r0, r3
 800452e:	f001 fe9b 	bl	8006268 <RCCEx_PLL3_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004536:	e009      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	75fb      	strb	r3, [r7, #23]
      break;
 800453c:	e006      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800453e:	bf00      	nop
 8004540:	e004      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004542:	bf00      	nop
 8004544:	e002      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800454a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800454c:	7dfb      	ldrb	r3, [r7, #23]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004552:	4b54      	ldr	r3, [pc, #336]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004556:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455e:	4951      	ldr	r1, [pc, #324]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004560:	4313      	orrs	r3, r2
 8004562:	650b      	str	r3, [r1, #80]	; 0x50
 8004564:	e001      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004566:	7dfb      	ldrb	r3, [r7, #23]
 8004568:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d04b      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800457c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004580:	d02e      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004586:	d828      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458c:	d02a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004592:	d822      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004594:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004598:	d026      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800459a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800459e:	d81c      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a4:	d010      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80045a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045aa:	d816      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01d      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80045b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045b4:	d111      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3304      	adds	r3, #4
 80045ba:	2101      	movs	r1, #1
 80045bc:	4618      	mov	r0, r3
 80045be:	f001 fda1 	bl	8006104 <RCCEx_PLL2_Config>
 80045c2:	4603      	mov	r3, r0
 80045c4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80045c6:	e012      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3324      	adds	r3, #36	; 0x24
 80045cc:	2101      	movs	r1, #1
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 fe4a 	bl	8006268 <RCCEx_PLL3_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80045d8:	e009      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	75fb      	strb	r3, [r7, #23]
      break;
 80045de:	e006      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80045e0:	bf00      	nop
 80045e2:	e004      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80045e4:	bf00      	nop
 80045e6:	e002      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80045e8:	bf00      	nop
 80045ea:	e000      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80045ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80045f4:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004602:	4928      	ldr	r1, [pc, #160]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004604:	4313      	orrs	r3, r2
 8004606:	658b      	str	r3, [r1, #88]	; 0x58
 8004608:	e001      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d02f      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800461e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004622:	d00e      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004628:	d814      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d015      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800462e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004632:	d10f      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004634:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	4a1a      	ldr	r2, [pc, #104]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800463a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800463e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004640:	e00c      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3304      	adds	r3, #4
 8004646:	2101      	movs	r1, #1
 8004648:	4618      	mov	r0, r3
 800464a:	f001 fd5b 	bl	8006104 <RCCEx_PLL2_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004652:	e003      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	75fb      	strb	r3, [r7, #23]
      break;
 8004658:	e000      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800465a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800465c:	7dfb      	ldrb	r3, [r7, #23]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004666:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800466e:	490d      	ldr	r1, [pc, #52]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004670:	4313      	orrs	r3, r2
 8004672:	650b      	str	r3, [r1, #80]	; 0x50
 8004674:	e001      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d033      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	2b03      	cmp	r3, #3
 800468c:	d81c      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800468e:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	080046cf 	.word	0x080046cf
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046b7 	.word	0x080046b7
 80046a0:	080046cf 	.word	0x080046cf
 80046a4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a8:	4bb8      	ldr	r3, [pc, #736]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	4ab7      	ldr	r2, [pc, #732]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046b4:	e00c      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3304      	adds	r3, #4
 80046ba:	2102      	movs	r1, #2
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 fd21 	bl	8006104 <RCCEx_PLL2_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046c6:	e003      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	75fb      	strb	r3, [r7, #23]
      break;
 80046cc:	e000      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80046ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80046d6:	4bad      	ldr	r3, [pc, #692]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046da:	f023 0203 	bic.w	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	49aa      	ldr	r1, [pc, #680]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80046e8:	e001      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8086 	beq.w	8004808 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046fc:	4ba4      	ldr	r3, [pc, #656]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4aa3      	ldr	r2, [pc, #652]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004708:	f7fc fd52 	bl	80011b0 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800470e:	e009      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004710:	f7fc fd4e 	bl	80011b0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	; 0x64
 800471c:	d902      	bls.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	75fb      	strb	r3, [r7, #23]
        break;
 8004722:	e005      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004724:	4b9a      	ldr	r3, [pc, #616]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ef      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d166      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004736:	4b95      	ldr	r3, [pc, #596]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004738:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004740:	4053      	eors	r3, r2
 8004742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004746:	2b00      	cmp	r3, #0
 8004748:	d013      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800474a:	4b90      	ldr	r3, [pc, #576]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004752:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004754:	4b8d      	ldr	r3, [pc, #564]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	4a8c      	ldr	r2, [pc, #560]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800475a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004760:	4b8a      	ldr	r3, [pc, #552]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	4a89      	ldr	r2, [pc, #548]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800476c:	4a87      	ldr	r2, [pc, #540]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477c:	d115      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7fc fd17 	bl	80011b0 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004784:	e00b      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7fc fd13 	bl	80011b0 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d902      	bls.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	75fb      	strb	r3, [r7, #23]
            break;
 800479c:	e005      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800479e:	4b7b      	ldr	r3, [pc, #492]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0ed      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d126      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047be:	d10d      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80047c0:	4b72      	ldr	r3, [pc, #456]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047ce:	0919      	lsrs	r1, r3, #4
 80047d0:	4b70      	ldr	r3, [pc, #448]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80047d2:	400b      	ands	r3, r1
 80047d4:	496d      	ldr	r1, [pc, #436]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	610b      	str	r3, [r1, #16]
 80047da:	e005      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80047dc:	4b6b      	ldr	r3, [pc, #428]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	4a6a      	ldr	r2, [pc, #424]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047e6:	6113      	str	r3, [r2, #16]
 80047e8:	4b68      	ldr	r3, [pc, #416]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f6:	4965      	ldr	r1, [pc, #404]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	670b      	str	r3, [r1, #112]	; 0x70
 80047fc:	e004      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	75bb      	strb	r3, [r7, #22]
 8004802:	e001      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004804:	7dfb      	ldrb	r3, [r7, #23]
 8004806:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d07e      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004818:	2b28      	cmp	r3, #40	; 0x28
 800481a:	d867      	bhi.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800481c:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	080048f3 	.word	0x080048f3
 8004828:	080048ed 	.word	0x080048ed
 800482c:	080048ed 	.word	0x080048ed
 8004830:	080048ed 	.word	0x080048ed
 8004834:	080048ed 	.word	0x080048ed
 8004838:	080048ed 	.word	0x080048ed
 800483c:	080048ed 	.word	0x080048ed
 8004840:	080048ed 	.word	0x080048ed
 8004844:	080048c9 	.word	0x080048c9
 8004848:	080048ed 	.word	0x080048ed
 800484c:	080048ed 	.word	0x080048ed
 8004850:	080048ed 	.word	0x080048ed
 8004854:	080048ed 	.word	0x080048ed
 8004858:	080048ed 	.word	0x080048ed
 800485c:	080048ed 	.word	0x080048ed
 8004860:	080048ed 	.word	0x080048ed
 8004864:	080048db 	.word	0x080048db
 8004868:	080048ed 	.word	0x080048ed
 800486c:	080048ed 	.word	0x080048ed
 8004870:	080048ed 	.word	0x080048ed
 8004874:	080048ed 	.word	0x080048ed
 8004878:	080048ed 	.word	0x080048ed
 800487c:	080048ed 	.word	0x080048ed
 8004880:	080048ed 	.word	0x080048ed
 8004884:	080048f3 	.word	0x080048f3
 8004888:	080048ed 	.word	0x080048ed
 800488c:	080048ed 	.word	0x080048ed
 8004890:	080048ed 	.word	0x080048ed
 8004894:	080048ed 	.word	0x080048ed
 8004898:	080048ed 	.word	0x080048ed
 800489c:	080048ed 	.word	0x080048ed
 80048a0:	080048ed 	.word	0x080048ed
 80048a4:	080048f3 	.word	0x080048f3
 80048a8:	080048ed 	.word	0x080048ed
 80048ac:	080048ed 	.word	0x080048ed
 80048b0:	080048ed 	.word	0x080048ed
 80048b4:	080048ed 	.word	0x080048ed
 80048b8:	080048ed 	.word	0x080048ed
 80048bc:	080048ed 	.word	0x080048ed
 80048c0:	080048ed 	.word	0x080048ed
 80048c4:	080048f3 	.word	0x080048f3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	2101      	movs	r1, #1
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 fc18 	bl	8006104 <RCCEx_PLL2_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80048d8:	e00c      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3324      	adds	r3, #36	; 0x24
 80048de:	2101      	movs	r1, #1
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 fcc1 	bl	8006268 <RCCEx_PLL3_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80048ea:	e003      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	75fb      	strb	r3, [r7, #23]
      break;
 80048f0:	e000      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80048f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048fa:	4b24      	ldr	r3, [pc, #144]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004906:	4921      	ldr	r1, [pc, #132]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004908:	4313      	orrs	r3, r2
 800490a:	654b      	str	r3, [r1, #84]	; 0x54
 800490c:	e001      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d03e      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004922:	2b05      	cmp	r3, #5
 8004924:	d820      	bhi.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004926:	a201      	add	r2, pc, #4	; (adr r2, 800492c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492c:	0800496f 	.word	0x0800496f
 8004930:	08004945 	.word	0x08004945
 8004934:	08004957 	.word	0x08004957
 8004938:	0800496f 	.word	0x0800496f
 800493c:	0800496f 	.word	0x0800496f
 8004940:	0800496f 	.word	0x0800496f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	2101      	movs	r1, #1
 800494a:	4618      	mov	r0, r3
 800494c:	f001 fbda 	bl	8006104 <RCCEx_PLL2_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004954:	e00c      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3324      	adds	r3, #36	; 0x24
 800495a:	2101      	movs	r1, #1
 800495c:	4618      	mov	r0, r3
 800495e:	f001 fc83 	bl	8006268 <RCCEx_PLL3_Config>
 8004962:	4603      	mov	r3, r0
 8004964:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004966:	e003      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	75fb      	strb	r3, [r7, #23]
      break;
 800496c:	e000      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800496e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d110      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	f023 0207 	bic.w	r2, r3, #7
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004982:	4902      	ldr	r1, [pc, #8]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	654b      	str	r3, [r1, #84]	; 0x54
 8004988:	e008      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800498a:	bf00      	nop
 800498c:	58024400 	.word	0x58024400
 8004990:	58024800 	.word	0x58024800
 8004994:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d039      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d820      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	080049fb 	.word	0x080049fb
 80049bc:	080049d1 	.word	0x080049d1
 80049c0:	080049e3 	.word	0x080049e3
 80049c4:	080049fb 	.word	0x080049fb
 80049c8:	080049fb 	.word	0x080049fb
 80049cc:	080049fb 	.word	0x080049fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3304      	adds	r3, #4
 80049d4:	2101      	movs	r1, #1
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 fb94 	bl	8006104 <RCCEx_PLL2_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80049e0:	e00c      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3324      	adds	r3, #36	; 0x24
 80049e6:	2101      	movs	r1, #1
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 fc3d 	bl	8006268 <RCCEx_PLL3_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80049f2:	e003      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
      break;
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80049fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a02:	4bb7      	ldr	r3, [pc, #732]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	f023 0207 	bic.w	r2, r3, #7
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	49b3      	ldr	r1, [pc, #716]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	658b      	str	r3, [r1, #88]	; 0x58
 8004a16:	e001      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d04b      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a32:	d02e      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a38:	d828      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3e:	d02a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a44:	d822      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a4a:	d026      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004a4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a50:	d81c      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a56:	d010      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a5c:	d816      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01d      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a66:	d111      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 fb48 	bl	8006104 <RCCEx_PLL2_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a78:	e012      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3324      	adds	r3, #36	; 0x24
 8004a7e:	2102      	movs	r1, #2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 fbf1 	bl	8006268 <RCCEx_PLL3_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a8a:	e009      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a90:	e006      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004a92:	bf00      	nop
 8004a94:	e004      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004a96:	bf00      	nop
 8004a98:	e002      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aa6:	4b8e      	ldr	r3, [pc, #568]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab4:	498a      	ldr	r1, [pc, #552]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	654b      	str	r3, [r1, #84]	; 0x54
 8004aba:	e001      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d04b      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ad2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ad6:	d02e      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004ad8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004adc:	d828      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae2:	d02a      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae8:	d822      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004aea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aee:	d026      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004af0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004af4:	d81c      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004afa:	d010      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b00:	d816      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01d      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0a:	d111      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f001 faf6 	bl	8006104 <RCCEx_PLL2_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b1c:	e012      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3324      	adds	r3, #36	; 0x24
 8004b22:	2102      	movs	r1, #2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f001 fb9f 	bl	8006268 <RCCEx_PLL3_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b2e:	e009      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	75fb      	strb	r3, [r7, #23]
      break;
 8004b34:	e006      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b36:	bf00      	nop
 8004b38:	e004      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e002      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b44:	7dfb      	ldrb	r3, [r7, #23]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b4a:	4b65      	ldr	r3, [pc, #404]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b58:	4961      	ldr	r1, [pc, #388]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b5e:	e001      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
 8004b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d04b      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b76:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b7a:	d02e      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004b7c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b80:	d828      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b86:	d02a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8c:	d822      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004b8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b92:	d026      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004b94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b98:	d81c      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b9e:	d010      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba4:	d816      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d01d      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bae:	d111      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f001 faa4 	bl	8006104 <RCCEx_PLL2_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004bc0:	e012      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3324      	adds	r3, #36	; 0x24
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 fb4d 	bl	8006268 <RCCEx_PLL3_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004bd2:	e009      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd8:	e006      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e004      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004bde:	bf00      	nop
 8004be0:	e002      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004be2:	bf00      	nop
 8004be4:	e000      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004bee:	4b3c      	ldr	r3, [pc, #240]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bfc:	4938      	ldr	r1, [pc, #224]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	658b      	str	r3, [r1, #88]	; 0x58
 8004c02:	e001      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
 8004c06:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01a      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1e:	d10a      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3324      	adds	r3, #36	; 0x24
 8004c24:	2102      	movs	r1, #2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 fb1e 	bl	8006268 <RCCEx_PLL3_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c36:	4b2a      	ldr	r3, [pc, #168]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c44:	4926      	ldr	r1, [pc, #152]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c60:	d10a      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3324      	adds	r3, #36	; 0x24
 8004c66:	2102      	movs	r1, #2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 fafd 	bl	8006268 <RCCEx_PLL3_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c78:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c86:	4916      	ldr	r1, [pc, #88]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d036      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ca2:	d01f      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ca8:	d817      	bhi.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb2:	d009      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004cb4:	e011      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 fa21 	bl	8006104 <RCCEx_PLL2_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004cc6:	e00e      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3324      	adds	r3, #36	; 0x24
 8004ccc:	2102      	movs	r1, #2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 faca 	bl	8006268 <RCCEx_PLL3_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004cd8:	e005      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cde:	e002      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004ce0:	58024400 	.word	0x58024400
      break;
 8004ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ce6:	7dfb      	ldrb	r3, [r7, #23]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cec:	4b93      	ldr	r3, [pc, #588]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cfa:	4990      	ldr	r1, [pc, #576]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	658b      	str	r3, [r1, #88]	; 0x58
 8004d00:	e001      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
 8004d04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d033      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d1c:	d01c      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004d1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d22:	d816      	bhi.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d28:	d003      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004d2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d2e:	d007      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004d30:	e00f      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d32:	4b82      	ldr	r3, [pc, #520]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	4a81      	ldr	r2, [pc, #516]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d3e:	e00c      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3324      	adds	r3, #36	; 0x24
 8004d44:	2101      	movs	r1, #1
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 fa8e 	bl	8006268 <RCCEx_PLL3_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d50:	e003      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	75fb      	strb	r3, [r7, #23]
      break;
 8004d56:	e000      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d5a:	7dfb      	ldrb	r3, [r7, #23]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d60:	4b76      	ldr	r3, [pc, #472]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d6e:	4973      	ldr	r1, [pc, #460]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	654b      	str	r3, [r1, #84]	; 0x54
 8004d74:	e001      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
 8004d78:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d029      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d92:	d007      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004d94:	e00f      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d96:	4b69      	ldr	r3, [pc, #420]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	4a68      	ldr	r2, [pc, #416]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004da0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004da2:	e00b      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	2102      	movs	r1, #2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 f9aa 	bl	8006104 <RCCEx_PLL2_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004db4:	e002      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004dc2:	4b5e      	ldr	r3, [pc, #376]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	495b      	ldr	r1, [pc, #364]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004dd4:	e001      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
 8004dd8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3324      	adds	r3, #36	; 0x24
 8004dea:	2102      	movs	r1, #2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 fa3b 	bl	8006268 <RCCEx_PLL3_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d030      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e10:	d017      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e16:	d811      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e1c:	d013      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e22:	d80b      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d010      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2e:	4b43      	ldr	r3, [pc, #268]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	4a42      	ldr	r2, [pc, #264]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004e3a:	e007      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e40:	e004      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004e42:	bf00      	nop
 8004e44:	e002      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e52:	4b3a      	ldr	r3, [pc, #232]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e5e:	4937      	ldr	r1, [pc, #220]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	654b      	str	r3, [r1, #84]	; 0x54
 8004e64:	e001      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
 8004e68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e76:	4b31      	ldr	r3, [pc, #196]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	492e      	ldr	r1, [pc, #184]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d009      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004e94:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ea2:	4926      	ldr	r1, [pc, #152]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eb4:	4b21      	ldr	r3, [pc, #132]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec0:	491e      	ldr	r1, [pc, #120]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00d      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ed2:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	4a19      	ldr	r2, [pc, #100]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ed8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004edc:	6113      	str	r3, [r2, #16]
 8004ede:	4b17      	ldr	r3, [pc, #92]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ee8:	4914      	ldr	r1, [pc, #80]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	da08      	bge.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ef6:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f02:	490e      	ldr	r1, [pc, #56]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	4906      	ldr	r1, [pc, #24]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004f28:	7dbb      	ldrb	r3, [r7, #22]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e000      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	58024400 	.word	0x58024400

08004f40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b090      	sub	sp, #64	; 0x40
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4e:	f040 8095 	bne.w	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004f52:	4bae      	ldr	r3, [pc, #696]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	f200 8088 	bhi.w	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004f81 	.word	0x08004f81
 8004f70:	08004fa9 	.word	0x08004fa9
 8004f74:	08004fd1 	.word	0x08004fd1
 8004f78:	0800506d 	.word	0x0800506d
 8004f7c:	08004ff9 	.word	0x08004ff9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f80:	4ba2      	ldr	r3, [pc, #648]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f8c:	d108      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 ff64 	bl	8005e60 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f9c:	f000 bc95 	b.w	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fa4:	f000 bc91 	b.w	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fa8:	4b98      	ldr	r3, [pc, #608]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb4:	d108      	bne.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fb6:	f107 0318 	add.w	r3, r7, #24
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fca8 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fc4:	f000 bc81 	b.w	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fcc:	f000 bc7d 	b.w	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fd0:	4b8e      	ldr	r3, [pc, #568]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fdc:	d108      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fde:	f107 030c 	add.w	r3, r7, #12
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fde8 	bl	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fec:	f000 bc6d 	b.w	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ff4:	f000 bc69 	b.w	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ff8:	4b84      	ldr	r3, [pc, #528]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005000:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005002:	4b82      	ldr	r3, [pc, #520]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b04      	cmp	r3, #4
 800500c:	d10c      	bne.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800500e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005014:	4b7d      	ldr	r3, [pc, #500]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	08db      	lsrs	r3, r3, #3
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	4a7c      	ldr	r2, [pc, #496]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
 8005024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005026:	e01f      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005028:	4b78      	ldr	r3, [pc, #480]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005034:	d106      	bne.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005038:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800503c:	d102      	bne.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800503e:	4b75      	ldr	r3, [pc, #468]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005042:	e011      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005044:	4b71      	ldr	r3, [pc, #452]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005050:	d106      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005058:	d102      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800505a:	4b6f      	ldr	r3, [pc, #444]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800505c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800505e:	e003      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005064:	f000 bc31 	b.w	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005068:	f000 bc2f 	b.w	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800506c:	4b6b      	ldr	r3, [pc, #428]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005070:	f000 bc2b 	b.w	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005078:	f000 bc27 	b.w	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005082:	f040 8095 	bne.w	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005086:	4b61      	ldr	r3, [pc, #388]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800508e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005096:	d04d      	beq.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509e:	f200 8084 	bhi.w	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	2bc0      	cmp	r3, #192	; 0xc0
 80050a6:	d07d      	beq.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	2bc0      	cmp	r3, #192	; 0xc0
 80050ac:	d87d      	bhi.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	2b80      	cmp	r3, #128	; 0x80
 80050b2:	d02d      	beq.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	2b80      	cmp	r3, #128	; 0x80
 80050b8:	d877      	bhi.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d012      	beq.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80050c6:	e070      	b.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050c8:	4b50      	ldr	r3, [pc, #320]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050d4:	d107      	bne.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fec0 	bl	8005e60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050e4:	e3f1      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050ea:	e3ee      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050ec:	4b47      	ldr	r3, [pc, #284]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050f8:	d107      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050fa:	f107 0318 	add.w	r3, r7, #24
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fc06 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005108:	e3df      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800510e:	e3dc      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005110:	4b3e      	ldr	r3, [pc, #248]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511c:	d107      	bne.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800511e:	f107 030c 	add.w	r3, r7, #12
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fd48 	bl	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800512c:	e3cd      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005132:	e3ca      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005134:	4b35      	ldr	r3, [pc, #212]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800513c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800513e:	4b33      	ldr	r3, [pc, #204]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b04      	cmp	r3, #4
 8005148:	d10c      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800514a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800514c:	2b00      	cmp	r3, #0
 800514e:	d109      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005150:	4b2e      	ldr	r3, [pc, #184]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	08db      	lsrs	r3, r3, #3
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	4a2d      	ldr	r2, [pc, #180]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
 8005160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005162:	e01e      	b.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005164:	4b29      	ldr	r3, [pc, #164]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005170:	d106      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005178:	d102      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800517a:	4b26      	ldr	r3, [pc, #152]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800517c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800517e:	e010      	b.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005180:	4b22      	ldr	r3, [pc, #136]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800518c:	d106      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005194:	d102      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005196:	4b20      	ldr	r3, [pc, #128]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800519a:	e002      	b.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800519c:	2300      	movs	r3, #0
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80051a0:	e393      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80051a2:	e392      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80051a4:	4b1d      	ldr	r3, [pc, #116]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051a8:	e38f      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051ae:	e38c      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b6:	f040 80a7 	bne.w	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80051ba:	4b14      	ldr	r3, [pc, #80]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80051bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051be:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051ca:	d05f      	beq.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051d2:	f200 8096 	bhi.w	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051dc:	f000 808e 	beq.w	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051e6:	f200 808c 	bhi.w	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051f0:	d03a      	beq.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051f8:	f200 8083 	bhi.w	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00e      	beq.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005208:	d01c      	beq.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800520a:	e07a      	b.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800520c:	58024400 	.word	0x58024400
 8005210:	03d09000 	.word	0x03d09000
 8005214:	003d0900 	.word	0x003d0900
 8005218:	007a1200 	.word	0x007a1200
 800521c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005220:	4baa      	ldr	r3, [pc, #680]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800522c:	d107      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800522e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fe14 	bl	8005e60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800523c:	e345      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005242:	e342      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005244:	4ba1      	ldr	r3, [pc, #644]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800524c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005250:	d107      	bne.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005252:	f107 0318 	add.w	r3, r7, #24
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fb5a 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005260:	e333      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005266:	e330      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005268:	4b98      	ldr	r3, [pc, #608]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005274:	d107      	bne.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005276:	f107 030c 	add.w	r3, r7, #12
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fc9c 	bl	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005284:	e321      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800528a:	e31e      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800528c:	4b8f      	ldr	r3, [pc, #572]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800528e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005294:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005296:	4b8d      	ldr	r3, [pc, #564]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d10c      	bne.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052a8:	4b88      	ldr	r3, [pc, #544]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	08db      	lsrs	r3, r3, #3
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	4a87      	ldr	r2, [pc, #540]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ba:	e01e      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052bc:	4b83      	ldr	r3, [pc, #524]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c8:	d106      	bne.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052d0:	d102      	bne.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80052d2:	4b80      	ldr	r3, [pc, #512]	; (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80052d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d6:	e010      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052d8:	4b7c      	ldr	r3, [pc, #496]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052e4:	d106      	bne.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80052e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ec:	d102      	bne.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80052ee:	4b7a      	ldr	r3, [pc, #488]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f2:	e002      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80052f8:	e2e7      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80052fa:	e2e6      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80052fc:	4b77      	ldr	r3, [pc, #476]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005300:	e2e3      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005306:	e2e0      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530e:	f040 809c 	bne.w	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005312:	4b6e      	ldr	r3, [pc, #440]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800531a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005322:	d054      	beq.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800532a:	f200 808b 	bhi.w	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005334:	f000 8083 	beq.w	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800533e:	f200 8081 	bhi.w	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005348:	d02f      	beq.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005350:	d878      	bhi.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800535e:	d012      	beq.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005360:	e070      	b.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005362:	4b5a      	ldr	r3, [pc, #360]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800536e:	d107      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fd73 	bl	8005e60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800537e:	e2a4      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005384:	e2a1      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005386:	4b51      	ldr	r3, [pc, #324]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800538e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005392:	d107      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005394:	f107 0318 	add.w	r3, r7, #24
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fab9 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80053a2:	e292      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053a8:	e28f      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053aa:	4b48      	ldr	r3, [pc, #288]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053b6:	d107      	bne.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053b8:	f107 030c 	add.w	r3, r7, #12
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fbfb 	bl	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053c6:	e280      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053cc:	e27d      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80053ce:	4b3f      	ldr	r3, [pc, #252]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053d6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053d8:	4b3c      	ldr	r3, [pc, #240]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d10c      	bne.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80053e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053ea:	4b38      	ldr	r3, [pc, #224]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	08db      	lsrs	r3, r3, #3
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	4a36      	ldr	r2, [pc, #216]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053f6:	fa22 f303 	lsr.w	r3, r2, r3
 80053fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053fc:	e01e      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053fe:	4b33      	ldr	r3, [pc, #204]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540a:	d106      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005412:	d102      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005414:	4b2f      	ldr	r3, [pc, #188]	; (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005418:	e010      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800541a:	4b2c      	ldr	r3, [pc, #176]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005426:	d106      	bne.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800542e:	d102      	bne.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005430:	4b29      	ldr	r3, [pc, #164]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005434:	e002      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800543a:	e246      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800543c:	e245      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800543e:	4b27      	ldr	r3, [pc, #156]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005442:	e242      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005448:	e23f      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005450:	f040 80a8 	bne.w	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005454:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005458:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800545c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005464:	d060      	beq.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800546c:	f200 8097 	bhi.w	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005476:	f000 808f 	beq.w	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005480:	f200 808d 	bhi.w	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548a:	d03b      	beq.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800548c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005492:	f200 8084 	bhi.w	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a2:	d01d      	beq.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80054a4:	e07b      	b.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054b2:	d107      	bne.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fcd1 	bl	8005e60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054c2:	e202      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054c8:	e1ff      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80054ca:	bf00      	nop
 80054cc:	58024400 	.word	0x58024400
 80054d0:	03d09000 	.word	0x03d09000
 80054d4:	003d0900 	.word	0x003d0900
 80054d8:	007a1200 	.word	0x007a1200
 80054dc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054e0:	4ba3      	ldr	r3, [pc, #652]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ec:	d107      	bne.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054ee:	f107 0318 	add.w	r3, r7, #24
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fa0c 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054fc:	e1e5      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005502:	e1e2      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005504:	4b9a      	ldr	r3, [pc, #616]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800550c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005510:	d107      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005512:	f107 030c 	add.w	r3, r7, #12
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fb4e 	bl	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005520:	e1d3      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005526:	e1d0      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005528:	4b91      	ldr	r3, [pc, #580]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800552a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005530:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005532:	4b8f      	ldr	r3, [pc, #572]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b04      	cmp	r3, #4
 800553c:	d10c      	bne.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800553e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005540:	2b00      	cmp	r3, #0
 8005542:	d109      	bne.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005544:	4b8a      	ldr	r3, [pc, #552]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	08db      	lsrs	r3, r3, #3
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	4a89      	ldr	r2, [pc, #548]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005550:	fa22 f303 	lsr.w	r3, r2, r3
 8005554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005556:	e01e      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005558:	4b85      	ldr	r3, [pc, #532]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005564:	d106      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8005566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800556c:	d102      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800556e:	4b82      	ldr	r3, [pc, #520]	; (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005572:	e010      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005574:	4b7e      	ldr	r3, [pc, #504]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005580:	d106      	bne.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005588:	d102      	bne.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800558a:	4b7c      	ldr	r3, [pc, #496]	; (800577c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800558c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800558e:	e002      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005594:	e199      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005596:	e198      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005598:	4b79      	ldr	r3, [pc, #484]	; (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800559c:	e195      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055a2:	e192      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055aa:	d173      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80055ac:	4b70      	ldr	r3, [pc, #448]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055bc:	d02f      	beq.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055c4:	d863      	bhi.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80055cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d2:	d012      	beq.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80055d4:	e05b      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055d6:	4b66      	ldr	r3, [pc, #408]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055e2:	d107      	bne.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055e4:	f107 0318 	add.w	r3, r7, #24
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 f991 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055f2:	e16a      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055f8:	e167      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055fa:	4b5d      	ldr	r3, [pc, #372]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005606:	d107      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005608:	f107 030c 	add.w	r3, r7, #12
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fad3 	bl	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005616:	e158      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800561c:	e155      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800561e:	4b54      	ldr	r3, [pc, #336]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005622:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005626:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005628:	4b51      	ldr	r3, [pc, #324]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b04      	cmp	r3, #4
 8005632:	d10c      	bne.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005636:	2b00      	cmp	r3, #0
 8005638:	d109      	bne.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800563a:	4b4d      	ldr	r3, [pc, #308]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	08db      	lsrs	r3, r3, #3
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	4a4b      	ldr	r2, [pc, #300]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005646:	fa22 f303 	lsr.w	r3, r2, r3
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800564c:	e01e      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800564e:	4b48      	ldr	r3, [pc, #288]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800565a:	d106      	bne.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005662:	d102      	bne.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005664:	4b44      	ldr	r3, [pc, #272]	; (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005668:	e010      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800566a:	4b41      	ldr	r3, [pc, #260]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005676:	d106      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800567e:	d102      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005680:	4b3e      	ldr	r3, [pc, #248]	; (800577c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005684:	e002      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005686:	2300      	movs	r3, #0
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800568a:	e11e      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800568c:	e11d      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005692:	e11a      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569a:	d133      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800569c:	4b34      	ldr	r3, [pc, #208]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800569e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b2:	d012      	beq.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80056b4:	e023      	b.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056b6:	4b2e      	ldr	r3, [pc, #184]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c2:	d107      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fbc9 	bl	8005e60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80056d2:	e0fa      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056d8:	e0f7      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056da:	4b25      	ldr	r3, [pc, #148]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056e6:	d107      	bne.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056e8:	f107 0318 	add.w	r3, r7, #24
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 f90f 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80056f6:	e0e8      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056fc:	e0e5      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005702:	e0e2      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800570a:	f040 808f 	bne.w	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800570e:	4b18      	ldr	r3, [pc, #96]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005712:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005716:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800571e:	d075      	beq.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005726:	d87e      	bhi.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572e:	d060      	beq.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005736:	d876      	bhi.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800573e:	d045      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005742:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005746:	d86e      	bhi.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800574e:	d02b      	beq.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005756:	d866      	bhi.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	2b00      	cmp	r3, #0
 800575c:	d004      	beq.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005764:	d00e      	beq.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005766:	e05e      	b.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005768:	f000 f8bc 	bl	80058e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800576c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800576e:	e0ac      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005770:	58024400 	.word	0x58024400
 8005774:	03d09000 	.word	0x03d09000
 8005778:	003d0900 	.word	0x003d0900
 800577c:	007a1200 	.word	0x007a1200
 8005780:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005784:	4b53      	ldr	r3, [pc, #332]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800578c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005790:	d107      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005792:	f107 0318 	add.w	r3, r7, #24
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f8ba 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80057a0:	e093      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057a6:	e090      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057a8:	4b4a      	ldr	r3, [pc, #296]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b4:	d107      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057b6:	f107 030c 	add.w	r3, r7, #12
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f9fc 	bl	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80057c4:	e081      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ca:	e07e      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057cc:	4b41      	ldr	r3, [pc, #260]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d109      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057d8:	4b3e      	ldr	r3, [pc, #248]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	08db      	lsrs	r3, r3, #3
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	4a3d      	ldr	r2, [pc, #244]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80057e4:	fa22 f303 	lsr.w	r3, r2, r3
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80057ea:	e06e      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057f0:	e06b      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80057f2:	4b38      	ldr	r3, [pc, #224]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fe:	d102      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8005800:	4b36      	ldr	r3, [pc, #216]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005804:	e061      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800580a:	e05e      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800580c:	4b31      	ldr	r3, [pc, #196]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005818:	d102      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800581a:	4b31      	ldr	r3, [pc, #196]	; (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800581e:	e054      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005824:	e051      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800582a:	e04e      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005832:	d148      	bne.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005834:	4b27      	ldr	r3, [pc, #156]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005838:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005844:	d02a      	beq.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800584c:	d838      	bhi.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	2b00      	cmp	r3, #0
 8005852:	d004      	beq.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800585a:	d00d      	beq.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800585c:	e030      	b.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800585e:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005866:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800586a:	d102      	bne.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800586c:	4b1c      	ldr	r3, [pc, #112]	; (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005870:	e02b      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005876:	e028      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005878:	4b16      	ldr	r3, [pc, #88]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005884:	d107      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fae8 	bl	8005e60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005894:	e019      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800589a:	e016      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800589c:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058a8:	d107      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058aa:	f107 0318 	add.w	r3, r7, #24
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 f82e 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80058b8:	e007      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058be:	e004      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058c4:	e001      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80058ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3740      	adds	r7, #64	; 0x40
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	58024400 	.word	0x58024400
 80058d8:	03d09000 	.word	0x03d09000
 80058dc:	003d0900 	.word	0x003d0900
 80058e0:	007a1200 	.word	0x007a1200

080058e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80058e8:	f7fe fb8e 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 80058ec:	4602      	mov	r2, r0
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	4904      	ldr	r1, [pc, #16]	; (800590c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80058fa:	5ccb      	ldrb	r3, [r1, r3]
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	58024400 	.word	0x58024400
 800590c:	08007b24 	.word	0x08007b24

08005910 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005910:	b480      	push	{r7}
 8005912:	b089      	sub	sp, #36	; 0x24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005918:	4ba1      	ldr	r3, [pc, #644]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005922:	4b9f      	ldr	r3, [pc, #636]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	0b1b      	lsrs	r3, r3, #12
 8005928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800592c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800592e:	4b9c      	ldr	r3, [pc, #624]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	091b      	lsrs	r3, r3, #4
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800593a:	4b99      	ldr	r3, [pc, #612]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800593c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593e:	08db      	lsrs	r3, r3, #3
 8005940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	fb02 f303 	mul.w	r3, r2, r3
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8111 	beq.w	8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b02      	cmp	r3, #2
 8005962:	f000 8083 	beq.w	8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b02      	cmp	r3, #2
 800596a:	f200 80a1 	bhi.w	8005ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d056      	beq.n	8005a28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800597a:	e099      	b.n	8005ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800597c:	4b88      	ldr	r3, [pc, #544]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d02d      	beq.n	80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005988:	4b85      	ldr	r3, [pc, #532]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	08db      	lsrs	r3, r3, #3
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	4a84      	ldr	r2, [pc, #528]	; (8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
 8005998:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b2:	4b7b      	ldr	r3, [pc, #492]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80059e2:	e087      	b.n	8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80059f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f6:	4b6a      	ldr	r3, [pc, #424]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a26:	e065      	b.n	8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3a:	4b59      	ldr	r3, [pc, #356]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a6a:	e043      	b.n	8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	ee07 3a90 	vmov	s15, r3
 8005a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7e:	4b48      	ldr	r3, [pc, #288]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aae:	e021      	b.n	8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ac2:	4b37      	ldr	r3, [pc, #220]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ad6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005af2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005af4:	4b2a      	ldr	r3, [pc, #168]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	0a5b      	lsrs	r3, r3, #9
 8005afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b1a:	ee17 2a90 	vmov	r2, s15
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005b22:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	0c1b      	lsrs	r3, r3, #16
 8005b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b2c:	ee07 3a90 	vmov	s15, r3
 8005b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b48:	ee17 2a90 	vmov	r2, s15
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005b50:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	0e1b      	lsrs	r3, r3, #24
 8005b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b76:	ee17 2a90 	vmov	r2, s15
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b7e:	e008      	b.n	8005b92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
}
 8005b92:	bf00      	nop
 8005b94:	3724      	adds	r7, #36	; 0x24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	03d09000 	.word	0x03d09000
 8005ba8:	46000000 	.word	0x46000000
 8005bac:	4c742400 	.word	0x4c742400
 8005bb0:	4a742400 	.word	0x4a742400
 8005bb4:	4af42400 	.word	0x4af42400

08005bb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b089      	sub	sp, #36	; 0x24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bc0:	4ba1      	ldr	r3, [pc, #644]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005bca:	4b9f      	ldr	r3, [pc, #636]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	0d1b      	lsrs	r3, r3, #20
 8005bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005bd6:	4b9c      	ldr	r3, [pc, #624]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	0a1b      	lsrs	r3, r3, #8
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005be2:	4b99      	ldr	r3, [pc, #612]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be6:	08db      	lsrs	r3, r3, #3
 8005be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8111 	beq.w	8005e28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	f000 8083 	beq.w	8005d14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	f200 80a1 	bhi.w	8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d056      	beq.n	8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c22:	e099      	b.n	8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c24:	4b88      	ldr	r3, [pc, #544]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d02d      	beq.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c30:	4b85      	ldr	r3, [pc, #532]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	08db      	lsrs	r3, r3, #3
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	4a84      	ldr	r2, [pc, #528]	; (8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5a:	4b7b      	ldr	r3, [pc, #492]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c8a:	e087      	b.n	8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9e:	4b6a      	ldr	r3, [pc, #424]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cce:	e065      	b.n	8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce2:	4b59      	ldr	r3, [pc, #356]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d12:	e043      	b.n	8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d26:	4b48      	ldr	r3, [pc, #288]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d56:	e021      	b.n	8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6a:	4b37      	ldr	r3, [pc, #220]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005d9c:	4b2a      	ldr	r3, [pc, #168]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	0a5b      	lsrs	r3, r3, #9
 8005da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dc2:	ee17 2a90 	vmov	r2, s15
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005dca:	4b1f      	ldr	r3, [pc, #124]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	0c1b      	lsrs	r3, r3, #16
 8005dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd4:	ee07 3a90 	vmov	s15, r3
 8005dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df0:	ee17 2a90 	vmov	r2, s15
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005df8:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	0e1b      	lsrs	r3, r3, #24
 8005dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1e:	ee17 2a90 	vmov	r2, s15
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e26:	e008      	b.n	8005e3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	609a      	str	r2, [r3, #8]
}
 8005e3a:	bf00      	nop
 8005e3c:	3724      	adds	r7, #36	; 0x24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	58024400 	.word	0x58024400
 8005e4c:	03d09000 	.word	0x03d09000
 8005e50:	46000000 	.word	0x46000000
 8005e54:	4c742400 	.word	0x4c742400
 8005e58:	4a742400 	.word	0x4a742400
 8005e5c:	4af42400 	.word	0x4af42400

08005e60 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b089      	sub	sp, #36	; 0x24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e68:	4ba0      	ldr	r3, [pc, #640]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005e72:	4b9e      	ldr	r3, [pc, #632]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	091b      	lsrs	r3, r3, #4
 8005e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e7c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005e7e:	4b9b      	ldr	r3, [pc, #620]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e88:	4b98      	ldr	r3, [pc, #608]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8c:	08db      	lsrs	r3, r3, #3
 8005e8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	fb02 f303 	mul.w	r3, r2, r3
 8005e98:	ee07 3a90 	vmov	s15, r3
 8005e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8111 	beq.w	80060ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	f000 8083 	beq.w	8005fba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	f200 80a1 	bhi.w	8005ffe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d056      	beq.n	8005f76 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005ec8:	e099      	b.n	8005ffe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eca:	4b88      	ldr	r3, [pc, #544]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d02d      	beq.n	8005f32 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ed6:	4b85      	ldr	r3, [pc, #532]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	08db      	lsrs	r3, r3, #3
 8005edc:	f003 0303 	and.w	r3, r3, #3
 8005ee0:	4a83      	ldr	r2, [pc, #524]	; (80060f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f00:	4b7a      	ldr	r3, [pc, #488]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f10:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f14:	eddf 5a77 	vldr	s11, [pc, #476]	; 80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f30:	e087      	b.n	8006042 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	ee07 3a90 	vmov	s15, r3
 8005f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f44:	4b69      	ldr	r3, [pc, #420]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4c:	ee07 3a90 	vmov	s15, r3
 8005f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f54:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f58:	eddf 5a66 	vldr	s11, [pc, #408]	; 80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f74:	e065      	b.n	8006042 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f80:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80060fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f88:	4b58      	ldr	r3, [pc, #352]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f98:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f9c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005fa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fb8:	e043      	b.n	8006042 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fcc:	4b47      	ldr	r3, [pc, #284]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd4:	ee07 3a90 	vmov	s15, r3
 8005fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fe0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ffc:	e021      	b.n	8006042 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	ee07 3a90 	vmov	s15, r3
 8006004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006008:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800600c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006010:	4b36      	ldr	r3, [pc, #216]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006018:	ee07 3a90 	vmov	s15, r3
 800601c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006020:	ed97 6a03 	vldr	s12, [r7, #12]
 8006024:	eddf 5a33 	vldr	s11, [pc, #204]	; 80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006040:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006042:	4b2a      	ldr	r3, [pc, #168]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	0a5b      	lsrs	r3, r3, #9
 8006048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006058:	ee37 7a87 	vadd.f32	s14, s15, s14
 800605c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006068:	ee17 2a90 	vmov	r2, s15
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006070:	4b1e      	ldr	r3, [pc, #120]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	0c1b      	lsrs	r3, r3, #16
 8006076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800608a:	edd7 6a07 	vldr	s13, [r7, #28]
 800608e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006096:	ee17 2a90 	vmov	r2, s15
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800609e:	4b13      	ldr	r3, [pc, #76]	; (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	0e1b      	lsrs	r3, r3, #24
 80060a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a8:	ee07 3a90 	vmov	s15, r3
 80060ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c4:	ee17 2a90 	vmov	r2, s15
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80060cc:	e008      	b.n	80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	609a      	str	r2, [r3, #8]
}
 80060e0:	bf00      	nop
 80060e2:	3724      	adds	r7, #36	; 0x24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	58024400 	.word	0x58024400
 80060f0:	03d09000 	.word	0x03d09000
 80060f4:	46000000 	.word	0x46000000
 80060f8:	4c742400 	.word	0x4c742400
 80060fc:	4a742400 	.word	0x4a742400
 8006100:	4af42400 	.word	0x4af42400

08006104 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006112:	4b53      	ldr	r3, [pc, #332]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 8006114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b03      	cmp	r3, #3
 800611c:	d101      	bne.n	8006122 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e099      	b.n	8006256 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006122:	4b4f      	ldr	r3, [pc, #316]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a4e      	ldr	r2, [pc, #312]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 8006128:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800612c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800612e:	f7fb f83f 	bl	80011b0 <HAL_GetTick>
 8006132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006134:	e008      	b.n	8006148 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006136:	f7fb f83b 	bl	80011b0 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d901      	bls.n	8006148 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e086      	b.n	8006256 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006148:	4b45      	ldr	r3, [pc, #276]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1f0      	bne.n	8006136 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006154:	4b42      	ldr	r3, [pc, #264]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	031b      	lsls	r3, r3, #12
 8006162:	493f      	ldr	r1, [pc, #252]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 8006164:	4313      	orrs	r3, r2
 8006166:	628b      	str	r3, [r1, #40]	; 0x28
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	3b01      	subs	r3, #1
 800616e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	3b01      	subs	r3, #1
 8006178:	025b      	lsls	r3, r3, #9
 800617a:	b29b      	uxth	r3, r3
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	3b01      	subs	r3, #1
 8006184:	041b      	lsls	r3, r3, #16
 8006186:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	3b01      	subs	r3, #1
 8006192:	061b      	lsls	r3, r3, #24
 8006194:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006198:	4931      	ldr	r1, [pc, #196]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 800619a:	4313      	orrs	r3, r2
 800619c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800619e:	4b30      	ldr	r3, [pc, #192]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	492d      	ldr	r1, [pc, #180]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061b0:	4b2b      	ldr	r3, [pc, #172]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	f023 0220 	bic.w	r2, r3, #32
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	4928      	ldr	r1, [pc, #160]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061c2:	4b27      	ldr	r3, [pc, #156]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 80061c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c6:	4a26      	ldr	r2, [pc, #152]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 80061c8:	f023 0310 	bic.w	r3, r3, #16
 80061cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061ce:	4b24      	ldr	r3, [pc, #144]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 80061d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d2:	4b24      	ldr	r3, [pc, #144]	; (8006264 <RCCEx_PLL2_Config+0x160>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	69d2      	ldr	r2, [r2, #28]
 80061da:	00d2      	lsls	r2, r2, #3
 80061dc:	4920      	ldr	r1, [pc, #128]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061e2:	4b1f      	ldr	r3, [pc, #124]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	4a1e      	ldr	r2, [pc, #120]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 80061e8:	f043 0310 	orr.w	r3, r3, #16
 80061ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d106      	bne.n	8006202 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061f4:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	4a19      	ldr	r2, [pc, #100]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 80061fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006200:	e00f      	b.n	8006222 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d106      	bne.n	8006216 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006208:	4b15      	ldr	r3, [pc, #84]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	4a14      	ldr	r2, [pc, #80]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 800620e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006212:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006214:	e005      	b.n	8006222 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006216:	4b12      	ldr	r3, [pc, #72]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	4a11      	ldr	r2, [pc, #68]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 800621c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006220:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006222:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a0e      	ldr	r2, [pc, #56]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 8006228:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800622c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800622e:	f7fa ffbf 	bl	80011b0 <HAL_GetTick>
 8006232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006234:	e008      	b.n	8006248 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006236:	f7fa ffbb 	bl	80011b0 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e006      	b.n	8006256 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <RCCEx_PLL2_Config+0x15c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0f0      	beq.n	8006236 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	58024400 	.word	0x58024400
 8006264:	ffff0007 	.word	0xffff0007

08006268 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006276:	4b53      	ldr	r3, [pc, #332]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b03      	cmp	r3, #3
 8006280:	d101      	bne.n	8006286 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e099      	b.n	80063ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006286:	4b4f      	ldr	r3, [pc, #316]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a4e      	ldr	r2, [pc, #312]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 800628c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006292:	f7fa ff8d 	bl	80011b0 <HAL_GetTick>
 8006296:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006298:	e008      	b.n	80062ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800629a:	f7fa ff89 	bl	80011b0 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e086      	b.n	80063ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062ac:	4b45      	ldr	r3, [pc, #276]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1f0      	bne.n	800629a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062b8:	4b42      	ldr	r3, [pc, #264]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 80062ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	051b      	lsls	r3, r3, #20
 80062c6:	493f      	ldr	r1, [pc, #252]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	628b      	str	r3, [r1, #40]	; 0x28
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	3b01      	subs	r3, #1
 80062dc:	025b      	lsls	r3, r3, #9
 80062de:	b29b      	uxth	r3, r3
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	041b      	lsls	r3, r3, #16
 80062ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	061b      	lsls	r3, r3, #24
 80062f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062fc:	4931      	ldr	r1, [pc, #196]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006302:	4b30      	ldr	r3, [pc, #192]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006306:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	492d      	ldr	r1, [pc, #180]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006310:	4313      	orrs	r3, r2
 8006312:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006314:	4b2b      	ldr	r3, [pc, #172]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	4928      	ldr	r1, [pc, #160]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006322:	4313      	orrs	r3, r2
 8006324:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006326:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	4a26      	ldr	r2, [pc, #152]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 800632c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006332:	4b24      	ldr	r3, [pc, #144]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006336:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <RCCEx_PLL3_Config+0x160>)
 8006338:	4013      	ands	r3, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	69d2      	ldr	r2, [r2, #28]
 800633e:	00d2      	lsls	r2, r2, #3
 8006340:	4920      	ldr	r1, [pc, #128]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006342:	4313      	orrs	r3, r2
 8006344:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006346:	4b1f      	ldr	r3, [pc, #124]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	4a1e      	ldr	r2, [pc, #120]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 800634c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006350:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d106      	bne.n	8006366 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006358:	4b1a      	ldr	r3, [pc, #104]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	4a19      	ldr	r2, [pc, #100]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 800635e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006362:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006364:	e00f      	b.n	8006386 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d106      	bne.n	800637a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800636c:	4b15      	ldr	r3, [pc, #84]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006372:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006376:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006378:	e005      	b.n	8006386 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800637a:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	4a11      	ldr	r2, [pc, #68]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006384:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006386:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a0e      	ldr	r2, [pc, #56]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 800638c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006392:	f7fa ff0d 	bl	80011b0 <HAL_GetTick>
 8006396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006398:	e008      	b.n	80063ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800639a:	f7fa ff09 	bl	80011b0 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e006      	b.n	80063ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <RCCEx_PLL3_Config+0x15c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f0      	beq.n	800639a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	58024400 	.word	0x58024400
 80063c8:	ffff0007 	.word	0xffff0007

080063cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e042      	b.n	8006464 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d106      	bne.n	80063f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7fa fd15 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2224      	movs	r2, #36	; 0x24
 80063fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0201 	bic.w	r2, r2, #1
 800640c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f8c2 	bl	8006598 <UART_SetConfig>
 8006414:	4603      	mov	r3, r0
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e022      	b.n	8006464 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fe16 	bl	8007058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800643a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800644a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fe9d 	bl	800719c <UART_CheckIdleState>
 8006462:	4603      	mov	r3, r0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	; 0x28
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	4613      	mov	r3, r2
 800647a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006482:	2b20      	cmp	r3, #32
 8006484:	f040 8083 	bne.w	800658e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_UART_Transmit+0x28>
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e07b      	b.n	8006590 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_UART_Transmit+0x3a>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e074      	b.n	8006590 <HAL_UART_Transmit+0x124>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2221      	movs	r2, #33	; 0x21
 80064ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064be:	f7fa fe77 	bl	80011b0 <HAL_GetTick>
 80064c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	88fa      	ldrh	r2, [r7, #6]
 80064c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	88fa      	ldrh	r2, [r7, #6]
 80064d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064dc:	d108      	bne.n	80064f0 <HAL_UART_Transmit+0x84>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	e003      	b.n	80064f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006500:	e02c      	b.n	800655c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2200      	movs	r2, #0
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 fe90 	bl	8007232 <UART_WaitOnFlagUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e039      	b.n	8006590 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10b      	bne.n	800653a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006530:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	3302      	adds	r3, #2
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	e007      	b.n	800654a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	781a      	ldrb	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	3301      	adds	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1cc      	bne.n	8006502 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2200      	movs	r2, #0
 8006570:	2140      	movs	r1, #64	; 0x40
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 fe5d 	bl	8007232 <UART_WaitOnFlagUntilTimeout>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e006      	b.n	8006590 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2220      	movs	r2, #32
 8006586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e000      	b.n	8006590 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800658e:	2302      	movs	r3, #2
  }
}
 8006590:	4618      	mov	r0, r3
 8006592:	3720      	adds	r7, #32
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006598:	b5b0      	push	{r4, r5, r7, lr}
 800659a:	b08e      	sub	sp, #56	; 0x38
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	4bbf      	ldr	r3, [pc, #764]	; (80068c4 <UART_SetConfig+0x32c>)
 80065c6:	4013      	ands	r3, r2
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6812      	ldr	r2, [r2, #0]
 80065cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065ce:	430b      	orrs	r3, r1
 80065d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4ab5      	ldr	r2, [pc, #724]	; (80068c8 <UART_SetConfig+0x330>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d004      	beq.n	8006602 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065fe:	4313      	orrs	r3, r2
 8006600:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	4bb0      	ldr	r3, [pc, #704]	; (80068cc <UART_SetConfig+0x334>)
 800660a:	4013      	ands	r3, r2
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006612:	430b      	orrs	r3, r1
 8006614:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	f023 010f 	bic.w	r1, r3, #15
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4aa7      	ldr	r2, [pc, #668]	; (80068d0 <UART_SetConfig+0x338>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d176      	bne.n	8006724 <UART_SetConfig+0x18c>
 8006636:	4ba7      	ldr	r3, [pc, #668]	; (80068d4 <UART_SetConfig+0x33c>)
 8006638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800663e:	2b28      	cmp	r3, #40	; 0x28
 8006640:	d86c      	bhi.n	800671c <UART_SetConfig+0x184>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0xb0>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	080066ed 	.word	0x080066ed
 800664c:	0800671d 	.word	0x0800671d
 8006650:	0800671d 	.word	0x0800671d
 8006654:	0800671d 	.word	0x0800671d
 8006658:	0800671d 	.word	0x0800671d
 800665c:	0800671d 	.word	0x0800671d
 8006660:	0800671d 	.word	0x0800671d
 8006664:	0800671d 	.word	0x0800671d
 8006668:	080066f5 	.word	0x080066f5
 800666c:	0800671d 	.word	0x0800671d
 8006670:	0800671d 	.word	0x0800671d
 8006674:	0800671d 	.word	0x0800671d
 8006678:	0800671d 	.word	0x0800671d
 800667c:	0800671d 	.word	0x0800671d
 8006680:	0800671d 	.word	0x0800671d
 8006684:	0800671d 	.word	0x0800671d
 8006688:	080066fd 	.word	0x080066fd
 800668c:	0800671d 	.word	0x0800671d
 8006690:	0800671d 	.word	0x0800671d
 8006694:	0800671d 	.word	0x0800671d
 8006698:	0800671d 	.word	0x0800671d
 800669c:	0800671d 	.word	0x0800671d
 80066a0:	0800671d 	.word	0x0800671d
 80066a4:	0800671d 	.word	0x0800671d
 80066a8:	08006705 	.word	0x08006705
 80066ac:	0800671d 	.word	0x0800671d
 80066b0:	0800671d 	.word	0x0800671d
 80066b4:	0800671d 	.word	0x0800671d
 80066b8:	0800671d 	.word	0x0800671d
 80066bc:	0800671d 	.word	0x0800671d
 80066c0:	0800671d 	.word	0x0800671d
 80066c4:	0800671d 	.word	0x0800671d
 80066c8:	0800670d 	.word	0x0800670d
 80066cc:	0800671d 	.word	0x0800671d
 80066d0:	0800671d 	.word	0x0800671d
 80066d4:	0800671d 	.word	0x0800671d
 80066d8:	0800671d 	.word	0x0800671d
 80066dc:	0800671d 	.word	0x0800671d
 80066e0:	0800671d 	.word	0x0800671d
 80066e4:	0800671d 	.word	0x0800671d
 80066e8:	08006715 	.word	0x08006715
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066f2:	e222      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80066f4:	2304      	movs	r3, #4
 80066f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066fa:	e21e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80066fc:	2308      	movs	r3, #8
 80066fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006702:	e21a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006704:	2310      	movs	r3, #16
 8006706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800670a:	e216      	b.n	8006b3a <UART_SetConfig+0x5a2>
 800670c:	2320      	movs	r3, #32
 800670e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006712:	e212      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006714:	2340      	movs	r3, #64	; 0x40
 8006716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800671a:	e20e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 800671c:	2380      	movs	r3, #128	; 0x80
 800671e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006722:	e20a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a6b      	ldr	r2, [pc, #428]	; (80068d8 <UART_SetConfig+0x340>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d130      	bne.n	8006790 <UART_SetConfig+0x1f8>
 800672e:	4b69      	ldr	r3, [pc, #420]	; (80068d4 <UART_SetConfig+0x33c>)
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	2b05      	cmp	r3, #5
 8006738:	d826      	bhi.n	8006788 <UART_SetConfig+0x1f0>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <UART_SetConfig+0x1a8>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006759 	.word	0x08006759
 8006744:	08006761 	.word	0x08006761
 8006748:	08006769 	.word	0x08006769
 800674c:	08006771 	.word	0x08006771
 8006750:	08006779 	.word	0x08006779
 8006754:	08006781 	.word	0x08006781
 8006758:	2300      	movs	r3, #0
 800675a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800675e:	e1ec      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006760:	2304      	movs	r3, #4
 8006762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006766:	e1e8      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006768:	2308      	movs	r3, #8
 800676a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800676e:	e1e4      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006770:	2310      	movs	r3, #16
 8006772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006776:	e1e0      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006778:	2320      	movs	r3, #32
 800677a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800677e:	e1dc      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006780:	2340      	movs	r3, #64	; 0x40
 8006782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006786:	e1d8      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006788:	2380      	movs	r3, #128	; 0x80
 800678a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800678e:	e1d4      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a51      	ldr	r2, [pc, #324]	; (80068dc <UART_SetConfig+0x344>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d130      	bne.n	80067fc <UART_SetConfig+0x264>
 800679a:	4b4e      	ldr	r3, [pc, #312]	; (80068d4 <UART_SetConfig+0x33c>)
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	2b05      	cmp	r3, #5
 80067a4:	d826      	bhi.n	80067f4 <UART_SetConfig+0x25c>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <UART_SetConfig+0x214>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067c5 	.word	0x080067c5
 80067b0:	080067cd 	.word	0x080067cd
 80067b4:	080067d5 	.word	0x080067d5
 80067b8:	080067dd 	.word	0x080067dd
 80067bc:	080067e5 	.word	0x080067e5
 80067c0:	080067ed 	.word	0x080067ed
 80067c4:	2300      	movs	r3, #0
 80067c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ca:	e1b6      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067cc:	2304      	movs	r3, #4
 80067ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067d2:	e1b2      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067d4:	2308      	movs	r3, #8
 80067d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067da:	e1ae      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067dc:	2310      	movs	r3, #16
 80067de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067e2:	e1aa      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067e4:	2320      	movs	r3, #32
 80067e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ea:	e1a6      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067ec:	2340      	movs	r3, #64	; 0x40
 80067ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067f2:	e1a2      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067f4:	2380      	movs	r3, #128	; 0x80
 80067f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fa:	e19e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a37      	ldr	r2, [pc, #220]	; (80068e0 <UART_SetConfig+0x348>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d130      	bne.n	8006868 <UART_SetConfig+0x2d0>
 8006806:	4b33      	ldr	r3, [pc, #204]	; (80068d4 <UART_SetConfig+0x33c>)
 8006808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	2b05      	cmp	r3, #5
 8006810:	d826      	bhi.n	8006860 <UART_SetConfig+0x2c8>
 8006812:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <UART_SetConfig+0x280>)
 8006814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006818:	08006831 	.word	0x08006831
 800681c:	08006839 	.word	0x08006839
 8006820:	08006841 	.word	0x08006841
 8006824:	08006849 	.word	0x08006849
 8006828:	08006851 	.word	0x08006851
 800682c:	08006859 	.word	0x08006859
 8006830:	2300      	movs	r3, #0
 8006832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006836:	e180      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006838:	2304      	movs	r3, #4
 800683a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800683e:	e17c      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006840:	2308      	movs	r3, #8
 8006842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006846:	e178      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006848:	2310      	movs	r3, #16
 800684a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800684e:	e174      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006850:	2320      	movs	r3, #32
 8006852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006856:	e170      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006858:	2340      	movs	r3, #64	; 0x40
 800685a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800685e:	e16c      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006860:	2380      	movs	r3, #128	; 0x80
 8006862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006866:	e168      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <UART_SetConfig+0x34c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d142      	bne.n	80068f8 <UART_SetConfig+0x360>
 8006872:	4b18      	ldr	r3, [pc, #96]	; (80068d4 <UART_SetConfig+0x33c>)
 8006874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	2b05      	cmp	r3, #5
 800687c:	d838      	bhi.n	80068f0 <UART_SetConfig+0x358>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <UART_SetConfig+0x2ec>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	0800689d 	.word	0x0800689d
 8006888:	080068a5 	.word	0x080068a5
 800688c:	080068ad 	.word	0x080068ad
 8006890:	080068b5 	.word	0x080068b5
 8006894:	080068bd 	.word	0x080068bd
 8006898:	080068e9 	.word	0x080068e9
 800689c:	2300      	movs	r3, #0
 800689e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a2:	e14a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068a4:	2304      	movs	r3, #4
 80068a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068aa:	e146      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068ac:	2308      	movs	r3, #8
 80068ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068b2:	e142      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068b4:	2310      	movs	r3, #16
 80068b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ba:	e13e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068bc:	2320      	movs	r3, #32
 80068be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c2:	e13a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068c4:	cfff69f3 	.word	0xcfff69f3
 80068c8:	58000c00 	.word	0x58000c00
 80068cc:	11fff4ff 	.word	0x11fff4ff
 80068d0:	40011000 	.word	0x40011000
 80068d4:	58024400 	.word	0x58024400
 80068d8:	40004400 	.word	0x40004400
 80068dc:	40004800 	.word	0x40004800
 80068e0:	40004c00 	.word	0x40004c00
 80068e4:	40005000 	.word	0x40005000
 80068e8:	2340      	movs	r3, #64	; 0x40
 80068ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ee:	e124      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068f0:	2380      	movs	r3, #128	; 0x80
 80068f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068f6:	e120      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4acc      	ldr	r2, [pc, #816]	; (8006c30 <UART_SetConfig+0x698>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d176      	bne.n	80069f0 <UART_SetConfig+0x458>
 8006902:	4bcc      	ldr	r3, [pc, #816]	; (8006c34 <UART_SetConfig+0x69c>)
 8006904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800690a:	2b28      	cmp	r3, #40	; 0x28
 800690c:	d86c      	bhi.n	80069e8 <UART_SetConfig+0x450>
 800690e:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <UART_SetConfig+0x37c>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	080069b9 	.word	0x080069b9
 8006918:	080069e9 	.word	0x080069e9
 800691c:	080069e9 	.word	0x080069e9
 8006920:	080069e9 	.word	0x080069e9
 8006924:	080069e9 	.word	0x080069e9
 8006928:	080069e9 	.word	0x080069e9
 800692c:	080069e9 	.word	0x080069e9
 8006930:	080069e9 	.word	0x080069e9
 8006934:	080069c1 	.word	0x080069c1
 8006938:	080069e9 	.word	0x080069e9
 800693c:	080069e9 	.word	0x080069e9
 8006940:	080069e9 	.word	0x080069e9
 8006944:	080069e9 	.word	0x080069e9
 8006948:	080069e9 	.word	0x080069e9
 800694c:	080069e9 	.word	0x080069e9
 8006950:	080069e9 	.word	0x080069e9
 8006954:	080069c9 	.word	0x080069c9
 8006958:	080069e9 	.word	0x080069e9
 800695c:	080069e9 	.word	0x080069e9
 8006960:	080069e9 	.word	0x080069e9
 8006964:	080069e9 	.word	0x080069e9
 8006968:	080069e9 	.word	0x080069e9
 800696c:	080069e9 	.word	0x080069e9
 8006970:	080069e9 	.word	0x080069e9
 8006974:	080069d1 	.word	0x080069d1
 8006978:	080069e9 	.word	0x080069e9
 800697c:	080069e9 	.word	0x080069e9
 8006980:	080069e9 	.word	0x080069e9
 8006984:	080069e9 	.word	0x080069e9
 8006988:	080069e9 	.word	0x080069e9
 800698c:	080069e9 	.word	0x080069e9
 8006990:	080069e9 	.word	0x080069e9
 8006994:	080069d9 	.word	0x080069d9
 8006998:	080069e9 	.word	0x080069e9
 800699c:	080069e9 	.word	0x080069e9
 80069a0:	080069e9 	.word	0x080069e9
 80069a4:	080069e9 	.word	0x080069e9
 80069a8:	080069e9 	.word	0x080069e9
 80069ac:	080069e9 	.word	0x080069e9
 80069b0:	080069e9 	.word	0x080069e9
 80069b4:	080069e1 	.word	0x080069e1
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069be:	e0bc      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069c0:	2304      	movs	r3, #4
 80069c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069c6:	e0b8      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069c8:	2308      	movs	r3, #8
 80069ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ce:	e0b4      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069d0:	2310      	movs	r3, #16
 80069d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069d6:	e0b0      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069d8:	2320      	movs	r3, #32
 80069da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069de:	e0ac      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069e0:	2340      	movs	r3, #64	; 0x40
 80069e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069e6:	e0a8      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069e8:	2380      	movs	r3, #128	; 0x80
 80069ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ee:	e0a4      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a90      	ldr	r2, [pc, #576]	; (8006c38 <UART_SetConfig+0x6a0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d130      	bne.n	8006a5c <UART_SetConfig+0x4c4>
 80069fa:	4b8e      	ldr	r3, [pc, #568]	; (8006c34 <UART_SetConfig+0x69c>)
 80069fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	2b05      	cmp	r3, #5
 8006a04:	d826      	bhi.n	8006a54 <UART_SetConfig+0x4bc>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <UART_SetConfig+0x474>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a25 	.word	0x08006a25
 8006a10:	08006a2d 	.word	0x08006a2d
 8006a14:	08006a35 	.word	0x08006a35
 8006a18:	08006a3d 	.word	0x08006a3d
 8006a1c:	08006a45 	.word	0x08006a45
 8006a20:	08006a4d 	.word	0x08006a4d
 8006a24:	2300      	movs	r3, #0
 8006a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a2a:	e086      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a32:	e082      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a34:	2308      	movs	r3, #8
 8006a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a3a:	e07e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a42:	e07a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a44:	2320      	movs	r3, #32
 8006a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a4a:	e076      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a4c:	2340      	movs	r3, #64	; 0x40
 8006a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a52:	e072      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a54:	2380      	movs	r3, #128	; 0x80
 8006a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a5a:	e06e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a76      	ldr	r2, [pc, #472]	; (8006c3c <UART_SetConfig+0x6a4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d130      	bne.n	8006ac8 <UART_SetConfig+0x530>
 8006a66:	4b73      	ldr	r3, [pc, #460]	; (8006c34 <UART_SetConfig+0x69c>)
 8006a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	2b05      	cmp	r3, #5
 8006a70:	d826      	bhi.n	8006ac0 <UART_SetConfig+0x528>
 8006a72:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <UART_SetConfig+0x4e0>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006a91 	.word	0x08006a91
 8006a7c:	08006a99 	.word	0x08006a99
 8006a80:	08006aa1 	.word	0x08006aa1
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006ab1 	.word	0x08006ab1
 8006a8c:	08006ab9 	.word	0x08006ab9
 8006a90:	2300      	movs	r3, #0
 8006a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a96:	e050      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a98:	2304      	movs	r3, #4
 8006a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a9e:	e04c      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa6:	e048      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aae:	e044      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006ab0:	2320      	movs	r3, #32
 8006ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ab6:	e040      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006ab8:	2340      	movs	r3, #64	; 0x40
 8006aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006abe:	e03c      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006ac0:	2380      	movs	r3, #128	; 0x80
 8006ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac6:	e038      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a5c      	ldr	r2, [pc, #368]	; (8006c40 <UART_SetConfig+0x6a8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d130      	bne.n	8006b34 <UART_SetConfig+0x59c>
 8006ad2:	4b58      	ldr	r3, [pc, #352]	; (8006c34 <UART_SetConfig+0x69c>)
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d826      	bhi.n	8006b2c <UART_SetConfig+0x594>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <UART_SetConfig+0x54c>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006afd 	.word	0x08006afd
 8006ae8:	08006b05 	.word	0x08006b05
 8006aec:	08006b0d 	.word	0x08006b0d
 8006af0:	08006b15 	.word	0x08006b15
 8006af4:	08006b1d 	.word	0x08006b1d
 8006af8:	08006b25 	.word	0x08006b25
 8006afc:	2302      	movs	r3, #2
 8006afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b02:	e01a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b04:	2304      	movs	r3, #4
 8006b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b0a:	e016      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b0c:	2308      	movs	r3, #8
 8006b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b12:	e012      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b14:	2310      	movs	r3, #16
 8006b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b1a:	e00e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b1c:	2320      	movs	r3, #32
 8006b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b22:	e00a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b24:	2340      	movs	r3, #64	; 0x40
 8006b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b2a:	e006      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b32:	e002      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b34:	2380      	movs	r3, #128	; 0x80
 8006b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a40      	ldr	r2, [pc, #256]	; (8006c40 <UART_SetConfig+0x6a8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	f040 80ef 	bne.w	8006d24 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	dc46      	bgt.n	8006bdc <UART_SetConfig+0x644>
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	f2c0 8081 	blt.w	8006c56 <UART_SetConfig+0x6be>
 8006b54:	3b02      	subs	r3, #2
 8006b56:	2b1e      	cmp	r3, #30
 8006b58:	d87d      	bhi.n	8006c56 <UART_SetConfig+0x6be>
 8006b5a:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <UART_SetConfig+0x5c8>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006be3 	.word	0x08006be3
 8006b64:	08006c57 	.word	0x08006c57
 8006b68:	08006beb 	.word	0x08006beb
 8006b6c:	08006c57 	.word	0x08006c57
 8006b70:	08006c57 	.word	0x08006c57
 8006b74:	08006c57 	.word	0x08006c57
 8006b78:	08006bfb 	.word	0x08006bfb
 8006b7c:	08006c57 	.word	0x08006c57
 8006b80:	08006c57 	.word	0x08006c57
 8006b84:	08006c57 	.word	0x08006c57
 8006b88:	08006c57 	.word	0x08006c57
 8006b8c:	08006c57 	.word	0x08006c57
 8006b90:	08006c57 	.word	0x08006c57
 8006b94:	08006c57 	.word	0x08006c57
 8006b98:	08006c0b 	.word	0x08006c0b
 8006b9c:	08006c57 	.word	0x08006c57
 8006ba0:	08006c57 	.word	0x08006c57
 8006ba4:	08006c57 	.word	0x08006c57
 8006ba8:	08006c57 	.word	0x08006c57
 8006bac:	08006c57 	.word	0x08006c57
 8006bb0:	08006c57 	.word	0x08006c57
 8006bb4:	08006c57 	.word	0x08006c57
 8006bb8:	08006c57 	.word	0x08006c57
 8006bbc:	08006c57 	.word	0x08006c57
 8006bc0:	08006c57 	.word	0x08006c57
 8006bc4:	08006c57 	.word	0x08006c57
 8006bc8:	08006c57 	.word	0x08006c57
 8006bcc:	08006c57 	.word	0x08006c57
 8006bd0:	08006c57 	.word	0x08006c57
 8006bd4:	08006c57 	.word	0x08006c57
 8006bd8:	08006c49 	.word	0x08006c49
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	d036      	beq.n	8006c4e <UART_SetConfig+0x6b6>
 8006be0:	e039      	b.n	8006c56 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006be2:	f7fe fe7f 	bl	80058e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006be6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006be8:	e03b      	b.n	8006c62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bea:	f107 0314 	add.w	r3, r7, #20
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe fe8e 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bf8:	e033      	b.n	8006c62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bfa:	f107 0308 	add.w	r3, r7, #8
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe ffda 	bl	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c08:	e02b      	b.n	8006c62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <UART_SetConfig+0x69c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c16:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <UART_SetConfig+0x69c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	08db      	lsrs	r3, r3, #3
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	4a08      	ldr	r2, [pc, #32]	; (8006c44 <UART_SetConfig+0x6ac>)
 8006c22:	fa22 f303 	lsr.w	r3, r2, r3
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c28:	e01b      	b.n	8006c62 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006c2a:	4b06      	ldr	r3, [pc, #24]	; (8006c44 <UART_SetConfig+0x6ac>)
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c2e:	e018      	b.n	8006c62 <UART_SetConfig+0x6ca>
 8006c30:	40011400 	.word	0x40011400
 8006c34:	58024400 	.word	0x58024400
 8006c38:	40007800 	.word	0x40007800
 8006c3c:	40007c00 	.word	0x40007c00
 8006c40:	58000c00 	.word	0x58000c00
 8006c44:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c48:	4bc4      	ldr	r3, [pc, #784]	; (8006f5c <UART_SetConfig+0x9c4>)
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c4c:	e009      	b.n	8006c62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c54:	e005      	b.n	8006c62 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006c60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 81da 	beq.w	800701e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	4abc      	ldr	r2, [pc, #752]	; (8006f60 <UART_SetConfig+0x9c8>)
 8006c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c74:	461a      	mov	r2, r3
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c7c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4413      	add	r3, r2
 8006c88:	6a3a      	ldr	r2, [r7, #32]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d305      	bcc.n	8006c9a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c94:	6a3a      	ldr	r2, [r7, #32]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d903      	bls.n	8006ca2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ca0:	e1bd      	b.n	800701e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f04f 0100 	mov.w	r1, #0
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	4aac      	ldr	r2, [pc, #688]	; (8006f60 <UART_SetConfig+0x9c8>)
 8006cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	f04f 0300 	mov.w	r3, #0
 8006cba:	f7f9 fb0d 	bl	80002d8 <__aeabi_uldivmod>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	f04f 0300 	mov.w	r3, #0
 8006cce:	020b      	lsls	r3, r1, #8
 8006cd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cd4:	0202      	lsls	r2, r0, #8
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	6849      	ldr	r1, [r1, #4]
 8006cda:	0849      	lsrs	r1, r1, #1
 8006cdc:	4608      	mov	r0, r1
 8006cde:	f04f 0100 	mov.w	r1, #0
 8006ce2:	1814      	adds	r4, r2, r0
 8006ce4:	eb43 0501 	adc.w	r5, r3, r1
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	461a      	mov	r2, r3
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	f7f9 faef 	bl	80002d8 <__aeabi_uldivmod>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4613      	mov	r3, r2
 8006d00:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d08:	d308      	bcc.n	8006d1c <UART_SetConfig+0x784>
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d10:	d204      	bcs.n	8006d1c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	e180      	b.n	800701e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006d22:	e17c      	b.n	800701e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d2c:	f040 80bf 	bne.w	8006eae <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006d30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	dc49      	bgt.n	8006dcc <UART_SetConfig+0x834>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	db7c      	blt.n	8006e36 <UART_SetConfig+0x89e>
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d87a      	bhi.n	8006e36 <UART_SetConfig+0x89e>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0x7b0>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006dd3 	.word	0x08006dd3
 8006d4c:	08006ddb 	.word	0x08006ddb
 8006d50:	08006e37 	.word	0x08006e37
 8006d54:	08006e37 	.word	0x08006e37
 8006d58:	08006de3 	.word	0x08006de3
 8006d5c:	08006e37 	.word	0x08006e37
 8006d60:	08006e37 	.word	0x08006e37
 8006d64:	08006e37 	.word	0x08006e37
 8006d68:	08006df3 	.word	0x08006df3
 8006d6c:	08006e37 	.word	0x08006e37
 8006d70:	08006e37 	.word	0x08006e37
 8006d74:	08006e37 	.word	0x08006e37
 8006d78:	08006e37 	.word	0x08006e37
 8006d7c:	08006e37 	.word	0x08006e37
 8006d80:	08006e37 	.word	0x08006e37
 8006d84:	08006e37 	.word	0x08006e37
 8006d88:	08006e03 	.word	0x08006e03
 8006d8c:	08006e37 	.word	0x08006e37
 8006d90:	08006e37 	.word	0x08006e37
 8006d94:	08006e37 	.word	0x08006e37
 8006d98:	08006e37 	.word	0x08006e37
 8006d9c:	08006e37 	.word	0x08006e37
 8006da0:	08006e37 	.word	0x08006e37
 8006da4:	08006e37 	.word	0x08006e37
 8006da8:	08006e37 	.word	0x08006e37
 8006dac:	08006e37 	.word	0x08006e37
 8006db0:	08006e37 	.word	0x08006e37
 8006db4:	08006e37 	.word	0x08006e37
 8006db8:	08006e37 	.word	0x08006e37
 8006dbc:	08006e37 	.word	0x08006e37
 8006dc0:	08006e37 	.word	0x08006e37
 8006dc4:	08006e37 	.word	0x08006e37
 8006dc8:	08006e29 	.word	0x08006e29
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	d02e      	beq.n	8006e2e <UART_SetConfig+0x896>
 8006dd0:	e031      	b.n	8006e36 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd2:	f7fd f949 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8006dd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006dd8:	e033      	b.n	8006e42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dda:	f7fd f95b 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 8006dde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006de0:	e02f      	b.n	8006e42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006de2:	f107 0314 	add.w	r3, r7, #20
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe fd92 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006df0:	e027      	b.n	8006e42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe fede 	bl	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e00:	e01f      	b.n	8006e42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e02:	4b58      	ldr	r3, [pc, #352]	; (8006f64 <UART_SetConfig+0x9cc>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e0e:	4b55      	ldr	r3, [pc, #340]	; (8006f64 <UART_SetConfig+0x9cc>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	08db      	lsrs	r3, r3, #3
 8006e14:	f003 0303 	and.w	r3, r3, #3
 8006e18:	4a53      	ldr	r2, [pc, #332]	; (8006f68 <UART_SetConfig+0x9d0>)
 8006e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e20:	e00f      	b.n	8006e42 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006e22:	4b51      	ldr	r3, [pc, #324]	; (8006f68 <UART_SetConfig+0x9d0>)
 8006e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e26:	e00c      	b.n	8006e42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e28:	4b4c      	ldr	r3, [pc, #304]	; (8006f5c <UART_SetConfig+0x9c4>)
 8006e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e2c:	e009      	b.n	8006e42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e34:	e005      	b.n	8006e42 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80ea 	beq.w	800701e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	4a44      	ldr	r2, [pc, #272]	; (8006f60 <UART_SetConfig+0x9c8>)
 8006e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e54:	461a      	mov	r2, r3
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e5c:	005a      	lsls	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	085b      	lsrs	r3, r3, #1
 8006e64:	441a      	add	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	2b0f      	cmp	r3, #15
 8006e76:	d916      	bls.n	8006ea6 <UART_SetConfig+0x90e>
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e7e:	d212      	bcs.n	8006ea6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f023 030f 	bic.w	r3, r3, #15
 8006e88:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ea2:	60da      	str	r2, [r3, #12]
 8006ea4:	e0bb      	b.n	800701e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006eac:	e0b7      	b.n	800701e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	dc4a      	bgt.n	8006f4c <UART_SetConfig+0x9b4>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f2c0 8086 	blt.w	8006fc8 <UART_SetConfig+0xa30>
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	f200 8083 	bhi.w	8006fc8 <UART_SetConfig+0xa30>
 8006ec2:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <UART_SetConfig+0x930>)
 8006ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec8:	08006f53 	.word	0x08006f53
 8006ecc:	08006f6d 	.word	0x08006f6d
 8006ed0:	08006fc9 	.word	0x08006fc9
 8006ed4:	08006fc9 	.word	0x08006fc9
 8006ed8:	08006f75 	.word	0x08006f75
 8006edc:	08006fc9 	.word	0x08006fc9
 8006ee0:	08006fc9 	.word	0x08006fc9
 8006ee4:	08006fc9 	.word	0x08006fc9
 8006ee8:	08006f85 	.word	0x08006f85
 8006eec:	08006fc9 	.word	0x08006fc9
 8006ef0:	08006fc9 	.word	0x08006fc9
 8006ef4:	08006fc9 	.word	0x08006fc9
 8006ef8:	08006fc9 	.word	0x08006fc9
 8006efc:	08006fc9 	.word	0x08006fc9
 8006f00:	08006fc9 	.word	0x08006fc9
 8006f04:	08006fc9 	.word	0x08006fc9
 8006f08:	08006f95 	.word	0x08006f95
 8006f0c:	08006fc9 	.word	0x08006fc9
 8006f10:	08006fc9 	.word	0x08006fc9
 8006f14:	08006fc9 	.word	0x08006fc9
 8006f18:	08006fc9 	.word	0x08006fc9
 8006f1c:	08006fc9 	.word	0x08006fc9
 8006f20:	08006fc9 	.word	0x08006fc9
 8006f24:	08006fc9 	.word	0x08006fc9
 8006f28:	08006fc9 	.word	0x08006fc9
 8006f2c:	08006fc9 	.word	0x08006fc9
 8006f30:	08006fc9 	.word	0x08006fc9
 8006f34:	08006fc9 	.word	0x08006fc9
 8006f38:	08006fc9 	.word	0x08006fc9
 8006f3c:	08006fc9 	.word	0x08006fc9
 8006f40:	08006fc9 	.word	0x08006fc9
 8006f44:	08006fc9 	.word	0x08006fc9
 8006f48:	08006fbb 	.word	0x08006fbb
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	d037      	beq.n	8006fc0 <UART_SetConfig+0xa28>
 8006f50:	e03a      	b.n	8006fc8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f52:	f7fd f889 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8006f56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f58:	e03c      	b.n	8006fd4 <UART_SetConfig+0xa3c>
 8006f5a:	bf00      	nop
 8006f5c:	003d0900 	.word	0x003d0900
 8006f60:	08007b34 	.word	0x08007b34
 8006f64:	58024400 	.word	0x58024400
 8006f68:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f6c:	f7fd f892 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 8006f70:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f72:	e02f      	b.n	8006fd4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f74:	f107 0314 	add.w	r3, r7, #20
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe fcc9 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f82:	e027      	b.n	8006fd4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f84:	f107 0308 	add.w	r3, r7, #8
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe fe15 	bl	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f92:	e01f      	b.n	8006fd4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f94:	4b2c      	ldr	r3, [pc, #176]	; (8007048 <UART_SetConfig+0xab0>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0320 	and.w	r3, r3, #32
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d009      	beq.n	8006fb4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fa0:	4b29      	ldr	r3, [pc, #164]	; (8007048 <UART_SetConfig+0xab0>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	08db      	lsrs	r3, r3, #3
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	4a28      	ldr	r2, [pc, #160]	; (800704c <UART_SetConfig+0xab4>)
 8006fac:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fb2:	e00f      	b.n	8006fd4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006fb4:	4b25      	ldr	r3, [pc, #148]	; (800704c <UART_SetConfig+0xab4>)
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fb8:	e00c      	b.n	8006fd4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fba:	4b25      	ldr	r3, [pc, #148]	; (8007050 <UART_SetConfig+0xab8>)
 8006fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fbe:	e009      	b.n	8006fd4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fc6:	e005      	b.n	8006fd4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006fd2:	bf00      	nop
    }

    if (pclk != 0U)
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d021      	beq.n	800701e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	4a1d      	ldr	r2, [pc, #116]	; (8007054 <UART_SetConfig+0xabc>)
 8006fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	085b      	lsrs	r3, r3, #1
 8006ff2:	441a      	add	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	2b0f      	cmp	r3, #15
 8007004:	d908      	bls.n	8007018 <UART_SetConfig+0xa80>
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700c:	d204      	bcs.n	8007018 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007014:	60da      	str	r2, [r3, #12]
 8007016:	e002      	b.n	800701e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800703a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800703e:	4618      	mov	r0, r3
 8007040:	3738      	adds	r7, #56	; 0x38
 8007042:	46bd      	mov	sp, r7
 8007044:	bdb0      	pop	{r4, r5, r7, pc}
 8007046:	bf00      	nop
 8007048:	58024400 	.word	0x58024400
 800704c:	03d09000 	.word	0x03d09000
 8007050:	003d0900 	.word	0x003d0900
 8007054:	08007b34 	.word	0x08007b34

08007058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007134:	2b00      	cmp	r3, #0
 8007136:	d01a      	beq.n	800716e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007156:	d10a      	bne.n	800716e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]
  }
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071ac:	f7fa f800 	bl	80011b0 <HAL_GetTick>
 80071b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d10e      	bne.n	80071de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f82f 	bl	8007232 <UART_WaitOnFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e025      	b.n	800722a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d10e      	bne.n	800720a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f819 	bl	8007232 <UART_WaitOnFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e00f      	b.n	800722a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	603b      	str	r3, [r7, #0]
 800723e:	4613      	mov	r3, r2
 8007240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007242:	e062      	b.n	800730a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724a:	d05e      	beq.n	800730a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800724c:	f7f9 ffb0 	bl	80011b0 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	429a      	cmp	r2, r3
 800725a:	d302      	bcc.n	8007262 <UART_WaitOnFlagUntilTimeout+0x30>
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d11d      	bne.n	800729e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007270:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0201 	bic.w	r2, r2, #1
 8007280:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2220      	movs	r2, #32
 800728e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e045      	b.n	800732a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d02e      	beq.n	800730a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ba:	d126      	bne.n	800730a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0201 	bic.w	r2, r2, #1
 80072e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e00f      	b.n	800732a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69da      	ldr	r2, [r3, #28]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4013      	ands	r3, r2
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	429a      	cmp	r2, r3
 8007318:	bf0c      	ite	eq
 800731a:	2301      	moveq	r3, #1
 800731c:	2300      	movne	r3, #0
 800731e:	b2db      	uxtb	r3, r3
 8007320:	461a      	mov	r2, r3
 8007322:	79fb      	ldrb	r3, [r7, #7]
 8007324:	429a      	cmp	r2, r3
 8007326:	d08d      	beq.n	8007244 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007332:	b480      	push	{r7}
 8007334:	b085      	sub	sp, #20
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_UARTEx_DisableFifoMode+0x16>
 8007344:	2302      	movs	r3, #2
 8007346:	e027      	b.n	8007398 <HAL_UARTEx_DisableFifoMode+0x66>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2224      	movs	r2, #36	; 0x24
 8007354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0201 	bic.w	r2, r2, #1
 800736e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007376:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e02d      	b.n	8007418 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2224      	movs	r2, #36	; 0x24
 80073c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0201 	bic.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f84f 	bl	800749c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007434:	2302      	movs	r3, #2
 8007436:	e02d      	b.n	8007494 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2224      	movs	r2, #36	; 0x24
 8007444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0201 	bic.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f811 	bl	800749c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d108      	bne.n	80074be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074bc:	e031      	b.n	8007522 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074be:	2310      	movs	r3, #16
 80074c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074c2:	2310      	movs	r3, #16
 80074c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	0e5b      	lsrs	r3, r3, #25
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	f003 0307 	and.w	r3, r3, #7
 80074d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	0f5b      	lsrs	r3, r3, #29
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	f003 0307 	and.w	r3, r3, #7
 80074e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	7b3a      	ldrb	r2, [r7, #12]
 80074ea:	4911      	ldr	r1, [pc, #68]	; (8007530 <UARTEx_SetNbDataToProcess+0x94>)
 80074ec:	5c8a      	ldrb	r2, [r1, r2]
 80074ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074f2:	7b3a      	ldrb	r2, [r7, #12]
 80074f4:	490f      	ldr	r1, [pc, #60]	; (8007534 <UARTEx_SetNbDataToProcess+0x98>)
 80074f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	7b7a      	ldrb	r2, [r7, #13]
 8007508:	4909      	ldr	r1, [pc, #36]	; (8007530 <UARTEx_SetNbDataToProcess+0x94>)
 800750a:	5c8a      	ldrb	r2, [r1, r2]
 800750c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007510:	7b7a      	ldrb	r2, [r7, #13]
 8007512:	4908      	ldr	r1, [pc, #32]	; (8007534 <UARTEx_SetNbDataToProcess+0x98>)
 8007514:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007516:	fb93 f3f2 	sdiv	r3, r3, r2
 800751a:	b29a      	uxth	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007522:	bf00      	nop
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	08007b4c 	.word	0x08007b4c
 8007534:	08007b54 	.word	0x08007b54

08007538 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007538:	b084      	sub	sp, #16
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	f107 001c 	add.w	r0, r7, #28
 8007546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2b01      	cmp	r3, #1
 800754e:	d120      	bne.n	8007592 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68da      	ldr	r2, [r3, #12]
 8007560:	4b2a      	ldr	r3, [pc, #168]	; (800760c <USB_CoreInit+0xd4>)
 8007562:	4013      	ands	r3, r2
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007576:	2b01      	cmp	r3, #1
 8007578:	d105      	bne.n	8007586 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fa60 	bl	8007a4c <USB_CoreReset>
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]
 8007590:	e01a      	b.n	80075c8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa54 	bl	8007a4c <USB_CoreReset>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80075a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38
 80075ba:	e005      	b.n	80075c8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d116      	bne.n	80075fc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80075dc:	4b0c      	ldr	r3, [pc, #48]	; (8007610 <USB_CoreInit+0xd8>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f043 0206 	orr.w	r2, r3, #6
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f043 0220 	orr.w	r2, r3, #32
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007608:	b004      	add	sp, #16
 800760a:	4770      	bx	lr
 800760c:	ffbdffbf 	.word	0xffbdffbf
 8007610:	03ee0000 	.word	0x03ee0000

08007614 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f023 0201 	bic.w	r2, r3, #1
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d106      	bne.n	8007662 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	60da      	str	r2, [r3, #12]
 8007660:	e00b      	b.n	800767a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	60da      	str	r2, [r3, #12]
 8007674:	e001      	b.n	800767a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e003      	b.n	8007682 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800767a:	2032      	movs	r0, #50	; 0x32
 800767c:	f7f9 fda4 	bl	80011c8 <HAL_Delay>

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800768c:	b084      	sub	sp, #16
 800768e:	b580      	push	{r7, lr}
 8007690:	b086      	sub	sp, #24
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800769a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]
 80076aa:	e009      	b.n	80076c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	3340      	adds	r3, #64	; 0x40
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	2200      	movs	r2, #0
 80076b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	3301      	adds	r3, #1
 80076be:	613b      	str	r3, [r7, #16]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	2b0e      	cmp	r3, #14
 80076c4:	d9f2      	bls.n	80076ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d11c      	bne.n	8007706 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076da:	f043 0302 	orr.w	r3, r3, #2
 80076de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	e005      	b.n	8007712 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007718:	461a      	mov	r2, r3
 800771a:	2300      	movs	r3, #0
 800771c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007724:	4619      	mov	r1, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772c:	461a      	mov	r2, r3
 800772e:	680b      	ldr	r3, [r1, #0]
 8007730:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	2b01      	cmp	r3, #1
 8007736:	d10c      	bne.n	8007752 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	2b00      	cmp	r3, #0
 800773c:	d104      	bne.n	8007748 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800773e:	2100      	movs	r1, #0
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f949 	bl	80079d8 <USB_SetDevSpeed>
 8007746:	e008      	b.n	800775a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007748:	2101      	movs	r1, #1
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f944 	bl	80079d8 <USB_SetDevSpeed>
 8007750:	e003      	b.n	800775a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007752:	2103      	movs	r1, #3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f93f 	bl	80079d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800775a:	2110      	movs	r1, #16
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f8f3 	bl	8007948 <USB_FlushTxFifo>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f911 	bl	8007994 <USB_FlushRxFifo>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007782:	461a      	mov	r2, r3
 8007784:	2300      	movs	r3, #0
 8007786:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778e:	461a      	mov	r2, r3
 8007790:	2300      	movs	r3, #0
 8007792:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779a:	461a      	mov	r2, r3
 800779c:	2300      	movs	r3, #0
 800779e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077a0:	2300      	movs	r3, #0
 80077a2:	613b      	str	r3, [r7, #16]
 80077a4:	e043      	b.n	800782e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077bc:	d118      	bne.n	80077f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10a      	bne.n	80077da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d0:	461a      	mov	r2, r3
 80077d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	e013      	b.n	8007802 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e6:	461a      	mov	r2, r3
 80077e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	e008      	b.n	8007802 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fc:	461a      	mov	r2, r3
 80077fe:	2300      	movs	r3, #0
 8007800:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780e:	461a      	mov	r2, r3
 8007810:	2300      	movs	r3, #0
 8007812:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007820:	461a      	mov	r2, r3
 8007822:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007826:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	3301      	adds	r3, #1
 800782c:	613b      	str	r3, [r7, #16]
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	429a      	cmp	r2, r3
 8007834:	d3b7      	bcc.n	80077a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007836:	2300      	movs	r3, #0
 8007838:	613b      	str	r3, [r7, #16]
 800783a:	e043      	b.n	80078c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800784e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007852:	d118      	bne.n	8007886 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4413      	add	r3, r2
 8007862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007866:	461a      	mov	r2, r3
 8007868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	e013      	b.n	8007898 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787c:	461a      	mov	r2, r3
 800787e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	e008      	b.n	8007898 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007892:	461a      	mov	r2, r3
 8007894:	2300      	movs	r3, #0
 8007896:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a4:	461a      	mov	r2, r3
 80078a6:	2300      	movs	r3, #0
 80078a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b6:	461a      	mov	r2, r3
 80078b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	3301      	adds	r3, #1
 80078c2:	613b      	str	r3, [r7, #16]
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d3b7      	bcc.n	800783c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80078ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d105      	bne.n	8007900 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	f043 0210 	orr.w	r2, r3, #16
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	4b0e      	ldr	r3, [pc, #56]	; (8007940 <USB_DevInit+0x2b4>)
 8007906:	4313      	orrs	r3, r2
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800790c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	f043 0208 	orr.w	r2, r3, #8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800791e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007920:	2b01      	cmp	r3, #1
 8007922:	d105      	bne.n	8007930 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	4b06      	ldr	r3, [pc, #24]	; (8007944 <USB_DevInit+0x2b8>)
 800792a:	4313      	orrs	r3, r2
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800793c:	b004      	add	sp, #16
 800793e:	4770      	bx	lr
 8007940:	803c3800 	.word	0x803c3800
 8007944:	40000004 	.word	0x40000004

08007948 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	019b      	lsls	r3, r3, #6
 800795a:	f043 0220 	orr.w	r2, r3, #32
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3301      	adds	r3, #1
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4a09      	ldr	r2, [pc, #36]	; (8007990 <USB_FlushTxFifo+0x48>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d901      	bls.n	8007974 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e006      	b.n	8007982 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	f003 0320 	and.w	r3, r3, #32
 800797c:	2b20      	cmp	r3, #32
 800797e:	d0f0      	beq.n	8007962 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	00030d40 	.word	0x00030d40

08007994 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2210      	movs	r2, #16
 80079a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4a09      	ldr	r2, [pc, #36]	; (80079d4 <USB_FlushRxFifo+0x40>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d901      	bls.n	80079b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e006      	b.n	80079c6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	f003 0310 	and.w	r3, r3, #16
 80079c0:	2b10      	cmp	r3, #16
 80079c2:	d0f0      	beq.n	80079a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	00030d40 	.word	0x00030d40

080079d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	68f9      	ldr	r1, [r7, #12]
 80079f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079f8:	4313      	orrs	r3, r2
 80079fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a24:	f023 0303 	bic.w	r3, r3, #3
 8007a28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a38:	f043 0302 	orr.w	r3, r3, #2
 8007a3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4a13      	ldr	r2, [pc, #76]	; (8007ab0 <USB_CoreReset+0x64>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d901      	bls.n	8007a6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e01b      	b.n	8007aa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	daf2      	bge.n	8007a58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f043 0201 	orr.w	r2, r3, #1
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3301      	adds	r3, #1
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4a09      	ldr	r2, [pc, #36]	; (8007ab0 <USB_CoreReset+0x64>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d901      	bls.n	8007a94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e006      	b.n	8007aa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d0f0      	beq.n	8007a82 <USB_CoreReset+0x36>

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	00030d40 	.word	0x00030d40

08007ab4 <__libc_init_array>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	4d0d      	ldr	r5, [pc, #52]	; (8007aec <__libc_init_array+0x38>)
 8007ab8:	4c0d      	ldr	r4, [pc, #52]	; (8007af0 <__libc_init_array+0x3c>)
 8007aba:	1b64      	subs	r4, r4, r5
 8007abc:	10a4      	asrs	r4, r4, #2
 8007abe:	2600      	movs	r6, #0
 8007ac0:	42a6      	cmp	r6, r4
 8007ac2:	d109      	bne.n	8007ad8 <__libc_init_array+0x24>
 8007ac4:	4d0b      	ldr	r5, [pc, #44]	; (8007af4 <__libc_init_array+0x40>)
 8007ac6:	4c0c      	ldr	r4, [pc, #48]	; (8007af8 <__libc_init_array+0x44>)
 8007ac8:	f000 f820 	bl	8007b0c <_init>
 8007acc:	1b64      	subs	r4, r4, r5
 8007ace:	10a4      	asrs	r4, r4, #2
 8007ad0:	2600      	movs	r6, #0
 8007ad2:	42a6      	cmp	r6, r4
 8007ad4:	d105      	bne.n	8007ae2 <__libc_init_array+0x2e>
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
 8007ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007adc:	4798      	blx	r3
 8007ade:	3601      	adds	r6, #1
 8007ae0:	e7ee      	b.n	8007ac0 <__libc_init_array+0xc>
 8007ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae6:	4798      	blx	r3
 8007ae8:	3601      	adds	r6, #1
 8007aea:	e7f2      	b.n	8007ad2 <__libc_init_array+0x1e>
 8007aec:	08007b64 	.word	0x08007b64
 8007af0:	08007b64 	.word	0x08007b64
 8007af4:	08007b64 	.word	0x08007b64
 8007af8:	08007b68 	.word	0x08007b68

08007afc <memset>:
 8007afc:	4402      	add	r2, r0
 8007afe:	4603      	mov	r3, r0
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d100      	bne.n	8007b06 <memset+0xa>
 8007b04:	4770      	bx	lr
 8007b06:	f803 1b01 	strb.w	r1, [r3], #1
 8007b0a:	e7f9      	b.n	8007b00 <memset+0x4>

08007b0c <_init>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr

08007b18 <_fini>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	bf00      	nop
 8007b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1e:	bc08      	pop	{r3}
 8007b20:	469e      	mov	lr, r3
 8007b22:	4770      	bx	lr
