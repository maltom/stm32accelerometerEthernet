
stm32accelerometerEthernet_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005210  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e0  080054e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054e8  080054e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080054f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  24000010  08005500  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240004c8  08005500  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a768  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c99  00000000  00000000  0003a7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0003d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  0003e1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000389da  00000000  00000000  0003eee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffc4  00000000  00000000  000778c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176f87  00000000  00000000  00087886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fe80d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003958  00000000  00000000  001fe860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005490 	.word	0x08005490

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005490 	.word	0x08005490

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fb7e 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f81c 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f000 f91c 	bl	800094c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000714:	f000 f89c 	bl	8000850 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000718:	f000 f8e6 	bl	80008e8 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 800071c:	2101      	movs	r1, #1
 800071e:	4808      	ldr	r0, [pc, #32]	; (8000740 <main+0x3c>)
 8000720:	f000 fee1 	bl	80014e6 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000724:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <main+0x3c>)
 800072a:	f000 fedc 	bl	80014e6 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
 800072e:	2102      	movs	r1, #2
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <main+0x40>)
 8000732:	f000 fed8 	bl	80014e6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000736:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800073a:	f000 fbf7 	bl	8000f2c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 800073e:	e7ed      	b.n	800071c <main+0x18>
 8000740:	58020400 	.word	0x58020400
 8000744:	58021000 	.word	0x58021000

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09c      	sub	sp, #112	; 0x70
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	224c      	movs	r2, #76	; 0x4c
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fe92 	bl	8005480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2220      	movs	r2, #32
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f004 fe8c 	bl	8005480 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000768:	2004      	movs	r0, #4
 800076a:	f001 f81f 	bl	80017ac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <SystemClock_Config+0xfc>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a33      	ldr	r2, [pc, #204]	; (8000844 <SystemClock_Config+0xfc>)
 8000778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <SystemClock_Config+0xfc>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <SystemClock_Config+0x100>)
 800078a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078c:	4a2e      	ldr	r2, [pc, #184]	; (8000848 <SystemClock_Config+0x100>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <SystemClock_Config+0x100>)
 8000796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a0:	bf00      	nop
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SystemClock_Config+0xfc>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ae:	d1f8      	bne.n	80007a2 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <SystemClock_Config+0x104>)
 80007b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b4:	f023 0303 	bic.w	r3, r3, #3
 80007b8:	4a24      	ldr	r2, [pc, #144]	; (800084c <SystemClock_Config+0x104>)
 80007ba:	f043 0302 	orr.w	r3, r3, #2
 80007be:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80007d6:	2378      	movs	r3, #120	; 0x78
 80007d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007e6:	230c      	movs	r3, #12
 80007e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 f842 	bl	8001880 <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000802:	f000 f99f 	bl	8000b44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	233f      	movs	r3, #63	; 0x3f
 8000808:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2303      	movs	r3, #3
 800080c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000812:	2308      	movs	r3, #8
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000816:	2340      	movs	r3, #64	; 0x40
 8000818:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800081e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000822:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000824:	2340      	movs	r3, #64	; 0x40
 8000826:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2104      	movs	r1, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fc37 	bl	80020a0 <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000838:	f000 f984 	bl	8000b44 <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	3770      	adds	r7, #112	; 0x70
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	58024800 	.word	0x58024800
 8000848:	58000400 	.word	0x58000400
 800084c:	58024400 	.word	0x58024400

08000850 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 8000856:	4a23      	ldr	r2, [pc, #140]	; (80008e4 <MX_USART3_UART_Init+0x94>)
 8000858:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000898:	4811      	ldr	r0, [pc, #68]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 800089a:	f003 faef 	bl	8003e7c <HAL_UART_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008a4:	f000 f94e 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 80008ac:	f004 fa3c 	bl	8004d28 <HAL_UARTEx_SetTxFifoThreshold>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008b6:	f000 f945 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 80008be:	f004 fa71 	bl	8004da4 <HAL_UARTEx_SetRxFifoThreshold>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008c8:	f000 f93c 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_USART3_UART_Init+0x90>)
 80008ce:	f004 f9f2 	bl	8004cb6 <HAL_UARTEx_DisableFifoMode>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008d8:	f000 f934 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2400002c 	.word	0x2400002c
 80008e4:	40004800 	.word	0x40004800

080008e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ee:	4a16      	ldr	r2, [pc, #88]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f4:	2209      	movs	r2, #9
 80008f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000906:	2202      	movs	r2, #2
 8000908:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091e:	2201      	movs	r2, #1
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000924:	2201      	movs	r2, #1
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092a:	2200      	movs	r2, #0
 800092c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000930:	f000 fdf3 	bl	800151a <HAL_PCD_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800093a:	f000 f903 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	240000bc 	.word	0x240000bc
 8000948:	40080000 	.word	0x40080000

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	; 0x30
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b72      	ldr	r3, [pc, #456]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	4a70      	ldr	r2, [pc, #448]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000972:	4b6e      	ldr	r3, [pc, #440]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
 800097e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000980:	4b6a      	ldr	r3, [pc, #424]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000986:	4a69      	ldr	r2, [pc, #420]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000990:	4b66      	ldr	r3, [pc, #408]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b63      	ldr	r3, [pc, #396]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	4a61      	ldr	r2, [pc, #388]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ae:	4b5f      	ldr	r3, [pc, #380]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009bc:	4b5b      	ldr	r3, [pc, #364]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	4a5a      	ldr	r2, [pc, #360]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009cc:	4b57      	ldr	r3, [pc, #348]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b54      	ldr	r3, [pc, #336]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	4a52      	ldr	r2, [pc, #328]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ea:	4b50      	ldr	r3, [pc, #320]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	f003 0308 	and.w	r3, r3, #8
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f8:	4b4c      	ldr	r3, [pc, #304]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	4a4b      	ldr	r2, [pc, #300]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a08:	4b48      	ldr	r3, [pc, #288]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a16:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	4a43      	ldr	r2, [pc, #268]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a26:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	f003 0310 	and.w	r3, r3, #16
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a3a:	483d      	ldr	r0, [pc, #244]	; (8000b30 <MX_GPIO_Init+0x1e4>)
 8000a3c:	f000 fd3a 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2102      	movs	r1, #2
 8000a44:	483b      	ldr	r0, [pc, #236]	; (8000b34 <MX_GPIO_Init+0x1e8>)
 8000a46:	f000 fd35 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4836      	ldr	r0, [pc, #216]	; (8000b38 <MX_GPIO_Init+0x1ec>)
 8000a60:	f000 fb78 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a64:	2332      	movs	r3, #50	; 0x32
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a74:	230b      	movs	r3, #11
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	482e      	ldr	r0, [pc, #184]	; (8000b38 <MX_GPIO_Init+0x1ec>)
 8000a80:	f000 fb68 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a84:	2386      	movs	r3, #134	; 0x86
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a94:	230b      	movs	r3, #11
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4827      	ldr	r0, [pc, #156]	; (8000b3c <MX_GPIO_Init+0x1f0>)
 8000aa0:	f000 fb58 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aa4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	481c      	ldr	r0, [pc, #112]	; (8000b30 <MX_GPIO_Init+0x1e4>)
 8000abe:	f000 fb49 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad4:	230b      	movs	r3, #11
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4814      	ldr	r0, [pc, #80]	; (8000b30 <MX_GPIO_Init+0x1e4>)
 8000ae0:	f000 fb38 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ae4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af6:	230b      	movs	r3, #11
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	480f      	ldr	r0, [pc, #60]	; (8000b40 <MX_GPIO_Init+0x1f4>)
 8000b02:	f000 fb27 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_GPIO_Init+0x1e8>)
 8000b1e:	f000 fb19 	bl	8001154 <HAL_GPIO_Init>

}
 8000b22:	bf00      	nop
 8000b24:	3730      	adds	r7, #48	; 0x30
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	58020400 	.word	0x58020400
 8000b34:	58021000 	.word	0x58021000
 8000b38:	58020800 	.word	0x58020800
 8000b3c:	58020000 	.word	0x58020000
 8000b40:	58021800 	.word	0x58021800

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_MspInit+0x30>)
 8000b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b5c:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x30>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x30>)
 8000b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	58024400 	.word	0x58024400

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0b8      	sub	sp, #224	; 0xe0
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	22bc      	movs	r2, #188	; 0xbc
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 fc6b 	bl	8005480 <memset>
  if(huart->Instance==USART3)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a25      	ldr	r2, [pc, #148]	; (8000c44 <HAL_UART_MspInit+0xc0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d142      	bne.n	8000c3a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 fdf8 	bl	80027b8 <HAL_RCCEx_PeriphCLKConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bce:	f7ff ffb9 	bl	8000b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_UART_MspInit+0xc4>)
 8000bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <HAL_UART_MspInit+0xc4>)
 8000bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_UART_MspInit+0xc4>)
 8000be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_UART_MspInit+0xc4>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_UART_MspInit+0xc4>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_UART_MspInit+0xc4>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_UART_MspInit+0xc8>)
 8000c36:	f000 fa8d 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	37e0      	adds	r7, #224	; 0xe0
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40004800 	.word	0x40004800
 8000c48:	58024400 	.word	0x58024400
 8000c4c:	58020c00 	.word	0x58020c00

08000c50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0b8      	sub	sp, #224	; 0xe0
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	22bc      	movs	r2, #188	; 0xbc
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 fc05 	bl	8005480 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a36      	ldr	r2, [pc, #216]	; (8000d54 <HAL_PCD_MspInit+0x104>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d165      	bne.n	8000d4c <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000c8a:	2318      	movs	r3, #24
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000c92:	2304      	movs	r3, #4
 8000c94:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000c9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c9e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ca4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ca8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 fd81 	bl	80027b8 <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000cbc:	f7ff ff42 	bl	8000b44 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000cc0:	f000 fdce 	bl	8001860 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <HAL_PCD_MspInit+0x108>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <HAL_PCD_MspInit+0x108>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd4:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <HAL_PCD_MspInit+0x108>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ce2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000ce6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d06:	4619      	mov	r1, r3
 8000d08:	4814      	ldr	r0, [pc, #80]	; (8000d5c <HAL_PCD_MspInit+0x10c>)
 8000d0a:	f000 fa23 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d26:	4619      	mov	r1, r3
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <HAL_PCD_MspInit+0x10c>)
 8000d2a:	f000 fa13 	bl	8001154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_PCD_MspInit+0x108>)
 8000d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d34:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_PCD_MspInit+0x108>)
 8000d36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_PCD_MspInit+0x108>)
 8000d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	37e0      	adds	r7, #224	; 0xe0
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40080000 	.word	0x40080000
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	58020000 	.word	0x58020000

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f89e 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000db8:	f7ff fc0a 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	; (8000e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f004 fb29 	bl	8005438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fc8d 	bl	8000704 <main>
  bx  lr
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000df0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000df4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000df8:	080054f0 	.word	0x080054f0
  ldr r2, =_sbss
 8000dfc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e00:	240004c8 	.word	0x240004c8

08000e04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC3_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f000 f96e 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e14:	f001 fafa 	bl	800240c <HAL_RCC_GetSysClockFreq>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_Init+0x68>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	4913      	ldr	r1, [pc, #76]	; (8000e74 <HAL_Init+0x6c>)
 8000e26:	5ccb      	ldrb	r3, [r1, r3]
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_Init+0x68>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_Init+0x6c>)
 8000e3c:	5cd3      	ldrb	r3, [r2, r3]
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	fa22 f303 	lsr.w	r3, r2, r3
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_Init+0x70>)
 8000e4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_Init+0x74>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 f814 	bl	8000e80 <HAL_InitTick>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e002      	b.n	8000e68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e62:	f7ff fe75 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58024400 	.word	0x58024400
 8000e74:	080054a8 	.word	0x080054a8
 8000e78:	24000004 	.word	0x24000004
 8000e7c:	24000000 	.word	0x24000000

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_InitTick+0x60>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e021      	b.n	8000ed8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_InitTick+0x64>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_InitTick+0x60>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f945 	bl	800113a <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 f91d 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x68>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2400000c 	.word	0x2400000c
 8000ee4:	24000000 	.word	0x24000000
 8000ee8:	24000008 	.word	0x24000008

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2400000c 	.word	0x2400000c
 8000f10:	240004c4 	.word	0x240004c4

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	240004c4 	.word	0x240004c4

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2400000c 	.word	0x2400000c

08000f74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetREVID+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	0c1b      	lsrs	r3, r3, #16
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	5c001000 	.word	0x5c001000

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <__NVIC_SetPriorityGrouping+0x40>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <__NVIC_SetPriorityGrouping+0x40>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	60d3      	str	r3, [r2, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00
 8000fd0:	05fa0000 	.word	0x05fa0000

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff47 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff5e 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff90 	bl	8001044 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5f 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffb2 	bl	80010ac <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001162:	4b89      	ldr	r3, [pc, #548]	; (8001388 <HAL_GPIO_Init+0x234>)
 8001164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001166:	e194      	b.n	8001492 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8186 	beq.w	800148c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d00b      	beq.n	80011a0 <HAL_GPIO_Init+0x4c>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d007      	beq.n	80011a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001194:	2b11      	cmp	r3, #17
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b12      	cmp	r3, #18
 800119e:	d130      	bne.n	8001202 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011d6:	2201      	movs	r2, #1
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	f003 0201 	and.w	r2, r3, #1
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0xee>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b12      	cmp	r3, #18
 8001240:	d123      	bne.n	800128a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691a      	ldr	r2, [r3, #16]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	69b9      	ldr	r1, [r7, #24]
 8001286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0203 	and.w	r2, r3, #3
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 80e0 	beq.w	800148c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_GPIO_Init+0x238>)
 80012ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012d2:	4a2e      	ldr	r2, [pc, #184]	; (800138c <HAL_GPIO_Init+0x238>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012dc:	4b2b      	ldr	r3, [pc, #172]	; (800138c <HAL_GPIO_Init+0x238>)
 80012de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ea:	4a29      	ldr	r2, [pc, #164]	; (8001390 <HAL_GPIO_Init+0x23c>)
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a20      	ldr	r2, [pc, #128]	; (8001394 <HAL_GPIO_Init+0x240>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d052      	beq.n	80013bc <HAL_GPIO_Init+0x268>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <HAL_GPIO_Init+0x244>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d031      	beq.n	8001382 <HAL_GPIO_Init+0x22e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a1e      	ldr	r2, [pc, #120]	; (800139c <HAL_GPIO_Init+0x248>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d02b      	beq.n	800137e <HAL_GPIO_Init+0x22a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <HAL_GPIO_Init+0x24c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d025      	beq.n	800137a <HAL_GPIO_Init+0x226>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <HAL_GPIO_Init+0x250>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01f      	beq.n	8001376 <HAL_GPIO_Init+0x222>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <HAL_GPIO_Init+0x254>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x21e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_GPIO_Init+0x258>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x21a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_GPIO_Init+0x25c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x216>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <HAL_GPIO_Init+0x260>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x212>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_GPIO_Init+0x264>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x20e>
 800135e:	2309      	movs	r3, #9
 8001360:	e02d      	b.n	80013be <HAL_GPIO_Init+0x26a>
 8001362:	230a      	movs	r3, #10
 8001364:	e02b      	b.n	80013be <HAL_GPIO_Init+0x26a>
 8001366:	2308      	movs	r3, #8
 8001368:	e029      	b.n	80013be <HAL_GPIO_Init+0x26a>
 800136a:	2307      	movs	r3, #7
 800136c:	e027      	b.n	80013be <HAL_GPIO_Init+0x26a>
 800136e:	2306      	movs	r3, #6
 8001370:	e025      	b.n	80013be <HAL_GPIO_Init+0x26a>
 8001372:	2305      	movs	r3, #5
 8001374:	e023      	b.n	80013be <HAL_GPIO_Init+0x26a>
 8001376:	2304      	movs	r3, #4
 8001378:	e021      	b.n	80013be <HAL_GPIO_Init+0x26a>
 800137a:	2303      	movs	r3, #3
 800137c:	e01f      	b.n	80013be <HAL_GPIO_Init+0x26a>
 800137e:	2302      	movs	r3, #2
 8001380:	e01d      	b.n	80013be <HAL_GPIO_Init+0x26a>
 8001382:	2301      	movs	r3, #1
 8001384:	e01b      	b.n	80013be <HAL_GPIO_Init+0x26a>
 8001386:	bf00      	nop
 8001388:	58000080 	.word	0x58000080
 800138c:	58024400 	.word	0x58024400
 8001390:	58000400 	.word	0x58000400
 8001394:	58020000 	.word	0x58020000
 8001398:	58020400 	.word	0x58020400
 800139c:	58020800 	.word	0x58020800
 80013a0:	58020c00 	.word	0x58020c00
 80013a4:	58021000 	.word	0x58021000
 80013a8:	58021400 	.word	0x58021400
 80013ac:	58021800 	.word	0x58021800
 80013b0:	58021c00 	.word	0x58021c00
 80013b4:	58022000 	.word	0x58022000
 80013b8:	58022400 	.word	0x58022400
 80013bc:	2300      	movs	r3, #0
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	f002 0203 	and.w	r2, r2, #3
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	4093      	lsls	r3, r2
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ce:	4938      	ldr	r1, [pc, #224]	; (80014b0 <HAL_GPIO_Init+0x35c>)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	3302      	adds	r3, #2
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001456:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800145e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	3301      	adds	r3, #1
 8001490:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	f47f ae63 	bne.w	8001168 <HAL_GPIO_Init+0x14>
  }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3724      	adds	r7, #36	; 0x24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	58000400 	.word	0x58000400

080014b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
 80014c0:	4613      	mov	r3, r2
 80014c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c4:	787b      	ldrb	r3, [r7, #1]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014d0:	e003      	b.n	80014da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	041a      	lsls	r2, r3, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	619a      	str	r2, [r3, #24]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014f8:	887a      	ldrh	r2, [r7, #2]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4013      	ands	r3, r2
 80014fe:	041a      	lsls	r2, r3, #16
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	43d9      	mvns	r1, r3
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	400b      	ands	r3, r1
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800151a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151c:	b08f      	sub	sp, #60	; 0x3c
 800151e:	af0a      	add	r7, sp, #40	; 0x28
 8001520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e116      	b.n	800175a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fb82 	bl	8000c50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2203      	movs	r2, #3
 8001550:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fd14 	bl	8004f98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	687e      	ldr	r6, [r7, #4]
 8001578:	466d      	mov	r5, sp
 800157a:	f106 0410 	add.w	r4, r6, #16
 800157e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001586:	e894 0003 	ldmia.w	r4, {r0, r1}
 800158a:	e885 0003 	stmia.w	r5, {r0, r1}
 800158e:	1d33      	adds	r3, r6, #4
 8001590:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001592:	6838      	ldr	r0, [r7, #0]
 8001594:	f003 fc92 	bl	8004ebc <USB_CoreInit>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2202      	movs	r2, #2
 80015a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0d7      	b.n	800175a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fd02 	bl	8004fba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	e04a      	b.n	8001652 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	333d      	adds	r3, #61	; 0x3d
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	333c      	adds	r3, #60	; 0x3c
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	b298      	uxth	r0, r3
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	3342      	adds	r3, #66	; 0x42
 80015f8:	4602      	mov	r2, r0
 80015fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	333f      	adds	r3, #63	; 0x3f
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	3344      	adds	r3, #68	; 0x44
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	3348      	adds	r3, #72	; 0x48
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	3350      	adds	r3, #80	; 0x50
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	3301      	adds	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	d3af      	bcc.n	80015bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e044      	b.n	80016ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	1a9b      	subs	r3, r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	1a9b      	subs	r3, r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	3301      	adds	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d3b5      	bcc.n	8001662 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	687e      	ldr	r6, [r7, #4]
 80016fe:	466d      	mov	r5, sp
 8001700:	f106 0410 	add.w	r4, r6, #16
 8001704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800170c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001710:	e885 0003 	stmia.w	r5, {r0, r1}
 8001714:	1d33      	adds	r3, r6, #4
 8001716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f003 fc79 	bl	8005010 <USB_DevInit>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e014      	b.n	800175a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	2b01      	cmp	r3, #1
 8001746:	d102      	bne.n	800174e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f80b 	bl	8001764 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fe1b 	bl	800538e <USB_DevDisconnect>

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001764 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8001794:	4313      	orrs	r3, r2
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	10000003 	.word	0x10000003

080017ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <HAL_PWREx_ConfigSupply+0xb0>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	2b06      	cmp	r3, #6
 80017be:	d00a      	beq.n	80017d6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_PWREx_ConfigSupply+0xb0>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d001      	beq.n	80017d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e040      	b.n	8001854 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e03e      	b.n	8001854 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_PWREx_ConfigSupply+0xb0>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80017de:	491f      	ldr	r1, [pc, #124]	; (800185c <HAL_PWREx_ConfigSupply+0xb0>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80017e6:	f7ff fb95 	bl	8000f14 <HAL_GetTick>
 80017ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017ec:	e009      	b.n	8001802 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017ee:	f7ff fb91 	bl	8000f14 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017fc:	d901      	bls.n	8001802 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e028      	b.n	8001854 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_PWREx_ConfigSupply+0xb0>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800180e:	d1ee      	bne.n	80017ee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b1e      	cmp	r3, #30
 8001814:	d008      	beq.n	8001828 <HAL_PWREx_ConfigSupply+0x7c>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b2e      	cmp	r3, #46	; 0x2e
 800181a:	d005      	beq.n	8001828 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b1d      	cmp	r3, #29
 8001820:	d002      	beq.n	8001828 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b2d      	cmp	r3, #45	; 0x2d
 8001826:	d114      	bne.n	8001852 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001828:	f7ff fb74 	bl	8000f14 <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800182e:	e009      	b.n	8001844 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001830:	f7ff fb70 	bl	8000f14 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800183e:	d901      	bls.n	8001844 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e007      	b.n	8001854 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_PWREx_ConfigSupply+0xb0>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d1ee      	bne.n	8001830 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	58024800 	.word	0x58024800

08001860 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800186a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	58024800 	.word	0x58024800

08001880 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e3ff      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8087 	beq.w	80019ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a0:	4b99      	ldr	r3, [pc, #612]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018aa:	4b97      	ldr	r3, [pc, #604]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b2:	2b10      	cmp	r3, #16
 80018b4:	d007      	beq.n	80018c6 <HAL_RCC_OscConfig+0x46>
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	2b18      	cmp	r3, #24
 80018ba:	d110      	bne.n	80018de <HAL_RCC_OscConfig+0x5e>
 80018bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d10b      	bne.n	80018de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c6:	4b90      	ldr	r3, [pc, #576]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d06c      	beq.n	80019ac <HAL_RCC_OscConfig+0x12c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d168      	bne.n	80019ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e3d9      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x76>
 80018e8:	4b87      	ldr	r3, [pc, #540]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a86      	ldr	r2, [pc, #536]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 80018ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	e02e      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x98>
 80018fe:	4b82      	ldr	r3, [pc, #520]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a81      	ldr	r2, [pc, #516]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a7e      	ldr	r2, [pc, #504]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e01d      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0xbc>
 8001922:	4b79      	ldr	r3, [pc, #484]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a78      	ldr	r2, [pc, #480]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b76      	ldr	r3, [pc, #472]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a75      	ldr	r2, [pc, #468]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 800193c:	4b72      	ldr	r3, [pc, #456]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a71      	ldr	r2, [pc, #452]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b6f      	ldr	r3, [pc, #444]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6e      	ldr	r2, [pc, #440]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d013      	beq.n	8001984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff fada 	bl	8000f14 <HAL_GetTick>
 8001960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fad6 	bl	8000f14 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e38d      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001976:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0xe4>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fac6 	bl	8000f14 <HAL_GetTick>
 8001988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fac2 	bl	8000f14 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e379      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800199e:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x10c>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80ae 	beq.w	8001b18 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019bc:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019c6:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <HAL_RCC_OscConfig+0x162>
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	2b18      	cmp	r3, #24
 80019d6:	d13a      	bne.n	8001a4e <HAL_RCC_OscConfig+0x1ce>
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d135      	bne.n	8001a4e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e2:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_RCC_OscConfig+0x17a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e34b      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	f7ff fabb 	bl	8000f74 <HAL_GetREVID>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d817      	bhi.n	8001a38 <HAL_RCC_OscConfig+0x1b8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	2b40      	cmp	r3, #64	; 0x40
 8001a0e:	d108      	bne.n	8001a22 <HAL_RCC_OscConfig+0x1a2>
 8001a10:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a18:	4a3b      	ldr	r2, [pc, #236]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a20:	e07a      	b.n	8001b18 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	031b      	lsls	r3, r3, #12
 8001a30:	4935      	ldr	r1, [pc, #212]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a36:	e06f      	b.n	8001b18 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	4930      	ldr	r1, [pc, #192]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4c:	e064      	b.n	8001b18 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d045      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a56:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 0219 	bic.w	r2, r3, #25
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4929      	ldr	r1, [pc, #164]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff fa54 	bl	8000f14 <HAL_GetTick>
 8001a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff fa50 	bl	8000f14 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e307      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8e:	f7ff fa71 	bl	8000f74 <HAL_GetREVID>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d817      	bhi.n	8001acc <HAL_RCC_OscConfig+0x24c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b40      	cmp	r3, #64	; 0x40
 8001aa2:	d108      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x236>
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001aac:	4a16      	ldr	r2, [pc, #88]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab2:	6053      	str	r3, [r2, #4]
 8001ab4:	e030      	b.n	8001b18 <HAL_RCC_OscConfig+0x298>
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	031b      	lsls	r3, r3, #12
 8001ac4:	4910      	ldr	r1, [pc, #64]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
 8001aca:	e025      	b.n	8001b18 <HAL_RCC_OscConfig+0x298>
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	061b      	lsls	r3, r3, #24
 8001ada:	490b      	ldr	r1, [pc, #44]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
 8001ae0:	e01a      	b.n	8001b18 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <HAL_RCC_OscConfig+0x288>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff fa11 	bl	8000f14 <HAL_GetTick>
 8001af2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff fa0d 	bl	8000f14 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d903      	bls.n	8001b0c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e2c4      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
 8001b08:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b0c:	4ba4      	ldr	r3, [pc, #656]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ee      	bne.n	8001af6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80a9 	beq.w	8001c78 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b26:	4b9e      	ldr	r3, [pc, #632]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b30:	4b9b      	ldr	r3, [pc, #620]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d007      	beq.n	8001b4c <HAL_RCC_OscConfig+0x2cc>
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b18      	cmp	r3, #24
 8001b40:	d13a      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x338>
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d135      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b4c:	4b94      	ldr	r3, [pc, #592]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_OscConfig+0x2e4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b80      	cmp	r3, #128	; 0x80
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e296      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b64:	f7ff fa06 	bl	8000f74 <HAL_GetREVID>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d817      	bhi.n	8001ba2 <HAL_RCC_OscConfig+0x322>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	2b20      	cmp	r3, #32
 8001b78:	d108      	bne.n	8001b8c <HAL_RCC_OscConfig+0x30c>
 8001b7a:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b82:	4a87      	ldr	r2, [pc, #540]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b88:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b8a:	e075      	b.n	8001c78 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b8c:	4b84      	ldr	r3, [pc, #528]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	069b      	lsls	r3, r3, #26
 8001b9a:	4981      	ldr	r1, [pc, #516]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ba0:	e06a      	b.n	8001c78 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ba2:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	061b      	lsls	r3, r3, #24
 8001bb0:	497b      	ldr	r1, [pc, #492]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bb6:	e05f      	b.n	8001c78 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d042      	beq.n	8001c46 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001bc0:	4b77      	ldr	r3, [pc, #476]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a76      	ldr	r2, [pc, #472]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f9a2 	bl	8000f14 <HAL_GetTick>
 8001bd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001bd4:	f7ff f99e 	bl	8000f14 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e255      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001be6:	4b6e      	ldr	r3, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bf2:	f7ff f9bf 	bl	8000f74 <HAL_GetREVID>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d817      	bhi.n	8001c30 <HAL_RCC_OscConfig+0x3b0>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d108      	bne.n	8001c1a <HAL_RCC_OscConfig+0x39a>
 8001c08:	4b65      	ldr	r3, [pc, #404]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c10:	4a63      	ldr	r2, [pc, #396]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001c12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c16:	6053      	str	r3, [r2, #4]
 8001c18:	e02e      	b.n	8001c78 <HAL_RCC_OscConfig+0x3f8>
 8001c1a:	4b61      	ldr	r3, [pc, #388]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	069b      	lsls	r3, r3, #26
 8001c28:	495d      	ldr	r1, [pc, #372]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
 8001c2e:	e023      	b.n	8001c78 <HAL_RCC_OscConfig+0x3f8>
 8001c30:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	4958      	ldr	r1, [pc, #352]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
 8001c44:	e018      	b.n	8001c78 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c46:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff f95f 	bl	8000f14 <HAL_GetTick>
 8001c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c5a:	f7ff f95b 	bl	8000f14 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e212      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c6c:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d036      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d019      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8c:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c90:	4a43      	ldr	r2, [pc, #268]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7ff f93c 	bl	8000f14 <HAL_GetTick>
 8001c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f938 	bl	8000f14 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1ef      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x420>
 8001cbe:	e018      	b.n	8001cf2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc0:	4b37      	ldr	r3, [pc, #220]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc4:	4a36      	ldr	r2, [pc, #216]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f922 	bl	8000f14 <HAL_GetTick>
 8001cd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f91e 	bl	8000f14 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e1d5      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ce6:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d036      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d019      	beq.n	8001d3a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a25      	ldr	r2, [pc, #148]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001d0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d12:	f7ff f8ff 	bl	8000f14 <HAL_GetTick>
 8001d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d1a:	f7ff f8fb 	bl	8000f14 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e1b2      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x49a>
 8001d38:	e018      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d46:	f7ff f8e5 	bl	8000f14 <HAL_GetTick>
 8001d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d4e:	f7ff f8e1 	bl	8000f14 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e198      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_RCC_OscConfig+0x520>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 8085 	beq.w	8001e84 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_RCC_OscConfig+0x524>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_RCC_OscConfig+0x524>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d86:	f7ff f8c5 	bl	8000f14 <HAL_GetTick>
 8001d8a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d8c:	e00c      	b.n	8001da8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7ff f8c1 	bl	8000f14 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b64      	cmp	r3, #100	; 0x64
 8001d9a:	d905      	bls.n	8001da8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e178      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
 8001da0:	58024400 	.word	0x58024400
 8001da4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001da8:	4b96      	ldr	r3, [pc, #600]	; (8002004 <HAL_RCC_OscConfig+0x784>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0ec      	beq.n	8001d8e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x54a>
 8001dbc:	4b92      	ldr	r3, [pc, #584]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc0:	4a91      	ldr	r2, [pc, #580]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc8:	e02d      	b.n	8001e26 <HAL_RCC_OscConfig+0x5a6>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x56c>
 8001dd2:	4b8d      	ldr	r3, [pc, #564]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	4a8c      	ldr	r2, [pc, #560]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dde:	4b8a      	ldr	r3, [pc, #552]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	4a89      	ldr	r2, [pc, #548]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dea:	e01c      	b.n	8001e26 <HAL_RCC_OscConfig+0x5a6>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x58e>
 8001df4:	4b84      	ldr	r3, [pc, #528]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	4a83      	ldr	r2, [pc, #524]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001e00:	4b81      	ldr	r3, [pc, #516]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	4a80      	ldr	r2, [pc, #512]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0c:	e00b      	b.n	8001e26 <HAL_RCC_OscConfig+0x5a6>
 8001e0e:	4b7e      	ldr	r3, [pc, #504]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	4a7d      	ldr	r2, [pc, #500]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1a:	4b7b      	ldr	r3, [pc, #492]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1e:	4a7a      	ldr	r2, [pc, #488]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d015      	beq.n	8001e5a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f871 	bl	8000f14 <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7ff f86d 	bl	8000f14 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e122      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e4c:	4b6e      	ldr	r3, [pc, #440]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ee      	beq.n	8001e36 <HAL_RCC_OscConfig+0x5b6>
 8001e58:	e014      	b.n	8001e84 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5a:	f7ff f85b 	bl	8000f14 <HAL_GetTick>
 8001e5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7ff f857 	bl	8000f14 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e10c      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e78:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1ee      	bne.n	8001e62 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 8101 	beq.w	8002090 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e8e:	4b5e      	ldr	r3, [pc, #376]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e96:	2b18      	cmp	r3, #24
 8001e98:	f000 80bc 	beq.w	8002014 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	f040 8095 	bne.w	8001fd0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b58      	ldr	r3, [pc, #352]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a57      	ldr	r2, [pc, #348]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7ff f82f 	bl	8000f14 <HAL_GetTick>
 8001eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eba:	f7ff f82b 	bl	8000f14 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0e2      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ecc:	4b4e      	ldr	r3, [pc, #312]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed8:	4b4b      	ldr	r3, [pc, #300]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001edc:	4b4b      	ldr	r3, [pc, #300]	; (800200c <HAL_RCC_OscConfig+0x78c>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	430a      	orrs	r2, r1
 8001eec:	4946      	ldr	r1, [pc, #280]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	628b      	str	r3, [r1, #40]	; 0x28
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f00:	3b01      	subs	r3, #1
 8001f02:	025b      	lsls	r3, r3, #9
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	041b      	lsls	r3, r3, #16
 8001f10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001f22:	4939      	ldr	r1, [pc, #228]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001f28:	4b37      	ldr	r3, [pc, #220]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	4a36      	ldr	r2, [pc, #216]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f38:	4b35      	ldr	r3, [pc, #212]	; (8002010 <HAL_RCC_OscConfig+0x790>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f40:	00d2      	lsls	r2, r2, #3
 8001f42:	4931      	ldr	r1, [pc, #196]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f48:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	f023 020c 	bic.w	r2, r3, #12
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	492c      	ldr	r1, [pc, #176]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	f023 0202 	bic.w	r2, r3, #2
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	4928      	ldr	r1, [pc, #160]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f6c:	4b26      	ldr	r3, [pc, #152]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	4a25      	ldr	r2, [pc, #148]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f78:	4b23      	ldr	r3, [pc, #140]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	4a22      	ldr	r2, [pc, #136]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f84:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a19      	ldr	r2, [pc, #100]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7fe ffb4 	bl	8000f14 <HAL_GetTick>
 8001fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe ffb0 	bl	8000f14 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e067      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x730>
 8001fce:	e05f      	b.n	8002090 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7fe ff9a 	bl	8000f14 <HAL_GetTick>
 8001fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7fe ff96 	bl	8000f14 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e04d      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <HAL_RCC_OscConfig+0x788>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x764>
 8002002:	e045      	b.n	8002090 <HAL_RCC_OscConfig+0x810>
 8002004:	58024800 	.word	0x58024800
 8002008:	58024400 	.word	0x58024400
 800200c:	fffffc0c 	.word	0xfffffc0c
 8002010:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <HAL_RCC_OscConfig+0x81c>)
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_RCC_OscConfig+0x81c>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	2b01      	cmp	r3, #1
 8002026:	d031      	beq.n	800208c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f003 0203 	and.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d12a      	bne.n	800208c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d122      	bne.n	800208c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d11a      	bne.n	800208c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	0a5b      	lsrs	r3, r3, #9
 800205a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002062:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d111      	bne.n	800208c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	0c1b      	lsrs	r3, r3, #16
 800206c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002076:	429a      	cmp	r2, r3
 8002078:	d108      	bne.n	800208c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	0e1b      	lsrs	r3, r3, #24
 800207e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002086:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3730      	adds	r7, #48	; 0x30
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	58024400 	.word	0x58024400

080020a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e19c      	b.n	80023ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b8a      	ldr	r3, [pc, #552]	; (80022e0 <HAL_RCC_ClockConfig+0x240>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b87      	ldr	r3, [pc, #540]	; (80022e0 <HAL_RCC_ClockConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 020f 	bic.w	r2, r3, #15
 80020ca:	4985      	ldr	r1, [pc, #532]	; (80022e0 <HAL_RCC_ClockConfig+0x240>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b83      	ldr	r3, [pc, #524]	; (80022e0 <HAL_RCC_ClockConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e184      	b.n	80023ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	4b7b      	ldr	r3, [pc, #492]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d908      	bls.n	8002112 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002100:	4b78      	ldr	r3, [pc, #480]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	4975      	ldr	r1, [pc, #468]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 800210e:	4313      	orrs	r3, r2
 8002110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d010      	beq.n	8002140 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	4b70      	ldr	r3, [pc, #448]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800212a:	429a      	cmp	r2, r3
 800212c:	d908      	bls.n	8002140 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800212e:	4b6d      	ldr	r3, [pc, #436]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	496a      	ldr	r1, [pc, #424]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 800213c:	4313      	orrs	r3, r2
 800213e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	d010      	beq.n	800216e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699a      	ldr	r2, [r3, #24]
 8002150:	4b64      	ldr	r3, [pc, #400]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002158:	429a      	cmp	r2, r3
 800215a:	d908      	bls.n	800216e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800215c:	4b61      	ldr	r3, [pc, #388]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	495e      	ldr	r1, [pc, #376]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 800216a:	4313      	orrs	r3, r2
 800216c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b00      	cmp	r3, #0
 8002178:	d010      	beq.n	800219c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002186:	429a      	cmp	r2, r3
 8002188:	d908      	bls.n	800219c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800218a:	4b56      	ldr	r3, [pc, #344]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4953      	ldr	r1, [pc, #332]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 8002198:	4313      	orrs	r3, r2
 800219a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d010      	beq.n	80021ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d908      	bls.n	80021ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b8:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f023 020f 	bic.w	r2, r3, #15
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4947      	ldr	r1, [pc, #284]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d055      	beq.n	8002282 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80021d6:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4940      	ldr	r1, [pc, #256]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021f0:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d121      	bne.n	8002240 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0f6      	b.n	80023ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d107      	bne.n	8002218 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002208:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d115      	bne.n	8002240 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0ea      	b.n	80023ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d107      	bne.n	8002230 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002220:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d109      	bne.n	8002240 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0de      	b.n	80023ee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002230:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0d6      	b.n	80023ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002240:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	f023 0207 	bic.w	r2, r3, #7
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4925      	ldr	r1, [pc, #148]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 800224e:	4313      	orrs	r3, r2
 8002250:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7fe fe5f 	bl	8000f14 <HAL_GetTick>
 8002256:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002258:	e00a      	b.n	8002270 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225a:	f7fe fe5b 	bl	8000f14 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e0be      	b.n	80023ee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002270:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	429a      	cmp	r2, r3
 8002280:	d1eb      	bne.n	800225a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	429a      	cmp	r2, r3
 800229c:	d208      	bcs.n	80022b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f023 020f 	bic.w	r2, r3, #15
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	490e      	ldr	r1, [pc, #56]	; (80022e4 <HAL_RCC_ClockConfig+0x244>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_ClockConfig+0x240>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d214      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_RCC_ClockConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 020f 	bic.w	r2, r3, #15
 80022c6:	4906      	ldr	r1, [pc, #24]	; (80022e0 <HAL_RCC_ClockConfig+0x240>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <HAL_RCC_ClockConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e086      	b.n	80023ee <HAL_RCC_ClockConfig+0x34e>
 80022e0:	52002000 	.word	0x52002000
 80022e4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002300:	429a      	cmp	r2, r3
 8002302:	d208      	bcs.n	8002316 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002304:	4b3c      	ldr	r3, [pc, #240]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	4939      	ldr	r1, [pc, #228]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 8002312:	4313      	orrs	r3, r2
 8002314:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d010      	beq.n	8002344 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	4b34      	ldr	r3, [pc, #208]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800232e:	429a      	cmp	r2, r3
 8002330:	d208      	bcs.n	8002344 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002332:	4b31      	ldr	r3, [pc, #196]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	492e      	ldr	r1, [pc, #184]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 8002340:	4313      	orrs	r3, r2
 8002342:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	d010      	beq.n	8002372 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800235c:	429a      	cmp	r2, r3
 800235e:	d208      	bcs.n	8002372 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002360:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	4922      	ldr	r1, [pc, #136]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 800236e:	4313      	orrs	r3, r2
 8002370:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d010      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800238a:	429a      	cmp	r2, r3
 800238c:	d208      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800238e:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4917      	ldr	r1, [pc, #92]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 800239c:	4313      	orrs	r3, r2
 800239e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023a0:	f000 f834 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	4912      	ldr	r1, [pc, #72]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_RCC_ClockConfig+0x358>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 80023c8:	5cd3      	ldrb	r3, [r2, r3]
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_RCC_ClockConfig+0x360>)
 80023d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023d8:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <HAL_RCC_ClockConfig+0x364>)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x368>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fd4c 	bl	8000e80 <HAL_InitTick>
 80023e8:	4603      	mov	r3, r0
 80023ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	58024400 	.word	0x58024400
 80023fc:	080054a8 	.word	0x080054a8
 8002400:	24000004 	.word	0x24000004
 8002404:	24000000 	.word	0x24000000
 8002408:	24000008 	.word	0x24000008

0800240c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002412:	4bb3      	ldr	r3, [pc, #716]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800241a:	2b18      	cmp	r3, #24
 800241c:	f200 8155 	bhi.w	80026ca <HAL_RCC_GetSysClockFreq+0x2be>
 8002420:	a201      	add	r2, pc, #4	; (adr r2, 8002428 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002426:	bf00      	nop
 8002428:	0800248d 	.word	0x0800248d
 800242c:	080026cb 	.word	0x080026cb
 8002430:	080026cb 	.word	0x080026cb
 8002434:	080026cb 	.word	0x080026cb
 8002438:	080026cb 	.word	0x080026cb
 800243c:	080026cb 	.word	0x080026cb
 8002440:	080026cb 	.word	0x080026cb
 8002444:	080026cb 	.word	0x080026cb
 8002448:	080024b3 	.word	0x080024b3
 800244c:	080026cb 	.word	0x080026cb
 8002450:	080026cb 	.word	0x080026cb
 8002454:	080026cb 	.word	0x080026cb
 8002458:	080026cb 	.word	0x080026cb
 800245c:	080026cb 	.word	0x080026cb
 8002460:	080026cb 	.word	0x080026cb
 8002464:	080026cb 	.word	0x080026cb
 8002468:	080024b9 	.word	0x080024b9
 800246c:	080026cb 	.word	0x080026cb
 8002470:	080026cb 	.word	0x080026cb
 8002474:	080026cb 	.word	0x080026cb
 8002478:	080026cb 	.word	0x080026cb
 800247c:	080026cb 	.word	0x080026cb
 8002480:	080026cb 	.word	0x080026cb
 8002484:	080026cb 	.word	0x080026cb
 8002488:	080024bf 	.word	0x080024bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800248c:	4b94      	ldr	r3, [pc, #592]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d009      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002498:	4b91      	ldr	r3, [pc, #580]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	4a90      	ldr	r2, [pc, #576]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
 80024a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80024aa:	e111      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80024ac:	4b8d      	ldr	r3, [pc, #564]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024ae:	61bb      	str	r3, [r7, #24]
    break;
 80024b0:	e10e      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80024b2:	4b8d      	ldr	r3, [pc, #564]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024b4:	61bb      	str	r3, [r7, #24]
    break;
 80024b6:	e10b      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80024b8:	4b8c      	ldr	r3, [pc, #560]	; (80026ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80024ba:	61bb      	str	r3, [r7, #24]
    break;
 80024bc:	e108      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024be:	4b88      	ldr	r3, [pc, #544]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80024c8:	4b85      	ldr	r3, [pc, #532]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80024d4:	4b82      	ldr	r3, [pc, #520]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80024de:	4b80      	ldr	r3, [pc, #512]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e2:	08db      	lsrs	r3, r3, #3
 80024e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80e1 	beq.w	80026c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b02      	cmp	r3, #2
 8002506:	f000 8083 	beq.w	8002610 <HAL_RCC_GetSysClockFreq+0x204>
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b02      	cmp	r3, #2
 800250e:	f200 80a1 	bhi.w	8002654 <HAL_RCC_GetSysClockFreq+0x248>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x114>
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d056      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800251e:	e099      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002520:	4b6f      	ldr	r3, [pc, #444]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d02d      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800252c:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	4a6b      	ldr	r2, [pc, #428]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002556:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255e:	ee07 3a90 	vmov	s15, r3
 8002562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002566:	ed97 6a02 	vldr	s12, [r7, #8]
 800256a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80026f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800256e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800257a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800257e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002582:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002586:	e087      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002592:	eddf 6a58 	vldr	s13, [pc, #352]	; 80026f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800259a:	4b51      	ldr	r3, [pc, #324]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80026f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025ca:	e065      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80026f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025de:	4b40      	ldr	r3, [pc, #256]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e6:	ee07 3a90 	vmov	s15, r3
 80025ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80025f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80026f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800260e:	e043      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	ee07 3a90 	vmov	s15, r3
 8002616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80026fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800261e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002622:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002632:	ed97 6a02 	vldr	s12, [r7, #8]
 8002636:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80026f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800263a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800263e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800264a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800264e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002652:	e021      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80026f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002666:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002676:	ed97 6a02 	vldr	s12, [r7, #8]
 800267a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80026f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800267e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800268a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800268e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002696:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	0a5b      	lsrs	r3, r3, #9
 800269e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026a2:	3301      	adds	r3, #1
 80026a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80026b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026bc:	ee17 3a90 	vmov	r3, s15
 80026c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80026c2:	e005      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61bb      	str	r3, [r7, #24]
    break;
 80026c8:	e002      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026cc:	61bb      	str	r3, [r7, #24]
    break;
 80026ce:	bf00      	nop
  }

  return sysclockfreq;
 80026d0:	69bb      	ldr	r3, [r7, #24]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	58024400 	.word	0x58024400
 80026e4:	03d09000 	.word	0x03d09000
 80026e8:	003d0900 	.word	0x003d0900
 80026ec:	007a1200 	.word	0x007a1200
 80026f0:	46000000 	.word	0x46000000
 80026f4:	4c742400 	.word	0x4c742400
 80026f8:	4a742400 	.word	0x4a742400
 80026fc:	4af42400 	.word	0x4af42400

08002700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002706:	f7ff fe81 	bl	800240c <HAL_RCC_GetSysClockFreq>
 800270a:	4602      	mov	r2, r0
 800270c:	4b10      	ldr	r3, [pc, #64]	; (8002750 <HAL_RCC_GetHCLKFreq+0x50>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	490f      	ldr	r1, [pc, #60]	; (8002754 <HAL_RCC_GetHCLKFreq+0x54>)
 8002718:	5ccb      	ldrb	r3, [r1, r3]
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	fa22 f303 	lsr.w	r3, r2, r3
 8002722:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_RCC_GetHCLKFreq+0x50>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_RCC_GetHCLKFreq+0x54>)
 800272e:	5cd3      	ldrb	r3, [r2, r3]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_RCC_GetHCLKFreq+0x58>)
 800273c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800273e:	4a07      	ldr	r2, [pc, #28]	; (800275c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <HAL_RCC_GetHCLKFreq+0x58>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	58024400 	.word	0x58024400
 8002754:	080054a8 	.word	0x080054a8
 8002758:	24000004 	.word	0x24000004
 800275c:	24000000 	.word	0x24000000

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002764:	f7ff ffcc 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4904      	ldr	r1, [pc, #16]	; (8002788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	58024400 	.word	0x58024400
 8002788:	080054a8 	.word	0x080054a8

0800278c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002790:	f7ff ffb6 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4904      	ldr	r1, [pc, #16]	; (80027b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	58024400 	.word	0x58024400
 80027b4:	080054a8 	.word	0x080054a8

080027b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c0:	2300      	movs	r3, #0
 80027c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c4:	2300      	movs	r3, #0
 80027c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d03f      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027dc:	d02a      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027e2:	d824      	bhi.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027e8:	d018      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027ee:	d81e      	bhi.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f8:	d007      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027fa:	e018      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027fc:	4bab      	ldr	r3, [pc, #684]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	4aaa      	ldr	r2, [pc, #680]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002806:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002808:	e015      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3304      	adds	r3, #4
 800280e:	2102      	movs	r1, #2
 8002810:	4618      	mov	r0, r3
 8002812:	f001 f9cf 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002816:	4603      	mov	r3, r0
 8002818:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800281a:	e00c      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3324      	adds	r3, #36	; 0x24
 8002820:	2102      	movs	r1, #2
 8002822:	4618      	mov	r0, r3
 8002824:	f001 fa78 	bl	8003d18 <RCCEx_PLL3_Config>
 8002828:	4603      	mov	r3, r0
 800282a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800282c:	e003      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
      break;
 8002832:	e000      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d109      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800283c:	4b9b      	ldr	r3, [pc, #620]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002848:	4998      	ldr	r1, [pc, #608]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	650b      	str	r3, [r1, #80]	; 0x50
 800284e:	e001      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d03d      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002864:	2b04      	cmp	r3, #4
 8002866:	d826      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002868:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800286a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286e:	bf00      	nop
 8002870:	08002885 	.word	0x08002885
 8002874:	08002893 	.word	0x08002893
 8002878:	080028a5 	.word	0x080028a5
 800287c:	080028bd 	.word	0x080028bd
 8002880:	080028bd 	.word	0x080028bd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002884:	4b89      	ldr	r3, [pc, #548]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	4a88      	ldr	r2, [pc, #544]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800288a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002890:	e015      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f001 f98b 	bl	8003bb4 <RCCEx_PLL2_Config>
 800289e:	4603      	mov	r3, r0
 80028a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028a2:	e00c      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3324      	adds	r3, #36	; 0x24
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 fa34 	bl	8003d18 <RCCEx_PLL3_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028b4:	e003      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	75fb      	strb	r3, [r7, #23]
      break;
 80028ba:	e000      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80028bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028c4:	4b79      	ldr	r3, [pc, #484]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c8:	f023 0207 	bic.w	r2, r3, #7
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	4976      	ldr	r1, [pc, #472]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	650b      	str	r3, [r1, #80]	; 0x50
 80028d6:	e001      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d042      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f0:	d02b      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80028f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f6:	d825      	bhi.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028f8:	2bc0      	cmp	r3, #192	; 0xc0
 80028fa:	d028      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80028fc:	2bc0      	cmp	r3, #192	; 0xc0
 80028fe:	d821      	bhi.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002900:	2b80      	cmp	r3, #128	; 0x80
 8002902:	d016      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d81d      	bhi.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800290c:	2b40      	cmp	r3, #64	; 0x40
 800290e:	d007      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002910:	e018      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002912:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	4a65      	ldr	r2, [pc, #404]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800291e:	e017      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f001 f944 	bl	8003bb4 <RCCEx_PLL2_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002930:	e00e      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3324      	adds	r3, #36	; 0x24
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f001 f9ed 	bl	8003d18 <RCCEx_PLL3_Config>
 800293e:	4603      	mov	r3, r0
 8002940:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002942:	e005      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	75fb      	strb	r3, [r7, #23]
      break;
 8002948:	e002      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800294a:	bf00      	nop
 800294c:	e000      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800294e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002956:	4b55      	ldr	r3, [pc, #340]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002962:	4952      	ldr	r1, [pc, #328]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	650b      	str	r3, [r1, #80]	; 0x50
 8002968:	e001      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002976:	2b00      	cmp	r3, #0
 8002978:	d049      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002980:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002984:	d030      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002986:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800298a:	d82a      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800298c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002990:	d02c      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002992:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002996:	d824      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800299c:	d018      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800299e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a2:	d81e      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80029a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029ac:	d007      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x206>
 80029ae:	e018      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b0:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	4a3d      	ldr	r2, [pc, #244]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029bc:	e017      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f001 f8f5 	bl	8003bb4 <RCCEx_PLL2_Config>
 80029ca:	4603      	mov	r3, r0
 80029cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80029ce:	e00e      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3324      	adds	r3, #36	; 0x24
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 f99e 	bl	8003d18 <RCCEx_PLL3_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029e0:	e005      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80029e8:	bf00      	nop
 80029ea:	e000      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80029ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a02:	492a      	ldr	r1, [pc, #168]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	658b      	str	r3, [r1, #88]	; 0x58
 8002a08:	e001      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d04c      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a24:	d030      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002a26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a2a:	d82a      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a30:	d02c      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002a32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a36:	d824      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a3c:	d018      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002a3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a42:	d81e      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a4c:	d007      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002a4e:	e018      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	4a15      	ldr	r2, [pc, #84]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a5c:	e017      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 f8a5 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a6e:	e00e      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3324      	adds	r3, #36	; 0x24
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 f94e 	bl	8003d18 <RCCEx_PLL3_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a80:	e005      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75fb      	strb	r3, [r7, #23]
      break;
 8002a86:	e002      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002a88:	bf00      	nop
 8002a8a:	e000      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10d      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002aa2:	4902      	ldr	r1, [pc, #8]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	658b      	str	r3, [r1, #88]	; 0x58
 8002aa8:	e004      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002aaa:	bf00      	nop
 8002aac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d032      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac4:	2b30      	cmp	r3, #48	; 0x30
 8002ac6:	d01c      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002ac8:	2b30      	cmp	r3, #48	; 0x30
 8002aca:	d817      	bhi.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d00c      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d813      	bhi.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d016      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d10f      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002adc:	4baf      	ldr	r3, [pc, #700]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	4aae      	ldr	r2, [pc, #696]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002ae8:	e00e      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	2102      	movs	r1, #2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f001 f85f 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002afa:	e005      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	75fb      	strb	r3, [r7, #23]
      break;
 8002b00:	e002      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002b02:	bf00      	nop
 8002b04:	e000      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b0e:	4ba3      	ldr	r3, [pc, #652]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1a:	49a0      	ldr	r1, [pc, #640]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b20:	e001      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
 8002b24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d047      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b3a:	d030      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b40:	d82a      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b46:	d02c      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002b48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b4c:	d824      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b52:	d018      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b58:	d81e      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b62:	d007      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002b64:	e018      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b66:	4b8d      	ldr	r3, [pc, #564]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	4a8c      	ldr	r2, [pc, #560]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b72:	e017      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 f81a 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b84:	e00e      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3324      	adds	r3, #36	; 0x24
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 f8c3 	bl	8003d18 <RCCEx_PLL3_Config>
 8002b92:	4603      	mov	r3, r0
 8002b94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b96:	e005      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b9c:	e002      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002baa:	4b7c      	ldr	r3, [pc, #496]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb6:	4979      	ldr	r1, [pc, #484]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	650b      	str	r3, [r1, #80]	; 0x50
 8002bbc:	e001      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d049      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd6:	d02e      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bdc:	d828      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002bde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be2:	d02a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be8:	d822      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002bea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bee:	d026      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bf4:	d81c      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bfa:	d010      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c00:	d816      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01d      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0a:	d111      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2101      	movs	r1, #1
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 ffce 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c1c:	e012      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3324      	adds	r3, #36	; 0x24
 8002c22:	2101      	movs	r1, #1
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 f877 	bl	8003d18 <RCCEx_PLL3_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c2e:	e009      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
      break;
 8002c34:	e006      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c36:	bf00      	nop
 8002c38:	e004      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e002      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e000      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c4a:	4b54      	ldr	r3, [pc, #336]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c56:	4951      	ldr	r1, [pc, #324]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	650b      	str	r3, [r1, #80]	; 0x50
 8002c5c:	e001      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d04b      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c78:	d02e      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c7e:	d828      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d02a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8a:	d822      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c90:	d026      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002c92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c96:	d81c      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c9c:	d010      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca2:	d816      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01d      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cac:	d111      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 ff7d 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002cbe:	e012      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3324      	adds	r3, #36	; 0x24
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 f826 	bl	8003d18 <RCCEx_PLL3_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002cd0:	e009      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd6:	e006      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002cd8:	bf00      	nop
 8002cda:	e004      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002cdc:	bf00      	nop
 8002cde:	e002      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002ce0:	bf00      	nop
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10a      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002cfa:	4928      	ldr	r1, [pc, #160]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	658b      	str	r3, [r1, #88]	; 0x58
 8002d00:	e001      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
 8002d04:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02f      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d1a:	d00e      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d20:	d814      	bhi.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d015      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d2a:	d10f      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	4a1a      	ldr	r2, [pc, #104]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d38:	e00c      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2101      	movs	r1, #1
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 ff37 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002d46:	4603      	mov	r3, r0
 8002d48:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d4a:	e003      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d50:	e000      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d66:	490d      	ldr	r1, [pc, #52]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	650b      	str	r3, [r1, #80]	; 0x50
 8002d6c:	e001      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
 8002d70:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d033      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d81c      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002d86:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8c:	08002dc7 	.word	0x08002dc7
 8002d90:	08002da1 	.word	0x08002da1
 8002d94:	08002daf 	.word	0x08002daf
 8002d98:	08002dc7 	.word	0x08002dc7
 8002d9c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da0:	4bb8      	ldr	r3, [pc, #736]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	4ab7      	ldr	r2, [pc, #732]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002dac:	e00c      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3304      	adds	r3, #4
 8002db2:	2102      	movs	r1, #2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fefd 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002dbe:	e003      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002dce:	4bad      	ldr	r3, [pc, #692]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	49aa      	ldr	r1, [pc, #680]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002de0:	e001      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8086 	beq.w	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df4:	4ba4      	ldr	r3, [pc, #656]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4aa3      	ldr	r2, [pc, #652]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e00:	f7fe f888 	bl	8000f14 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e06:	e009      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e08:	f7fe f884 	bl	8000f14 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d902      	bls.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	75fb      	strb	r3, [r7, #23]
        break;
 8002e1a:	e005      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e1c:	4b9a      	ldr	r3, [pc, #616]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ef      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d166      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e2e:	4b95      	ldr	r3, [pc, #596]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e38:	4053      	eors	r3, r2
 8002e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d013      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e42:	4b90      	ldr	r3, [pc, #576]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e4c:	4b8d      	ldr	r3, [pc, #564]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a8c      	ldr	r2, [pc, #560]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e58:	4b8a      	ldr	r3, [pc, #552]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a89      	ldr	r2, [pc, #548]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e64:	4a87      	ldr	r2, [pc, #540]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e74:	d115      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe f84d 	bl	8000f14 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e7c:	e00b      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe f849 	bl	8000f14 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d902      	bls.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	75fb      	strb	r3, [r7, #23]
            break;
 8002e94:	e005      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e96:	4b7b      	ldr	r3, [pc, #492]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0ed      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d126      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eb6:	d10d      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002eb8:	4b72      	ldr	r3, [pc, #456]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ec6:	0919      	lsrs	r1, r3, #4
 8002ec8:	4b70      	ldr	r3, [pc, #448]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002eca:	400b      	ands	r3, r1
 8002ecc:	496d      	ldr	r1, [pc, #436]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	610b      	str	r3, [r1, #16]
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002ed4:	4b6b      	ldr	r3, [pc, #428]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	4a6a      	ldr	r2, [pc, #424]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002eda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ede:	6113      	str	r3, [r2, #16]
 8002ee0:	4b68      	ldr	r3, [pc, #416]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ee2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eee:	4965      	ldr	r1, [pc, #404]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	670b      	str	r3, [r1, #112]	; 0x70
 8002ef4:	e004      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ef6:	7dfb      	ldrb	r3, [r7, #23]
 8002ef8:	75bb      	strb	r3, [r7, #22]
 8002efa:	e001      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d07e      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f10:	2b28      	cmp	r3, #40	; 0x28
 8002f12:	d867      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002feb 	.word	0x08002feb
 8002f20:	08002fe5 	.word	0x08002fe5
 8002f24:	08002fe5 	.word	0x08002fe5
 8002f28:	08002fe5 	.word	0x08002fe5
 8002f2c:	08002fe5 	.word	0x08002fe5
 8002f30:	08002fe5 	.word	0x08002fe5
 8002f34:	08002fe5 	.word	0x08002fe5
 8002f38:	08002fe5 	.word	0x08002fe5
 8002f3c:	08002fc1 	.word	0x08002fc1
 8002f40:	08002fe5 	.word	0x08002fe5
 8002f44:	08002fe5 	.word	0x08002fe5
 8002f48:	08002fe5 	.word	0x08002fe5
 8002f4c:	08002fe5 	.word	0x08002fe5
 8002f50:	08002fe5 	.word	0x08002fe5
 8002f54:	08002fe5 	.word	0x08002fe5
 8002f58:	08002fe5 	.word	0x08002fe5
 8002f5c:	08002fd3 	.word	0x08002fd3
 8002f60:	08002fe5 	.word	0x08002fe5
 8002f64:	08002fe5 	.word	0x08002fe5
 8002f68:	08002fe5 	.word	0x08002fe5
 8002f6c:	08002fe5 	.word	0x08002fe5
 8002f70:	08002fe5 	.word	0x08002fe5
 8002f74:	08002fe5 	.word	0x08002fe5
 8002f78:	08002fe5 	.word	0x08002fe5
 8002f7c:	08002feb 	.word	0x08002feb
 8002f80:	08002fe5 	.word	0x08002fe5
 8002f84:	08002fe5 	.word	0x08002fe5
 8002f88:	08002fe5 	.word	0x08002fe5
 8002f8c:	08002fe5 	.word	0x08002fe5
 8002f90:	08002fe5 	.word	0x08002fe5
 8002f94:	08002fe5 	.word	0x08002fe5
 8002f98:	08002fe5 	.word	0x08002fe5
 8002f9c:	08002feb 	.word	0x08002feb
 8002fa0:	08002fe5 	.word	0x08002fe5
 8002fa4:	08002fe5 	.word	0x08002fe5
 8002fa8:	08002fe5 	.word	0x08002fe5
 8002fac:	08002fe5 	.word	0x08002fe5
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	08002fe5 	.word	0x08002fe5
 8002fb8:	08002fe5 	.word	0x08002fe5
 8002fbc:	08002feb 	.word	0x08002feb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fdf4 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fd0:	e00c      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3324      	adds	r3, #36	; 0x24
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fe9d 	bl	8003d18 <RCCEx_PLL3_Config>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fe2:	e003      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe8:	e000      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8002fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ffe:	4921      	ldr	r1, [pc, #132]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003000:	4313      	orrs	r3, r2
 8003002:	654b      	str	r3, [r1, #84]	; 0x54
 8003004:	e001      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d03e      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301a:	2b05      	cmp	r3, #5
 800301c:	d820      	bhi.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003067 	.word	0x08003067
 8003028:	0800303d 	.word	0x0800303d
 800302c:	0800304f 	.word	0x0800304f
 8003030:	08003067 	.word	0x08003067
 8003034:	08003067 	.word	0x08003067
 8003038:	08003067 	.word	0x08003067
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	2101      	movs	r1, #1
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fdb6 	bl	8003bb4 <RCCEx_PLL2_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800304c:	e00c      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3324      	adds	r3, #36	; 0x24
 8003052:	2101      	movs	r1, #1
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fe5f 	bl	8003d18 <RCCEx_PLL3_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800305e:	e003      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	75fb      	strb	r3, [r7, #23]
      break;
 8003064:	e000      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003068:	7dfb      	ldrb	r3, [r7, #23]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d110      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	f023 0207 	bic.w	r2, r3, #7
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307a:	4902      	ldr	r1, [pc, #8]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800307c:	4313      	orrs	r3, r2
 800307e:	654b      	str	r3, [r1, #84]	; 0x54
 8003080:	e008      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003082:	bf00      	nop
 8003084:	58024400 	.word	0x58024400
 8003088:	58024800 	.word	0x58024800
 800308c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d039      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d820      	bhi.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x934>
 80030aa:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	080030f3 	.word	0x080030f3
 80030b4:	080030c9 	.word	0x080030c9
 80030b8:	080030db 	.word	0x080030db
 80030bc:	080030f3 	.word	0x080030f3
 80030c0:	080030f3 	.word	0x080030f3
 80030c4:	080030f3 	.word	0x080030f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	2101      	movs	r1, #1
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fd70 	bl	8003bb4 <RCCEx_PLL2_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030d8:	e00c      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3324      	adds	r3, #36	; 0x24
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fe19 	bl	8003d18 <RCCEx_PLL3_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030ea:	e003      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	75fb      	strb	r3, [r7, #23]
      break;
 80030f0:	e000      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80030f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10a      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030fa:	4bb7      	ldr	r3, [pc, #732]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	f023 0207 	bic.w	r2, r3, #7
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	49b3      	ldr	r1, [pc, #716]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800310a:	4313      	orrs	r3, r2
 800310c:	658b      	str	r3, [r1, #88]	; 0x58
 800310e:	e001      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	d04b      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800312a:	d02e      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800312c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003130:	d828      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003136:	d02a      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313c:	d822      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800313e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003142:	d026      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003144:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003148:	d81c      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800314a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800314e:	d010      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003154:	d816      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01d      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800315a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800315e:	d111      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fd24 	bl	8003bb4 <RCCEx_PLL2_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003170:	e012      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3324      	adds	r3, #36	; 0x24
 8003176:	2102      	movs	r1, #2
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fdcd 	bl	8003d18 <RCCEx_PLL3_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003182:	e009      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
      break;
 8003188:	e006      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800318a:	bf00      	nop
 800318c:	e004      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800318e:	bf00      	nop
 8003190:	e002      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10a      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800319e:	4b8e      	ldr	r3, [pc, #568]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ac:	498a      	ldr	r1, [pc, #552]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	654b      	str	r3, [r1, #84]	; 0x54
 80031b2:	e001      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d04b      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031ce:	d02e      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80031d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031d4:	d828      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031da:	d02a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80031dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e0:	d822      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80031e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031e6:	d026      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80031e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031ec:	d81c      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80031ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f2:	d010      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80031f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f8:	d816      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01d      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80031fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003202:	d111      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fcd2 	bl	8003bb4 <RCCEx_PLL2_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003214:	e012      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3324      	adds	r3, #36	; 0x24
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fd7b 	bl	8003d18 <RCCEx_PLL3_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003226:	e009      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	75fb      	strb	r3, [r7, #23]
      break;
 800322c:	e006      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800322e:	bf00      	nop
 8003230:	e004      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800323a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003242:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003250:	4961      	ldr	r1, [pc, #388]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003252:	4313      	orrs	r3, r2
 8003254:	658b      	str	r3, [r1, #88]	; 0x58
 8003256:	e001      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	d04b      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800326e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003272:	d02e      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003274:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003278:	d828      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800327a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327e:	d02a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003284:	d822      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003286:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800328a:	d026      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800328c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003290:	d81c      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003292:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003296:	d010      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800329c:	d816      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01d      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80032a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a6:	d111      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3304      	adds	r3, #4
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fc80 	bl	8003bb4 <RCCEx_PLL2_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032b8:	e012      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3324      	adds	r3, #36	; 0x24
 80032be:	2102      	movs	r1, #2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fd29 	bl	8003d18 <RCCEx_PLL3_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032ca:	e009      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	75fb      	strb	r3, [r7, #23]
      break;
 80032d0:	e006      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80032d2:	bf00      	nop
 80032d4:	e004      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80032d6:	bf00      	nop
 80032d8:	e002      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80032de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80032e6:	4b3c      	ldr	r3, [pc, #240]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032f4:	4938      	ldr	r1, [pc, #224]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	658b      	str	r3, [r1, #88]	; 0x58
 80032fa:	e001      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003316:	d10a      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3324      	adds	r3, #36	; 0x24
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fcfa 	bl	8003d18 <RCCEx_PLL3_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800332e:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333c:	4926      	ldr	r1, [pc, #152]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800333e:	4313      	orrs	r3, r2
 8003340:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003358:	d10a      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3324      	adds	r3, #36	; 0x24
 800335e:	2102      	movs	r1, #2
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fcd9 	bl	8003d18 <RCCEx_PLL3_Config>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	4916      	ldr	r1, [pc, #88]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003380:	4313      	orrs	r3, r2
 8003382:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d036      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800339a:	d01f      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800339c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a0:	d817      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80033a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033aa:	d009      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80033ac:	e011      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fbfd 	bl	8003bb4 <RCCEx_PLL2_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033be:	e00e      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3324      	adds	r3, #36	; 0x24
 80033c4:	2102      	movs	r1, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fca6 	bl	8003d18 <RCCEx_PLL3_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033d0:	e005      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	75fb      	strb	r3, [r7, #23]
      break;
 80033d6:	e002      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80033d8:	58024400 	.word	0x58024400
      break;
 80033dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e4:	4b93      	ldr	r3, [pc, #588]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033f2:	4990      	ldr	r1, [pc, #576]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	658b      	str	r3, [r1, #88]	; 0x58
 80033f8:	e001      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d033      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003410:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003414:	d01c      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003416:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800341a:	d816      	bhi.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800341c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003420:	d003      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003422:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003426:	d007      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003428:	e00f      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800342a:	4b82      	ldr	r3, [pc, #520]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	4a81      	ldr	r2, [pc, #516]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003434:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003436:	e00c      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3324      	adds	r3, #36	; 0x24
 800343c:	2101      	movs	r1, #1
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fc6a 	bl	8003d18 <RCCEx_PLL3_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003448:	e003      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
      break;
 800344e:	e000      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10a      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003458:	4b76      	ldr	r3, [pc, #472]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003466:	4973      	ldr	r1, [pc, #460]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003468:	4313      	orrs	r3, r2
 800346a:	654b      	str	r3, [r1, #84]	; 0x54
 800346c:	e001      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346e:	7dfb      	ldrb	r3, [r7, #23]
 8003470:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d029      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348a:	d007      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800348c:	e00f      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800348e:	4b69      	ldr	r3, [pc, #420]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	4a68      	ldr	r2, [pc, #416]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003498:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800349a:	e00b      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3304      	adds	r3, #4
 80034a0:	2102      	movs	r1, #2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fb86 	bl	8003bb4 <RCCEx_PLL2_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034ac:	e002      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	75fb      	strb	r3, [r7, #23]
      break;
 80034b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034ba:	4b5e      	ldr	r3, [pc, #376]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c6:	495b      	ldr	r1, [pc, #364]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034cc:	e001      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3324      	adds	r3, #36	; 0x24
 80034e2:	2102      	movs	r1, #2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fc17 	bl	8003d18 <RCCEx_PLL3_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d030      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003508:	d017      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800350a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800350e:	d811      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003514:	d013      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800351a:	d80b      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d010      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003524:	d106      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003526:	4b43      	ldr	r3, [pc, #268]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	4a42      	ldr	r2, [pc, #264]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800352c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003530:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003532:	e007      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	75fb      	strb	r3, [r7, #23]
      break;
 8003538:	e004      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800353a:	bf00      	nop
 800353c:	e002      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800354a:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800354c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003556:	4937      	ldr	r1, [pc, #220]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003558:	4313      	orrs	r3, r2
 800355a:	654b      	str	r3, [r1, #84]	; 0x54
 800355c:	e001      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355e:	7dfb      	ldrb	r3, [r7, #23]
 8003560:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800356e:	4b31      	ldr	r3, [pc, #196]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003572:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	492e      	ldr	r1, [pc, #184]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800357c:	4313      	orrs	r3, r2
 800357e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d009      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800358c:	4b29      	ldr	r3, [pc, #164]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800359a:	4926      	ldr	r1, [pc, #152]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800359c:	4313      	orrs	r3, r2
 800359e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035ac:	4b21      	ldr	r3, [pc, #132]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b8:	491e      	ldr	r1, [pc, #120]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035ca:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	4a19      	ldr	r2, [pc, #100]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035d4:	6113      	str	r3, [r2, #16]
 80035d6:	4b17      	ldr	r3, [pc, #92]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035e0:	4914      	ldr	r1, [pc, #80]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	da08      	bge.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fa:	490e      	ldr	r1, [pc, #56]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	4906      	ldr	r1, [pc, #24]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800361c:	4313      	orrs	r3, r2
 800361e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003620:	7dbb      	ldrb	r3, [r7, #22]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	58024400 	.word	0x58024400

08003638 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800363c:	f7ff f860 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4904      	ldr	r1, [pc, #16]	; (8003660 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	58024400 	.word	0x58024400
 8003660:	080054a8 	.word	0x080054a8

08003664 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800366c:	4ba1      	ldr	r3, [pc, #644]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003676:	4b9f      	ldr	r3, [pc, #636]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	0b1b      	lsrs	r3, r3, #12
 800367c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003680:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003682:	4b9c      	ldr	r3, [pc, #624]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800368e:	4b99      	ldr	r3, [pc, #612]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	08db      	lsrs	r3, r3, #3
 8003694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8111 	beq.w	80038d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	f000 8083 	beq.w	80037c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	f200 80a1 	bhi.w	8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d056      	beq.n	800377c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80036ce:	e099      	b.n	8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036d0:	4b88      	ldr	r3, [pc, #544]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02d      	beq.n	8003738 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036dc:	4b85      	ldr	r3, [pc, #532]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	08db      	lsrs	r3, r3, #3
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	4a84      	ldr	r2, [pc, #528]	; (80038f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
 80036ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003706:	4b7b      	ldr	r3, [pc, #492]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003716:	ed97 6a03 	vldr	s12, [r7, #12]
 800371a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800371e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800372a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800372e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003732:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003736:	e087      	b.n	8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003742:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374a:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375a:	ed97 6a03 	vldr	s12, [r7, #12]
 800375e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800376a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800376e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800377a:	e065      	b.n	8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003786:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800378a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378e:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379e:	ed97 6a03 	vldr	s12, [r7, #12]
 80037a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037be:	e043      	b.n	8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80037ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d2:	4b48      	ldr	r3, [pc, #288]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003802:	e021      	b.n	8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003826:	ed97 6a03 	vldr	s12, [r7, #12]
 800382a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800382e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800383a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003846:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003848:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	0a5b      	lsrs	r3, r3, #9
 800384e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800385e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003862:	edd7 6a07 	vldr	s13, [r7, #28]
 8003866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800386e:	ee17 2a90 	vmov	r2, s15
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003876:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003880:	ee07 3a90 	vmov	s15, r3
 8003884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800388c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003890:	edd7 6a07 	vldr	s13, [r7, #28]
 8003894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800389c:	ee17 2a90 	vmov	r2, s15
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80038a4:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038be:	edd7 6a07 	vldr	s13, [r7, #28]
 80038c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ca:	ee17 2a90 	vmov	r2, s15
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80038d2:	e008      	b.n	80038e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
}
 80038e6:	bf00      	nop
 80038e8:	3724      	adds	r7, #36	; 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	58024400 	.word	0x58024400
 80038f8:	03d09000 	.word	0x03d09000
 80038fc:	46000000 	.word	0x46000000
 8003900:	4c742400 	.word	0x4c742400
 8003904:	4a742400 	.word	0x4a742400
 8003908:	4af42400 	.word	0x4af42400

0800390c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003914:	4ba1      	ldr	r3, [pc, #644]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800391e:	4b9f      	ldr	r3, [pc, #636]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	0d1b      	lsrs	r3, r3, #20
 8003924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003928:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800392a:	4b9c      	ldr	r3, [pc, #624]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003936:	4b99      	ldr	r3, [pc, #612]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	08db      	lsrs	r3, r3, #3
 800393c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	ee07 3a90 	vmov	s15, r3
 800394a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8111 	beq.w	8003b7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b02      	cmp	r3, #2
 800395e:	f000 8083 	beq.w	8003a68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b02      	cmp	r3, #2
 8003966:	f200 80a1 	bhi.w	8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d056      	beq.n	8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003976:	e099      	b.n	8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003978:	4b88      	ldr	r3, [pc, #544]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d02d      	beq.n	80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003984:	4b85      	ldr	r3, [pc, #532]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	08db      	lsrs	r3, r3, #3
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	4a84      	ldr	r2, [pc, #528]	; (8003ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
 8003994:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	ee07 3a90 	vmov	s15, r3
 800399c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ae:	4b7b      	ldr	r3, [pc, #492]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039be:	ed97 6a03 	vldr	s12, [r7, #12]
 80039c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80039de:	e087      	b.n	8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80039ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f2:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a22:	e065      	b.n	8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a36:	4b59      	ldr	r3, [pc, #356]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a66:	e043      	b.n	8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7a:	4b48      	ldr	r3, [pc, #288]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aaa:	e021      	b.n	8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003abe:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ad2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	0a5b      	lsrs	r3, r3, #9
 8003af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b16:	ee17 2a90 	vmov	r2, s15
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003b1e:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b28:	ee07 3a90 	vmov	s15, r3
 8003b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b44:	ee17 2a90 	vmov	r2, s15
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003b4c:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	0e1b      	lsrs	r3, r3, #24
 8003b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b72:	ee17 2a90 	vmov	r2, s15
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003b7a:	e008      	b.n	8003b8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
}
 8003b8e:	bf00      	nop
 8003b90:	3724      	adds	r7, #36	; 0x24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	58024400 	.word	0x58024400
 8003ba0:	03d09000 	.word	0x03d09000
 8003ba4:	46000000 	.word	0x46000000
 8003ba8:	4c742400 	.word	0x4c742400
 8003bac:	4a742400 	.word	0x4a742400
 8003bb0:	4af42400 	.word	0x4af42400

08003bb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bc2:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d101      	bne.n	8003bd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e099      	b.n	8003d06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003bd2:	4b4f      	ldr	r3, [pc, #316]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a4e      	ldr	r2, [pc, #312]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003bd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bde:	f7fd f999 	bl	8000f14 <HAL_GetTick>
 8003be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003be6:	f7fd f995 	bl	8000f14 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e086      	b.n	8003d06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bf8:	4b45      	ldr	r3, [pc, #276]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c04:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	031b      	lsls	r3, r3, #12
 8003c12:	493f      	ldr	r1, [pc, #252]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	628b      	str	r3, [r1, #40]	; 0x28
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	025b      	lsls	r3, r3, #9
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	061b      	lsls	r3, r3, #24
 8003c44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c48:	4931      	ldr	r1, [pc, #196]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c4e:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	492d      	ldr	r1, [pc, #180]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c60:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	f023 0220 	bic.w	r2, r3, #32
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	4928      	ldr	r1, [pc, #160]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c72:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c78:	f023 0310 	bic.w	r3, r3, #16
 8003c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c7e:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <RCCEx_PLL2_Config+0x160>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	69d2      	ldr	r2, [r2, #28]
 8003c8a:	00d2      	lsls	r2, r2, #3
 8003c8c:	4920      	ldr	r1, [pc, #128]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c92:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c98:	f043 0310 	orr.w	r3, r3, #16
 8003c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003caa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cb0:	e00f      	b.n	8003cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d106      	bne.n	8003cc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cc4:	e005      	b.n	8003cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	4a11      	ldr	r2, [pc, #68]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a0e      	ldr	r2, [pc, #56]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003cd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cde:	f7fd f919 	bl	8000f14 <HAL_GetTick>
 8003ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ce4:	e008      	b.n	8003cf8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ce6:	f7fd f915 	bl	8000f14 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e006      	b.n	8003d06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	58024400 	.word	0x58024400
 8003d14:	ffff0007 	.word	0xffff0007

08003d18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d26:	4b53      	ldr	r3, [pc, #332]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d101      	bne.n	8003d36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e099      	b.n	8003e6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d36:	4b4f      	ldr	r3, [pc, #316]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a4e      	ldr	r2, [pc, #312]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d42:	f7fd f8e7 	bl	8000f14 <HAL_GetTick>
 8003d46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d48:	e008      	b.n	8003d5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d4a:	f7fd f8e3 	bl	8000f14 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e086      	b.n	8003e6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d5c:	4b45      	ldr	r3, [pc, #276]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d68:	4b42      	ldr	r3, [pc, #264]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	051b      	lsls	r3, r3, #20
 8003d76:	493f      	ldr	r1, [pc, #252]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	628b      	str	r3, [r1, #40]	; 0x28
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	025b      	lsls	r3, r3, #9
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	061b      	lsls	r3, r3, #24
 8003da8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003dac:	4931      	ldr	r1, [pc, #196]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003db2:	4b30      	ldr	r3, [pc, #192]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	492d      	ldr	r1, [pc, #180]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	4928      	ldr	r1, [pc, #160]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003dd6:	4b27      	ldr	r3, [pc, #156]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	4a26      	ldr	r2, [pc, #152]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <RCCEx_PLL3_Config+0x160>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	69d2      	ldr	r2, [r2, #28]
 8003dee:	00d2      	lsls	r2, r2, #3
 8003df0:	4920      	ldr	r1, [pc, #128]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003df6:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d106      	bne.n	8003e16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e08:	4b1a      	ldr	r3, [pc, #104]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	4a19      	ldr	r2, [pc, #100]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e14:	e00f      	b.n	8003e36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d106      	bne.n	8003e2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e1c:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	4a14      	ldr	r2, [pc, #80]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e28:	e005      	b.n	8003e36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e2a:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	4a11      	ldr	r2, [pc, #68]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e36:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a0e      	ldr	r2, [pc, #56]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e42:	f7fd f867 	bl	8000f14 <HAL_GetTick>
 8003e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e48:	e008      	b.n	8003e5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e4a:	f7fd f863 	bl	8000f14 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e006      	b.n	8003e6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	58024400 	.word	0x58024400
 8003e78:	ffff0007 	.word	0xffff0007

08003e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e042      	b.n	8003f14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fc fe6f 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2224      	movs	r2, #36	; 0x24
 8003eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f82c 	bl	8003f1c <UART_SetConfig>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e022      	b.n	8003f14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fd80 	bl	80049dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fe07 	bl	8004b20 <UART_CheckIdleState>
 8003f12:	4603      	mov	r3, r0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b5b0      	push	{r4, r5, r7, lr}
 8003f1e:	b08e      	sub	sp, #56	; 0x38
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4bbf      	ldr	r3, [pc, #764]	; (8004248 <UART_SetConfig+0x32c>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4ab5      	ldr	r2, [pc, #724]	; (800424c <UART_SetConfig+0x330>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f82:	4313      	orrs	r3, r2
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	4bb0      	ldr	r3, [pc, #704]	; (8004250 <UART_SetConfig+0x334>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f96:	430b      	orrs	r3, r1
 8003f98:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	f023 010f 	bic.w	r1, r3, #15
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4aa7      	ldr	r2, [pc, #668]	; (8004254 <UART_SetConfig+0x338>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d176      	bne.n	80040a8 <UART_SetConfig+0x18c>
 8003fba:	4ba7      	ldr	r3, [pc, #668]	; (8004258 <UART_SetConfig+0x33c>)
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fc2:	2b28      	cmp	r3, #40	; 0x28
 8003fc4:	d86c      	bhi.n	80040a0 <UART_SetConfig+0x184>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0xb0>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08004071 	.word	0x08004071
 8003fd0:	080040a1 	.word	0x080040a1
 8003fd4:	080040a1 	.word	0x080040a1
 8003fd8:	080040a1 	.word	0x080040a1
 8003fdc:	080040a1 	.word	0x080040a1
 8003fe0:	080040a1 	.word	0x080040a1
 8003fe4:	080040a1 	.word	0x080040a1
 8003fe8:	080040a1 	.word	0x080040a1
 8003fec:	08004079 	.word	0x08004079
 8003ff0:	080040a1 	.word	0x080040a1
 8003ff4:	080040a1 	.word	0x080040a1
 8003ff8:	080040a1 	.word	0x080040a1
 8003ffc:	080040a1 	.word	0x080040a1
 8004000:	080040a1 	.word	0x080040a1
 8004004:	080040a1 	.word	0x080040a1
 8004008:	080040a1 	.word	0x080040a1
 800400c:	08004081 	.word	0x08004081
 8004010:	080040a1 	.word	0x080040a1
 8004014:	080040a1 	.word	0x080040a1
 8004018:	080040a1 	.word	0x080040a1
 800401c:	080040a1 	.word	0x080040a1
 8004020:	080040a1 	.word	0x080040a1
 8004024:	080040a1 	.word	0x080040a1
 8004028:	080040a1 	.word	0x080040a1
 800402c:	08004089 	.word	0x08004089
 8004030:	080040a1 	.word	0x080040a1
 8004034:	080040a1 	.word	0x080040a1
 8004038:	080040a1 	.word	0x080040a1
 800403c:	080040a1 	.word	0x080040a1
 8004040:	080040a1 	.word	0x080040a1
 8004044:	080040a1 	.word	0x080040a1
 8004048:	080040a1 	.word	0x080040a1
 800404c:	08004091 	.word	0x08004091
 8004050:	080040a1 	.word	0x080040a1
 8004054:	080040a1 	.word	0x080040a1
 8004058:	080040a1 	.word	0x080040a1
 800405c:	080040a1 	.word	0x080040a1
 8004060:	080040a1 	.word	0x080040a1
 8004064:	080040a1 	.word	0x080040a1
 8004068:	080040a1 	.word	0x080040a1
 800406c:	08004099 	.word	0x08004099
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004076:	e222      	b.n	80044be <UART_SetConfig+0x5a2>
 8004078:	2304      	movs	r3, #4
 800407a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800407e:	e21e      	b.n	80044be <UART_SetConfig+0x5a2>
 8004080:	2308      	movs	r3, #8
 8004082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004086:	e21a      	b.n	80044be <UART_SetConfig+0x5a2>
 8004088:	2310      	movs	r3, #16
 800408a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800408e:	e216      	b.n	80044be <UART_SetConfig+0x5a2>
 8004090:	2320      	movs	r3, #32
 8004092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004096:	e212      	b.n	80044be <UART_SetConfig+0x5a2>
 8004098:	2340      	movs	r3, #64	; 0x40
 800409a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800409e:	e20e      	b.n	80044be <UART_SetConfig+0x5a2>
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040a6:	e20a      	b.n	80044be <UART_SetConfig+0x5a2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a6b      	ldr	r2, [pc, #428]	; (800425c <UART_SetConfig+0x340>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d130      	bne.n	8004114 <UART_SetConfig+0x1f8>
 80040b2:	4b69      	ldr	r3, [pc, #420]	; (8004258 <UART_SetConfig+0x33c>)
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	2b05      	cmp	r3, #5
 80040bc:	d826      	bhi.n	800410c <UART_SetConfig+0x1f0>
 80040be:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <UART_SetConfig+0x1a8>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040dd 	.word	0x080040dd
 80040c8:	080040e5 	.word	0x080040e5
 80040cc:	080040ed 	.word	0x080040ed
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	080040fd 	.word	0x080040fd
 80040d8:	08004105 	.word	0x08004105
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040e2:	e1ec      	b.n	80044be <UART_SetConfig+0x5a2>
 80040e4:	2304      	movs	r3, #4
 80040e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ea:	e1e8      	b.n	80044be <UART_SetConfig+0x5a2>
 80040ec:	2308      	movs	r3, #8
 80040ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040f2:	e1e4      	b.n	80044be <UART_SetConfig+0x5a2>
 80040f4:	2310      	movs	r3, #16
 80040f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040fa:	e1e0      	b.n	80044be <UART_SetConfig+0x5a2>
 80040fc:	2320      	movs	r3, #32
 80040fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004102:	e1dc      	b.n	80044be <UART_SetConfig+0x5a2>
 8004104:	2340      	movs	r3, #64	; 0x40
 8004106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800410a:	e1d8      	b.n	80044be <UART_SetConfig+0x5a2>
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004112:	e1d4      	b.n	80044be <UART_SetConfig+0x5a2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a51      	ldr	r2, [pc, #324]	; (8004260 <UART_SetConfig+0x344>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d130      	bne.n	8004180 <UART_SetConfig+0x264>
 800411e:	4b4e      	ldr	r3, [pc, #312]	; (8004258 <UART_SetConfig+0x33c>)
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	2b05      	cmp	r3, #5
 8004128:	d826      	bhi.n	8004178 <UART_SetConfig+0x25c>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <UART_SetConfig+0x214>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004149 	.word	0x08004149
 8004134:	08004151 	.word	0x08004151
 8004138:	08004159 	.word	0x08004159
 800413c:	08004161 	.word	0x08004161
 8004140:	08004169 	.word	0x08004169
 8004144:	08004171 	.word	0x08004171
 8004148:	2300      	movs	r3, #0
 800414a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800414e:	e1b6      	b.n	80044be <UART_SetConfig+0x5a2>
 8004150:	2304      	movs	r3, #4
 8004152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004156:	e1b2      	b.n	80044be <UART_SetConfig+0x5a2>
 8004158:	2308      	movs	r3, #8
 800415a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800415e:	e1ae      	b.n	80044be <UART_SetConfig+0x5a2>
 8004160:	2310      	movs	r3, #16
 8004162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004166:	e1aa      	b.n	80044be <UART_SetConfig+0x5a2>
 8004168:	2320      	movs	r3, #32
 800416a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800416e:	e1a6      	b.n	80044be <UART_SetConfig+0x5a2>
 8004170:	2340      	movs	r3, #64	; 0x40
 8004172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004176:	e1a2      	b.n	80044be <UART_SetConfig+0x5a2>
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800417e:	e19e      	b.n	80044be <UART_SetConfig+0x5a2>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a37      	ldr	r2, [pc, #220]	; (8004264 <UART_SetConfig+0x348>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d130      	bne.n	80041ec <UART_SetConfig+0x2d0>
 800418a:	4b33      	ldr	r3, [pc, #204]	; (8004258 <UART_SetConfig+0x33c>)
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	2b05      	cmp	r3, #5
 8004194:	d826      	bhi.n	80041e4 <UART_SetConfig+0x2c8>
 8004196:	a201      	add	r2, pc, #4	; (adr r2, 800419c <UART_SetConfig+0x280>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041b5 	.word	0x080041b5
 80041a0:	080041bd 	.word	0x080041bd
 80041a4:	080041c5 	.word	0x080041c5
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041d5 	.word	0x080041d5
 80041b0:	080041dd 	.word	0x080041dd
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ba:	e180      	b.n	80044be <UART_SetConfig+0x5a2>
 80041bc:	2304      	movs	r3, #4
 80041be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041c2:	e17c      	b.n	80044be <UART_SetConfig+0x5a2>
 80041c4:	2308      	movs	r3, #8
 80041c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ca:	e178      	b.n	80044be <UART_SetConfig+0x5a2>
 80041cc:	2310      	movs	r3, #16
 80041ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041d2:	e174      	b.n	80044be <UART_SetConfig+0x5a2>
 80041d4:	2320      	movs	r3, #32
 80041d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041da:	e170      	b.n	80044be <UART_SetConfig+0x5a2>
 80041dc:	2340      	movs	r3, #64	; 0x40
 80041de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041e2:	e16c      	b.n	80044be <UART_SetConfig+0x5a2>
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ea:	e168      	b.n	80044be <UART_SetConfig+0x5a2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <UART_SetConfig+0x34c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d142      	bne.n	800427c <UART_SetConfig+0x360>
 80041f6:	4b18      	ldr	r3, [pc, #96]	; (8004258 <UART_SetConfig+0x33c>)
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d838      	bhi.n	8004274 <UART_SetConfig+0x358>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0x2ec>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	08004221 	.word	0x08004221
 800420c:	08004229 	.word	0x08004229
 8004210:	08004231 	.word	0x08004231
 8004214:	08004239 	.word	0x08004239
 8004218:	08004241 	.word	0x08004241
 800421c:	0800426d 	.word	0x0800426d
 8004220:	2300      	movs	r3, #0
 8004222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004226:	e14a      	b.n	80044be <UART_SetConfig+0x5a2>
 8004228:	2304      	movs	r3, #4
 800422a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800422e:	e146      	b.n	80044be <UART_SetConfig+0x5a2>
 8004230:	2308      	movs	r3, #8
 8004232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004236:	e142      	b.n	80044be <UART_SetConfig+0x5a2>
 8004238:	2310      	movs	r3, #16
 800423a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800423e:	e13e      	b.n	80044be <UART_SetConfig+0x5a2>
 8004240:	2320      	movs	r3, #32
 8004242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004246:	e13a      	b.n	80044be <UART_SetConfig+0x5a2>
 8004248:	cfff69f3 	.word	0xcfff69f3
 800424c:	58000c00 	.word	0x58000c00
 8004250:	11fff4ff 	.word	0x11fff4ff
 8004254:	40011000 	.word	0x40011000
 8004258:	58024400 	.word	0x58024400
 800425c:	40004400 	.word	0x40004400
 8004260:	40004800 	.word	0x40004800
 8004264:	40004c00 	.word	0x40004c00
 8004268:	40005000 	.word	0x40005000
 800426c:	2340      	movs	r3, #64	; 0x40
 800426e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004272:	e124      	b.n	80044be <UART_SetConfig+0x5a2>
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800427a:	e120      	b.n	80044be <UART_SetConfig+0x5a2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4acc      	ldr	r2, [pc, #816]	; (80045b4 <UART_SetConfig+0x698>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d176      	bne.n	8004374 <UART_SetConfig+0x458>
 8004286:	4bcc      	ldr	r3, [pc, #816]	; (80045b8 <UART_SetConfig+0x69c>)
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800428e:	2b28      	cmp	r3, #40	; 0x28
 8004290:	d86c      	bhi.n	800436c <UART_SetConfig+0x450>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0x37c>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	0800433d 	.word	0x0800433d
 800429c:	0800436d 	.word	0x0800436d
 80042a0:	0800436d 	.word	0x0800436d
 80042a4:	0800436d 	.word	0x0800436d
 80042a8:	0800436d 	.word	0x0800436d
 80042ac:	0800436d 	.word	0x0800436d
 80042b0:	0800436d 	.word	0x0800436d
 80042b4:	0800436d 	.word	0x0800436d
 80042b8:	08004345 	.word	0x08004345
 80042bc:	0800436d 	.word	0x0800436d
 80042c0:	0800436d 	.word	0x0800436d
 80042c4:	0800436d 	.word	0x0800436d
 80042c8:	0800436d 	.word	0x0800436d
 80042cc:	0800436d 	.word	0x0800436d
 80042d0:	0800436d 	.word	0x0800436d
 80042d4:	0800436d 	.word	0x0800436d
 80042d8:	0800434d 	.word	0x0800434d
 80042dc:	0800436d 	.word	0x0800436d
 80042e0:	0800436d 	.word	0x0800436d
 80042e4:	0800436d 	.word	0x0800436d
 80042e8:	0800436d 	.word	0x0800436d
 80042ec:	0800436d 	.word	0x0800436d
 80042f0:	0800436d 	.word	0x0800436d
 80042f4:	0800436d 	.word	0x0800436d
 80042f8:	08004355 	.word	0x08004355
 80042fc:	0800436d 	.word	0x0800436d
 8004300:	0800436d 	.word	0x0800436d
 8004304:	0800436d 	.word	0x0800436d
 8004308:	0800436d 	.word	0x0800436d
 800430c:	0800436d 	.word	0x0800436d
 8004310:	0800436d 	.word	0x0800436d
 8004314:	0800436d 	.word	0x0800436d
 8004318:	0800435d 	.word	0x0800435d
 800431c:	0800436d 	.word	0x0800436d
 8004320:	0800436d 	.word	0x0800436d
 8004324:	0800436d 	.word	0x0800436d
 8004328:	0800436d 	.word	0x0800436d
 800432c:	0800436d 	.word	0x0800436d
 8004330:	0800436d 	.word	0x0800436d
 8004334:	0800436d 	.word	0x0800436d
 8004338:	08004365 	.word	0x08004365
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004342:	e0bc      	b.n	80044be <UART_SetConfig+0x5a2>
 8004344:	2304      	movs	r3, #4
 8004346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800434a:	e0b8      	b.n	80044be <UART_SetConfig+0x5a2>
 800434c:	2308      	movs	r3, #8
 800434e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004352:	e0b4      	b.n	80044be <UART_SetConfig+0x5a2>
 8004354:	2310      	movs	r3, #16
 8004356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800435a:	e0b0      	b.n	80044be <UART_SetConfig+0x5a2>
 800435c:	2320      	movs	r3, #32
 800435e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004362:	e0ac      	b.n	80044be <UART_SetConfig+0x5a2>
 8004364:	2340      	movs	r3, #64	; 0x40
 8004366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800436a:	e0a8      	b.n	80044be <UART_SetConfig+0x5a2>
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004372:	e0a4      	b.n	80044be <UART_SetConfig+0x5a2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a90      	ldr	r2, [pc, #576]	; (80045bc <UART_SetConfig+0x6a0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d130      	bne.n	80043e0 <UART_SetConfig+0x4c4>
 800437e:	4b8e      	ldr	r3, [pc, #568]	; (80045b8 <UART_SetConfig+0x69c>)
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	2b05      	cmp	r3, #5
 8004388:	d826      	bhi.n	80043d8 <UART_SetConfig+0x4bc>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <UART_SetConfig+0x474>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043a9 	.word	0x080043a9
 8004394:	080043b1 	.word	0x080043b1
 8004398:	080043b9 	.word	0x080043b9
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043c9 	.word	0x080043c9
 80043a4:	080043d1 	.word	0x080043d1
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ae:	e086      	b.n	80044be <UART_SetConfig+0x5a2>
 80043b0:	2304      	movs	r3, #4
 80043b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043b6:	e082      	b.n	80044be <UART_SetConfig+0x5a2>
 80043b8:	2308      	movs	r3, #8
 80043ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043be:	e07e      	b.n	80044be <UART_SetConfig+0x5a2>
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043c6:	e07a      	b.n	80044be <UART_SetConfig+0x5a2>
 80043c8:	2320      	movs	r3, #32
 80043ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ce:	e076      	b.n	80044be <UART_SetConfig+0x5a2>
 80043d0:	2340      	movs	r3, #64	; 0x40
 80043d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043d6:	e072      	b.n	80044be <UART_SetConfig+0x5a2>
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043de:	e06e      	b.n	80044be <UART_SetConfig+0x5a2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a76      	ldr	r2, [pc, #472]	; (80045c0 <UART_SetConfig+0x6a4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d130      	bne.n	800444c <UART_SetConfig+0x530>
 80043ea:	4b73      	ldr	r3, [pc, #460]	; (80045b8 <UART_SetConfig+0x69c>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d826      	bhi.n	8004444 <UART_SetConfig+0x528>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0x4e0>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	08004415 	.word	0x08004415
 8004400:	0800441d 	.word	0x0800441d
 8004404:	08004425 	.word	0x08004425
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800441a:	e050      	b.n	80044be <UART_SetConfig+0x5a2>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004422:	e04c      	b.n	80044be <UART_SetConfig+0x5a2>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800442a:	e048      	b.n	80044be <UART_SetConfig+0x5a2>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004432:	e044      	b.n	80044be <UART_SetConfig+0x5a2>
 8004434:	2320      	movs	r3, #32
 8004436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800443a:	e040      	b.n	80044be <UART_SetConfig+0x5a2>
 800443c:	2340      	movs	r3, #64	; 0x40
 800443e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004442:	e03c      	b.n	80044be <UART_SetConfig+0x5a2>
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800444a:	e038      	b.n	80044be <UART_SetConfig+0x5a2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a5c      	ldr	r2, [pc, #368]	; (80045c4 <UART_SetConfig+0x6a8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d130      	bne.n	80044b8 <UART_SetConfig+0x59c>
 8004456:	4b58      	ldr	r3, [pc, #352]	; (80045b8 <UART_SetConfig+0x69c>)
 8004458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b05      	cmp	r3, #5
 8004460:	d826      	bhi.n	80044b0 <UART_SetConfig+0x594>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x54c>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004481 	.word	0x08004481
 800446c:	08004489 	.word	0x08004489
 8004470:	08004491 	.word	0x08004491
 8004474:	08004499 	.word	0x08004499
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044a9 	.word	0x080044a9
 8004480:	2302      	movs	r3, #2
 8004482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004486:	e01a      	b.n	80044be <UART_SetConfig+0x5a2>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800448e:	e016      	b.n	80044be <UART_SetConfig+0x5a2>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004496:	e012      	b.n	80044be <UART_SetConfig+0x5a2>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800449e:	e00e      	b.n	80044be <UART_SetConfig+0x5a2>
 80044a0:	2320      	movs	r3, #32
 80044a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044a6:	e00a      	b.n	80044be <UART_SetConfig+0x5a2>
 80044a8:	2340      	movs	r3, #64	; 0x40
 80044aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ae:	e006      	b.n	80044be <UART_SetConfig+0x5a2>
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044b6:	e002      	b.n	80044be <UART_SetConfig+0x5a2>
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <UART_SetConfig+0x6a8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	f040 80ef 	bne.w	80046a8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	dc46      	bgt.n	8004560 <UART_SetConfig+0x644>
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	f2c0 8081 	blt.w	80045da <UART_SetConfig+0x6be>
 80044d8:	3b02      	subs	r3, #2
 80044da:	2b1e      	cmp	r3, #30
 80044dc:	d87d      	bhi.n	80045da <UART_SetConfig+0x6be>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <UART_SetConfig+0x5c8>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	08004567 	.word	0x08004567
 80044e8:	080045db 	.word	0x080045db
 80044ec:	0800456f 	.word	0x0800456f
 80044f0:	080045db 	.word	0x080045db
 80044f4:	080045db 	.word	0x080045db
 80044f8:	080045db 	.word	0x080045db
 80044fc:	0800457f 	.word	0x0800457f
 8004500:	080045db 	.word	0x080045db
 8004504:	080045db 	.word	0x080045db
 8004508:	080045db 	.word	0x080045db
 800450c:	080045db 	.word	0x080045db
 8004510:	080045db 	.word	0x080045db
 8004514:	080045db 	.word	0x080045db
 8004518:	080045db 	.word	0x080045db
 800451c:	0800458f 	.word	0x0800458f
 8004520:	080045db 	.word	0x080045db
 8004524:	080045db 	.word	0x080045db
 8004528:	080045db 	.word	0x080045db
 800452c:	080045db 	.word	0x080045db
 8004530:	080045db 	.word	0x080045db
 8004534:	080045db 	.word	0x080045db
 8004538:	080045db 	.word	0x080045db
 800453c:	080045db 	.word	0x080045db
 8004540:	080045db 	.word	0x080045db
 8004544:	080045db 	.word	0x080045db
 8004548:	080045db 	.word	0x080045db
 800454c:	080045db 	.word	0x080045db
 8004550:	080045db 	.word	0x080045db
 8004554:	080045db 	.word	0x080045db
 8004558:	080045db 	.word	0x080045db
 800455c:	080045cd 	.word	0x080045cd
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d036      	beq.n	80045d2 <UART_SetConfig+0x6b6>
 8004564:	e039      	b.n	80045da <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004566:	f7ff f867 	bl	8003638 <HAL_RCCEx_GetD3PCLK1Freq>
 800456a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800456c:	e03b      	b.n	80045e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800456e:	f107 0314 	add.w	r3, r7, #20
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff f876 	bl	8003664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800457c:	e033      	b.n	80045e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800457e:	f107 0308 	add.w	r3, r7, #8
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff f9c2 	bl	800390c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800458c:	e02b      	b.n	80045e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <UART_SetConfig+0x69c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800459a:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <UART_SetConfig+0x69c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	08db      	lsrs	r3, r3, #3
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <UART_SetConfig+0x6ac>)
 80045a6:	fa22 f303 	lsr.w	r3, r2, r3
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80045ac:	e01b      	b.n	80045e6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <UART_SetConfig+0x6ac>)
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045b2:	e018      	b.n	80045e6 <UART_SetConfig+0x6ca>
 80045b4:	40011400 	.word	0x40011400
 80045b8:	58024400 	.word	0x58024400
 80045bc:	40007800 	.word	0x40007800
 80045c0:	40007c00 	.word	0x40007c00
 80045c4:	58000c00 	.word	0x58000c00
 80045c8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80045cc:	4bc4      	ldr	r3, [pc, #784]	; (80048e0 <UART_SetConfig+0x9c4>)
 80045ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045d0:	e009      	b.n	80045e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045d8:	e005      	b.n	80045e6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80045e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 81da 	beq.w	80049a2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	4abc      	ldr	r2, [pc, #752]	; (80048e4 <UART_SetConfig+0x9c8>)
 80045f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045f8:	461a      	mov	r2, r3
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004600:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	4413      	add	r3, r2
 800460c:	6a3a      	ldr	r2, [r7, #32]
 800460e:	429a      	cmp	r2, r3
 8004610:	d305      	bcc.n	800461e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	429a      	cmp	r2, r3
 800461c:	d903      	bls.n	8004626 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004624:	e1bd      	b.n	80049a2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	4618      	mov	r0, r3
 800462a:	f04f 0100 	mov.w	r1, #0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	4aac      	ldr	r2, [pc, #688]	; (80048e4 <UART_SetConfig+0x9c8>)
 8004634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004638:	b29a      	uxth	r2, r3
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	f7fb fe4b 	bl	80002d8 <__aeabi_uldivmod>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4610      	mov	r0, r2
 8004648:	4619      	mov	r1, r3
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	020b      	lsls	r3, r1, #8
 8004654:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004658:	0202      	lsls	r2, r0, #8
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	6849      	ldr	r1, [r1, #4]
 800465e:	0849      	lsrs	r1, r1, #1
 8004660:	4608      	mov	r0, r1
 8004662:	f04f 0100 	mov.w	r1, #0
 8004666:	1814      	adds	r4, r2, r0
 8004668:	eb43 0501 	adc.w	r5, r3, r1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	461a      	mov	r2, r3
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	4620      	mov	r0, r4
 8004678:	4629      	mov	r1, r5
 800467a:	f7fb fe2d 	bl	80002d8 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4613      	mov	r3, r2
 8004684:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468c:	d308      	bcc.n	80046a0 <UART_SetConfig+0x784>
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004694:	d204      	bcs.n	80046a0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	e180      	b.n	80049a2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80046a6:	e17c      	b.n	80049a2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b0:	f040 80bf 	bne.w	8004832 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80046b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	dc49      	bgt.n	8004750 <UART_SetConfig+0x834>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	db7c      	blt.n	80047ba <UART_SetConfig+0x89e>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d87a      	bhi.n	80047ba <UART_SetConfig+0x89e>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0x7b0>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	08004757 	.word	0x08004757
 80046d0:	0800475f 	.word	0x0800475f
 80046d4:	080047bb 	.word	0x080047bb
 80046d8:	080047bb 	.word	0x080047bb
 80046dc:	08004767 	.word	0x08004767
 80046e0:	080047bb 	.word	0x080047bb
 80046e4:	080047bb 	.word	0x080047bb
 80046e8:	080047bb 	.word	0x080047bb
 80046ec:	08004777 	.word	0x08004777
 80046f0:	080047bb 	.word	0x080047bb
 80046f4:	080047bb 	.word	0x080047bb
 80046f8:	080047bb 	.word	0x080047bb
 80046fc:	080047bb 	.word	0x080047bb
 8004700:	080047bb 	.word	0x080047bb
 8004704:	080047bb 	.word	0x080047bb
 8004708:	080047bb 	.word	0x080047bb
 800470c:	08004787 	.word	0x08004787
 8004710:	080047bb 	.word	0x080047bb
 8004714:	080047bb 	.word	0x080047bb
 8004718:	080047bb 	.word	0x080047bb
 800471c:	080047bb 	.word	0x080047bb
 8004720:	080047bb 	.word	0x080047bb
 8004724:	080047bb 	.word	0x080047bb
 8004728:	080047bb 	.word	0x080047bb
 800472c:	080047bb 	.word	0x080047bb
 8004730:	080047bb 	.word	0x080047bb
 8004734:	080047bb 	.word	0x080047bb
 8004738:	080047bb 	.word	0x080047bb
 800473c:	080047bb 	.word	0x080047bb
 8004740:	080047bb 	.word	0x080047bb
 8004744:	080047bb 	.word	0x080047bb
 8004748:	080047bb 	.word	0x080047bb
 800474c:	080047ad 	.word	0x080047ad
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d02e      	beq.n	80047b2 <UART_SetConfig+0x896>
 8004754:	e031      	b.n	80047ba <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004756:	f7fe f803 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 800475a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800475c:	e033      	b.n	80047c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800475e:	f7fe f815 	bl	800278c <HAL_RCC_GetPCLK2Freq>
 8004762:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004764:	e02f      	b.n	80047c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004766:	f107 0314 	add.w	r3, r7, #20
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe ff7a 	bl	8003664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004774:	e027      	b.n	80047c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004776:	f107 0308 	add.w	r3, r7, #8
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff f8c6 	bl	800390c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004784:	e01f      	b.n	80047c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004786:	4b58      	ldr	r3, [pc, #352]	; (80048e8 <UART_SetConfig+0x9cc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004792:	4b55      	ldr	r3, [pc, #340]	; (80048e8 <UART_SetConfig+0x9cc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	08db      	lsrs	r3, r3, #3
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	4a53      	ldr	r2, [pc, #332]	; (80048ec <UART_SetConfig+0x9d0>)
 800479e:	fa22 f303 	lsr.w	r3, r2, r3
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047a4:	e00f      	b.n	80047c6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80047a6:	4b51      	ldr	r3, [pc, #324]	; (80048ec <UART_SetConfig+0x9d0>)
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047aa:	e00c      	b.n	80047c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047ac:	4b4c      	ldr	r3, [pc, #304]	; (80048e0 <UART_SetConfig+0x9c4>)
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047b0:	e009      	b.n	80047c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047b8:	e005      	b.n	80047c6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80047c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80ea 	beq.w	80049a2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	4a44      	ldr	r2, [pc, #272]	; (80048e4 <UART_SetConfig+0x9c8>)
 80047d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047d8:	461a      	mov	r2, r3
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80047e0:	005a      	lsls	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	441a      	add	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	2b0f      	cmp	r3, #15
 80047fa:	d916      	bls.n	800482a <UART_SetConfig+0x90e>
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004802:	d212      	bcs.n	800482a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	b29b      	uxth	r3, r3
 8004808:	f023 030f 	bic.w	r3, r3, #15
 800480c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	b29b      	uxth	r3, r3
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	b29a      	uxth	r2, r3
 800481a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800481c:	4313      	orrs	r3, r2
 800481e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004826:	60da      	str	r2, [r3, #12]
 8004828:	e0bb      	b.n	80049a2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004830:	e0b7      	b.n	80049a2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004832:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004836:	2b20      	cmp	r3, #32
 8004838:	dc4a      	bgt.n	80048d0 <UART_SetConfig+0x9b4>
 800483a:	2b00      	cmp	r3, #0
 800483c:	f2c0 8086 	blt.w	800494c <UART_SetConfig+0xa30>
 8004840:	2b20      	cmp	r3, #32
 8004842:	f200 8083 	bhi.w	800494c <UART_SetConfig+0xa30>
 8004846:	a201      	add	r2, pc, #4	; (adr r2, 800484c <UART_SetConfig+0x930>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	080048d7 	.word	0x080048d7
 8004850:	080048f1 	.word	0x080048f1
 8004854:	0800494d 	.word	0x0800494d
 8004858:	0800494d 	.word	0x0800494d
 800485c:	080048f9 	.word	0x080048f9
 8004860:	0800494d 	.word	0x0800494d
 8004864:	0800494d 	.word	0x0800494d
 8004868:	0800494d 	.word	0x0800494d
 800486c:	08004909 	.word	0x08004909
 8004870:	0800494d 	.word	0x0800494d
 8004874:	0800494d 	.word	0x0800494d
 8004878:	0800494d 	.word	0x0800494d
 800487c:	0800494d 	.word	0x0800494d
 8004880:	0800494d 	.word	0x0800494d
 8004884:	0800494d 	.word	0x0800494d
 8004888:	0800494d 	.word	0x0800494d
 800488c:	08004919 	.word	0x08004919
 8004890:	0800494d 	.word	0x0800494d
 8004894:	0800494d 	.word	0x0800494d
 8004898:	0800494d 	.word	0x0800494d
 800489c:	0800494d 	.word	0x0800494d
 80048a0:	0800494d 	.word	0x0800494d
 80048a4:	0800494d 	.word	0x0800494d
 80048a8:	0800494d 	.word	0x0800494d
 80048ac:	0800494d 	.word	0x0800494d
 80048b0:	0800494d 	.word	0x0800494d
 80048b4:	0800494d 	.word	0x0800494d
 80048b8:	0800494d 	.word	0x0800494d
 80048bc:	0800494d 	.word	0x0800494d
 80048c0:	0800494d 	.word	0x0800494d
 80048c4:	0800494d 	.word	0x0800494d
 80048c8:	0800494d 	.word	0x0800494d
 80048cc:	0800493f 	.word	0x0800493f
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d037      	beq.n	8004944 <UART_SetConfig+0xa28>
 80048d4:	e03a      	b.n	800494c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d6:	f7fd ff43 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 80048da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80048dc:	e03c      	b.n	8004958 <UART_SetConfig+0xa3c>
 80048de:	bf00      	nop
 80048e0:	003d0900 	.word	0x003d0900
 80048e4:	080054b8 	.word	0x080054b8
 80048e8:	58024400 	.word	0x58024400
 80048ec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f0:	f7fd ff4c 	bl	800278c <HAL_RCC_GetPCLK2Freq>
 80048f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80048f6:	e02f      	b.n	8004958 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048f8:	f107 0314 	add.w	r3, r7, #20
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe feb1 	bl	8003664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004906:	e027      	b.n	8004958 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004908:	f107 0308 	add.w	r3, r7, #8
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe fffd 	bl	800390c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004916:	e01f      	b.n	8004958 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004918:	4b2c      	ldr	r3, [pc, #176]	; (80049cc <UART_SetConfig+0xab0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004924:	4b29      	ldr	r3, [pc, #164]	; (80049cc <UART_SetConfig+0xab0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	08db      	lsrs	r3, r3, #3
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	4a28      	ldr	r2, [pc, #160]	; (80049d0 <UART_SetConfig+0xab4>)
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004936:	e00f      	b.n	8004958 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <UART_SetConfig+0xab4>)
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800493c:	e00c      	b.n	8004958 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800493e:	4b25      	ldr	r3, [pc, #148]	; (80049d4 <UART_SetConfig+0xab8>)
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004942:	e009      	b.n	8004958 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800494a:	e005      	b.n	8004958 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004956:	bf00      	nop
    }

    if (pclk != 0U)
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d021      	beq.n	80049a2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	4a1d      	ldr	r2, [pc, #116]	; (80049d8 <UART_SetConfig+0xabc>)
 8004964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004968:	461a      	mov	r2, r3
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	441a      	add	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	b29b      	uxth	r3, r3
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	2b0f      	cmp	r3, #15
 8004988:	d908      	bls.n	800499c <UART_SetConfig+0xa80>
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004990:	d204      	bcs.n	800499c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004998:	60da      	str	r2, [r3, #12]
 800499a:	e002      	b.n	80049a2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80049be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3738      	adds	r7, #56	; 0x38
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}
 80049ca:	bf00      	nop
 80049cc:	58024400 	.word	0x58024400
 80049d0:	03d09000 	.word	0x03d09000
 80049d4:	003d0900 	.word	0x003d0900
 80049d8:	080054b8 	.word	0x080054b8

080049dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01a      	beq.n	8004af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ada:	d10a      	bne.n	8004af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
  }
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b30:	f7fc f9f0 	bl	8000f14 <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d10e      	bne.n	8004b62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f82f 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e025      	b.n	8004bae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d10e      	bne.n	8004b8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f819 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e00f      	b.n	8004bae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc6:	e062      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d05e      	beq.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd0:	f7fc f9a0 	bl	8000f14 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d302      	bcc.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11d      	bne.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bf4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0201 	bic.w	r2, r2, #1
 8004c04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e045      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d02e      	beq.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3e:	d126      	bne.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c58:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0201 	bic.w	r2, r2, #1
 8004c68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e00f      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69da      	ldr	r2, [r3, #28]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4013      	ands	r3, r2
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d08d      	beq.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b085      	sub	sp, #20
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_UARTEx_DisableFifoMode+0x16>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e027      	b.n	8004d1c <HAL_UARTEx_DisableFifoMode+0x66>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2224      	movs	r2, #36	; 0x24
 8004cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004cfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e02d      	b.n	8004d9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2224      	movs	r2, #36	; 0x24
 8004d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f84f 	bl	8004e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e02d      	b.n	8004e18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2224      	movs	r2, #36	; 0x24
 8004dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0201 	bic.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f811 	bl	8004e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d108      	bne.n	8004e42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e40:	e031      	b.n	8004ea6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e42:	2310      	movs	r3, #16
 8004e44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e46:	2310      	movs	r3, #16
 8004e48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	0e5b      	lsrs	r3, r3, #25
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	0f5b      	lsrs	r3, r3, #29
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e6a:	7bbb      	ldrb	r3, [r7, #14]
 8004e6c:	7b3a      	ldrb	r2, [r7, #12]
 8004e6e:	4911      	ldr	r1, [pc, #68]	; (8004eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8004e70:	5c8a      	ldrb	r2, [r1, r2]
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e76:	7b3a      	ldrb	r2, [r7, #12]
 8004e78:	490f      	ldr	r1, [pc, #60]	; (8004eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8004e7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	7b7a      	ldrb	r2, [r7, #13]
 8004e8c:	4909      	ldr	r1, [pc, #36]	; (8004eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8004e8e:	5c8a      	ldrb	r2, [r1, r2]
 8004e90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e94:	7b7a      	ldrb	r2, [r7, #13]
 8004e96:	4908      	ldr	r1, [pc, #32]	; (8004eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8004e98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ea6:	bf00      	nop
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	080054d0 	.word	0x080054d0
 8004eb8:	080054d8 	.word	0x080054d8

08004ebc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	f107 001c 	add.w	r0, r7, #28
 8004eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d120      	bne.n	8004f16 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	4b2a      	ldr	r3, [pc, #168]	; (8004f90 <USB_CoreInit+0xd4>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d105      	bne.n	8004f0a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa60 	bl	80053d0 <USB_CoreReset>
 8004f10:	4603      	mov	r3, r0
 8004f12:	73fb      	strb	r3, [r7, #15]
 8004f14:	e01a      	b.n	8004f4c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fa54 	bl	80053d0 <USB_CoreReset>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f3e:	e005      	b.n	8004f4c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d116      	bne.n	8004f80 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <USB_CoreInit+0xd8>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f043 0206 	orr.w	r2, r3, #6
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f043 0220 	orr.w	r2, r3, #32
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f8c:	b004      	add	sp, #16
 8004f8e:	4770      	bx	lr
 8004f90:	ffbdffbf 	.word	0xffbdffbf
 8004f94:	03ee0000 	.word	0x03ee0000

08004f98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f023 0201 	bic.w	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d106      	bne.n	8004fe6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60da      	str	r2, [r3, #12]
 8004fe4:	e00b      	b.n	8004ffe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d106      	bne.n	8004ffa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
 8004ff8:	e001      	b.n	8004ffe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e003      	b.n	8005006 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004ffe:	2032      	movs	r0, #50	; 0x32
 8005000:	f7fb ff94 	bl	8000f2c <HAL_Delay>

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005010:	b084      	sub	sp, #16
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800501e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	e009      	b.n	8005044 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	3340      	adds	r3, #64	; 0x40
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	2200      	movs	r2, #0
 800503c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	3301      	adds	r3, #1
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b0e      	cmp	r3, #14
 8005048:	d9f2      	bls.n	8005030 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800504a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d11c      	bne.n	800508a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800505e:	f043 0302 	orr.w	r3, r3, #2
 8005062:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e005      	b.n	8005096 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800509c:	461a      	mov	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a8:	4619      	mov	r1, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b0:	461a      	mov	r2, r3
 80050b2:	680b      	ldr	r3, [r1, #0]
 80050b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d10c      	bne.n	80050d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d104      	bne.n	80050cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050c2:	2100      	movs	r1, #0
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f949 	bl	800535c <USB_SetDevSpeed>
 80050ca:	e008      	b.n	80050de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050cc:	2101      	movs	r1, #1
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f944 	bl	800535c <USB_SetDevSpeed>
 80050d4:	e003      	b.n	80050de <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050d6:	2103      	movs	r1, #3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f93f 	bl	800535c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050de:	2110      	movs	r1, #16
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f8f3 	bl	80052cc <USB_FlushTxFifo>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f911 	bl	8005318 <USB_FlushRxFifo>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005106:	461a      	mov	r2, r3
 8005108:	2300      	movs	r3, #0
 800510a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	461a      	mov	r2, r3
 8005114:	2300      	movs	r3, #0
 8005116:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511e:	461a      	mov	r2, r3
 8005120:	2300      	movs	r3, #0
 8005122:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e043      	b.n	80051b2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800513c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005140:	d118      	bne.n	8005174 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	461a      	mov	r2, r3
 8005156:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	e013      	b.n	8005186 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	461a      	mov	r2, r3
 800516c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e008      	b.n	8005186 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	461a      	mov	r2, r3
 8005182:	2300      	movs	r3, #0
 8005184:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	461a      	mov	r2, r3
 8005194:	2300      	movs	r3, #0
 8005196:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a4:	461a      	mov	r2, r3
 80051a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	3301      	adds	r3, #1
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d3b7      	bcc.n	800512a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	e043      	b.n	8005248 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d6:	d118      	bne.n	800520a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	461a      	mov	r2, r3
 80051ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e013      	b.n	800521c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	461a      	mov	r2, r3
 8005202:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	e008      	b.n	800521c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	461a      	mov	r2, r3
 8005218:	2300      	movs	r3, #0
 800521a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	461a      	mov	r2, r3
 800522a:	2300      	movs	r3, #0
 800522c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523a:	461a      	mov	r2, r3
 800523c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005240:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	3301      	adds	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	429a      	cmp	r2, r3
 800524e:	d3b7      	bcc.n	80051c0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800525e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005262:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005270:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f043 0210 	orr.w	r2, r3, #16
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <USB_DevInit+0x2b4>)
 800528a:	4313      	orrs	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f043 0208 	orr.w	r2, r3, #8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d105      	bne.n	80052b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <USB_DevInit+0x2b8>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c0:	b004      	add	sp, #16
 80052c2:	4770      	bx	lr
 80052c4:	803c3800 	.word	0x803c3800
 80052c8:	40000004 	.word	0x40000004

080052cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	019b      	lsls	r3, r3, #6
 80052de:	f043 0220 	orr.w	r2, r3, #32
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3301      	adds	r3, #1
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4a09      	ldr	r2, [pc, #36]	; (8005314 <USB_FlushTxFifo+0x48>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e006      	b.n	8005306 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b20      	cmp	r3, #32
 8005302:	d0f0      	beq.n	80052e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	00030d40 	.word	0x00030d40

08005318 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2210      	movs	r2, #16
 8005328:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3301      	adds	r3, #1
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <USB_FlushRxFifo+0x40>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e006      	b.n	800534a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b10      	cmp	r3, #16
 8005346:	d0f0      	beq.n	800532a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	00030d40 	.word	0x00030d40

0800535c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	68f9      	ldr	r1, [r7, #12]
 8005378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800537c:	4313      	orrs	r3, r2
 800537e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053a8:	f023 0303 	bic.w	r3, r3, #3
 80053ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053bc:	f043 0302 	orr.w	r3, r3, #2
 80053c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3301      	adds	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4a13      	ldr	r2, [pc, #76]	; (8005434 <USB_CoreReset+0x64>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e01b      	b.n	8005426 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	daf2      	bge.n	80053dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f043 0201 	orr.w	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3301      	adds	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4a09      	ldr	r2, [pc, #36]	; (8005434 <USB_CoreReset+0x64>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e006      	b.n	8005426 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b01      	cmp	r3, #1
 8005422:	d0f0      	beq.n	8005406 <USB_CoreReset+0x36>

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	00030d40 	.word	0x00030d40

08005438 <__libc_init_array>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	4d0d      	ldr	r5, [pc, #52]	; (8005470 <__libc_init_array+0x38>)
 800543c:	4c0d      	ldr	r4, [pc, #52]	; (8005474 <__libc_init_array+0x3c>)
 800543e:	1b64      	subs	r4, r4, r5
 8005440:	10a4      	asrs	r4, r4, #2
 8005442:	2600      	movs	r6, #0
 8005444:	42a6      	cmp	r6, r4
 8005446:	d109      	bne.n	800545c <__libc_init_array+0x24>
 8005448:	4d0b      	ldr	r5, [pc, #44]	; (8005478 <__libc_init_array+0x40>)
 800544a:	4c0c      	ldr	r4, [pc, #48]	; (800547c <__libc_init_array+0x44>)
 800544c:	f000 f820 	bl	8005490 <_init>
 8005450:	1b64      	subs	r4, r4, r5
 8005452:	10a4      	asrs	r4, r4, #2
 8005454:	2600      	movs	r6, #0
 8005456:	42a6      	cmp	r6, r4
 8005458:	d105      	bne.n	8005466 <__libc_init_array+0x2e>
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005460:	4798      	blx	r3
 8005462:	3601      	adds	r6, #1
 8005464:	e7ee      	b.n	8005444 <__libc_init_array+0xc>
 8005466:	f855 3b04 	ldr.w	r3, [r5], #4
 800546a:	4798      	blx	r3
 800546c:	3601      	adds	r6, #1
 800546e:	e7f2      	b.n	8005456 <__libc_init_array+0x1e>
 8005470:	080054e8 	.word	0x080054e8
 8005474:	080054e8 	.word	0x080054e8
 8005478:	080054e8 	.word	0x080054e8
 800547c:	080054ec 	.word	0x080054ec

08005480 <memset>:
 8005480:	4402      	add	r2, r0
 8005482:	4603      	mov	r3, r0
 8005484:	4293      	cmp	r3, r2
 8005486:	d100      	bne.n	800548a <memset+0xa>
 8005488:	4770      	bx	lr
 800548a:	f803 1b01 	strb.w	r1, [r3], #1
 800548e:	e7f9      	b.n	8005484 <memset+0x4>

08005490 <_init>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr

0800549c <_fini>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	bf00      	nop
 80054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a2:	bc08      	pop	{r3}
 80054a4:	469e      	mov	lr, r3
 80054a6:	4770      	bx	lr
